<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Markdown语言使用方法总结]]></title>
      <url>/2019/09/07/Markdown%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h2 id="一、标题的设置"><a href="#一、标题的设置" class="headerlink" title="一、标题的设置"></a>一、标题的设置</h2><p>标题使用若干个#来表示，有多少#就表示几级标题，#越多级别越小，字体越小，如：</p>
<pre><code># title1
## title2
### title3
#### title4
##### title5
###### title6</code></pre><a id="more"></a>

<h2 id="二、分隔符"><a href="#二、分隔符" class="headerlink" title="二、分隔符"></a>二、分隔符</h2><p>可以使用---或***或___进行分割</p>
<h2 id="三、代码块的插入"><a href="#三、代码块的插入" class="headerlink" title="三、代码块的插入"></a>三、代码块的插入</h2><p>方式一：<br>1、代码语句要与上方已写内容之间隔一行。<br>2、每行代码要与开头间隔4个空格及以上，效果如下：</p>
<pre><code>public static void main(String[] args) {}</code></pre><p>方式二：<br>使用反引号将代码块进行包裹,反引号就在Esc键的下方。效果如下：<br><code>public static void main(String[] args) {}</code></p>
<h2 id="四、文本的设置"><a href="#四、文本的设置" class="headerlink" title="四、文本的设置"></a>四、文本的设置</h2><p>1、加粗：两边使用双星号包裹待加粗字体，如：**我是加粗字体**，效果如下：<br>&emsp; <strong>我是加粗字体</strong><br>2、斜体：两边使用单星号，如：*我是斜体*, 效果如下：<br>&emsp; <em>我是斜体</em><br>3、删除文本：两边用双波浪线，如：~~我是删除文本~~<br>&emsp; <del>我是删除文本</del><br>4、引用：使用&gt;并空格来写入被引用的部分，可以每行都写一个或者只在开头写一个, 如：&gt; 我是引用部分 ，效果如下：</p>
<blockquote>
<p>我是引用部分</p>
</blockquote>
<h2 id="五、字体的设置"><a href="#五、字体的设置" class="headerlink" title="五、字体的设置"></a>五、字体的设置</h2><p>Markdown语言本身不具备设置字体的功能，但是可以使用内嵌的HTML的方法实现！</p>
<blockquote>
<p>&lt;font face=”楷体”&gt;我是楷体字&lt;/font&gt;<br>&lt;font face=”微软雅黑”&gt;我是微软雅黑&lt;/font&gt;<br>&lt;font face=”STCAIYUN”&gt;我是华文彩云&lt;/font&gt;<br>&lt;font color=#0099ff size=7 face=”宋体”&gt;color=#0099ff size=54 face=”宋体”&lt;/font&gt;<br>&lt;font color=#00ffff size=54&gt;color=#00ffff&lt;/font&gt;<br>&lt;font color=red size=54&gt;color=red&lt;/font&gt;</p>
</blockquote>
<p><font face="楷体">我是楷体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#0099ff" size="7" face="宋体">color=#0099ff size=54 face=”宋体”</font><br><font color="#00ffff" size="54">color=#00ffff&lt;/font&gt;<br><font color="red" size="54">color=red</font></font></p>
<h2 id="六、打印空格符"><a href="#六、打印空格符" class="headerlink" title="六、打印空格符"></a>六、打印空格符</h2><p>1、 单空格：&amp;ensp;或&amp;#8194;<br>2、 双空格：&amp;emsp;或&amp;#8195;<br>3、 不断行的空格：&amp;nbsp;或&amp;#160;（注意要加上分号）</p>
<h2 id="七、表格的创建"><a href="#七、表格的创建" class="headerlink" title="七、表格的创建"></a>七、表格的创建</h2><p>在Markdown中，可以使用以下格式创建表格：</p>
<pre><code>姓名     | 学号     | 班级     | 成绩
---------|----------|---------|------    
张三     | 9527     |  三      |  96
李四     | 9528     |  三      |  92
王五     | 9529     |  四      |  87</code></pre><table>
<thead>
<tr>
<th>姓名</th>
<th>学号</th>
<th>班级</th>
<th>成绩</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>9527</td>
<td>三</td>
<td>96</td>
</tr>
<tr>
<td>李四</td>
<td>9528</td>
<td>三</td>
<td>92</td>
</tr>
<tr>
<td>王五</td>
<td>9529</td>
<td>四</td>
<td>87</td>
</tr>
</tbody></table>
<h2 id="八、自定义列表"><a href="#八、自定义列表" class="headerlink" title="八、自定义列表"></a>八、自定义列表</h2><p>（1） 无序列表: 可以使用星号(*)、加号(+)或减号(-)作为列表标记，如:+ 列表标记，效果如下：</p>
<ul>
<li>列表标记</li>
</ul>
<p>（2） 有序列表: 可以使用 数字.(空格) 的方式表示，如：</p>
<ol>
<li>Markdown</li>
<li>JavaScript</li>
<li>HTML</li>
</ol>
<p>（3） 列表的嵌套使用：（举例以及效果图）</p>
<pre><code>1. Markdown：
    - Markdown 简介
    - Markdown 语法
2. HTML：
    - HTML 基础</code></pre><ol>
<li>Markdown：<ul>
<li>Markdown 简介  </li>
<li>Markdown 语法</li>
</ul>
</li>
<li>HTML：<ul>
<li>HTML 基础</li>
</ul>
</li>
</ol>
<p>（效果图中HTML的编号居然是4，应该是把前两行也算进去了，这个bug还有待解决！）</p>
<hr>
]]></content>
      
        
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node of JavaSE（1）]]></title>
      <url>/2019/09/07/Node-of-JavaSE%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Day01-简介与配置"><a href="#Day01-简介与配置" class="headerlink" title="Day01__简介与配置"></a>Day01__简介与配置</h1><hr>
<p>1、java语言：面向internet、web应用首选开发语言、安全可靠、与平台无关<br>2、J2EE企业级(servlet、jsp、web应用程序开发，就业就用这)  J2SE标准版  J2ME小型版5.0后javaee, javase, javame<br>3、跨平台性原理：在操作系统上安装一个jvm(java虚拟机)即可，有jvm负责java在程序中的应用（在电脑上玩红白机游戏，需要装一个模拟红白机的机器）<br>4、Hello World：[1]创建文本文档 [2]写好后保存名为xxx.java<br>               [3]运行java：cmd下打开xxx.java存放的目录，运行：javac xxx.java [4]自动生成class文件，即是运行文件（有虚拟机就能运行）<br>若在123.java中加入</p>
<pre><code>class Demo
{
    public static void main(String[] args)
    {
          System.out.println(&quot;Hello java&quot;);
    }
}</code></pre><p>可运行命令行java Demo</p>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为hexo博客设置yilia主题(教程)]]></title>
      <url>/2019/09/03/%E4%B8%BAhexo%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AEyilia%E4%B8%BB%E9%A2%98(%E6%95%99%E7%A8%8B)/</url>
      <content type="html"><![CDATA[<p>  如今随着hexo博客的兴起，越来越多的主题随之诞生，我们可以到<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a> 上选择自己感兴趣的主题，比较经典的比如next、yilia、melody、mellow等，但是有些主题配置非常繁琐或者简单但界面一般。笔者建议选用yilia，界面、兼容性均较好。当然也可选用其他自己喜欢的主题，安装过程大同小异。</p>
<a id="more"></a>
<hr>
<h2 id="1-从github上拷贝yilia主题配置文件到本地"><a href="#1-从github上拷贝yilia主题配置文件到本地" class="headerlink" title="[1] 从github上拷贝yilia主题配置文件到本地"></a>[1] 从github上拷贝yilia主题配置文件到本地</h2><p>  在cmd窗口进入myblog文件夹下面，使用命令：</p>
<pre><code>$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></pre><hr>
<h2 id="2-配置myblog下的-config-yml文件"><a href="#2-配置myblog下的-config-yml文件" class="headerlink" title="[2] 配置myblog下的_config.yml文件"></a>[2] 配置myblog下的_config.yml文件</h2><p>  下拉到theme:行，后边填写 yilia（注意空格）<br>  为确保所有组件正常运行，在_config.yml文件的最后添加如下字段：</p>
<blockquote>
<p>jsonContent:<br>meta: false<br>pages: false<br>posts:<br>title: true<br>date: true<br>path: true<br>text: false<br>raw: false<br>content: false<br>slug: false<br>updated: false<br>comments: false<br>link: false<br>permalink: false<br>excerpt: false<br>categories: false<br>tags: true<br>然后就可以运行了~~</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> yilia </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows下搭建hexo+Github个人博客（教程）]]></title>
      <url>/2019/08/27/Windows%E4%B8%8B%E6%90%AD%E5%BB%BAhexo-Github%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%95%99%E7%A8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="第一章：准备阶段"><a href="#第一章：准备阶段" class="headerlink" title="第一章：准备阶段"></a>第一章：准备阶段</h1><hr>
<h2 id="1-注册Github账号-已有账号则忽略这一步"><a href="#1-注册Github账号-已有账号则忽略这一步" class="headerlink" title="[1] 注册Github账号(已有账号则忽略这一步)"></a>[1] 注册Github账号(已有账号则忽略这一步)</h2><p>网址：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a><br>（注册好后记住自己的账号和邮箱）</p>
<hr>
<h2 id="2-下载Git工具"><a href="#2-下载Git工具" class="headerlink" title="[2] 下载Git工具"></a>[2] 下载Git工具</h2><p> Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目，它可以将服务器端的数据库克隆到单机上<br>   网址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a><br>   进入后点击红框位置即可下载<br>（注：直接下载可能速度较慢，通过右键红框位置复制地址到迅雷下载可高速完成下载）</p>
<a id="more"></a>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/1.png" title="git">

<p>   安装过程较简单，一路点击next即可，安装路径随意<br>   安装好后，若可以通过git version指令来查看版本信息，说明已经成功安装</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/2.png" title="git2">
<p>   接着配置SSH公钥：打开git-bash，输入：</p>
<blockquote>
<p>$ git config –global user.name “your_name”<br>$ git config –global user.email “<a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a>“</p>
</blockquote>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/2_1.png" title="git3">
<hr>
<h2 id="3-下载node-js运行环境"><a href="#3-下载node-js运行环境" class="headerlink" title="[3] 下载node.js运行环境"></a>[3] 下载node.js运行环境</h2><p>   node.js是一款基于Chrome V8引擎的JavaScript运行环境，使得JavaScript也能在web服务器端运行<br>   下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/3.png" title="node">
<p>   点击红框位置进行下载，也是一路点击next即可，路径自选<br>   下载好后，进入cmd，键入node -v以及npm -v,查看node和npm的版本信息，版本信息正常显示，则表明安装成功</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/4.png" title="node2">
<p>   其中npm是node.js提供的JavaScript的包管理工具，类似于python里面的pip，用它可以安装各种包，如jquery、bootstrap、underscore等，但是npm是从国外的服务器上下载各种包的，因此速度较慢，于是我国的淘宝团队研发了cnmp，是一个完整的npmjs.org镜像，与npm基本保持同步，拥有除public以外的各种命令，重点是下载速度提升显著<br>   安装方法：输入指令npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> 如下图所示</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/5.png" title="node3">
<p>   cmd中输入cnpm -v查看本本信息</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/6.png" title="node4">
<hr>
<h2 id="4-下载Subline编辑器"><a href="#4-下载Subline编辑器" class="headerlink" title="[4] 下载Subline编辑器"></a>[4] 下载Subline编辑器</h2><p>   若使用常规的记事本等编辑器写博客，容易遇到中文无法显示，乱码等问题，原因是没有使用utf-8编码。推荐使用Subline进行文本编辑（也可使用VScode，atom等），该编辑器支持utf-8编码<br>   Subline下载地址：<a href="http://www.sublimetext.com/3" target="_blank" rel="noopener">http://www.sublimetext.com/3</a></p>
<hr>
<h1 id="第二章：搭建本地hexo个人博客"><a href="#第二章：搭建本地hexo个人博客" class="headerlink" title="第二章：搭建本地hexo个人博客"></a>第二章：搭建本地hexo个人博客</h1><hr>
<h2 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="[1] 安装hexo"></a>[1] 安装hexo</h2><p>   输入命令：cnpm install -g hexo-cli</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/7.png" title="hexo">
<p>   同理，安装好后键入hexo -v检验版本信息以确保安装至PC</p>
<hr>
<h2 id="2-创建博客目录"><a href="#2-创建博客目录" class="headerlink" title="[2] 创建博客目录"></a>[2] 创建博客目录</h2><p>   在命令行中切换到某一路径下创建博客存放目录，输入指令：mkdir myblog (文件夹名可自取)<br>   接着cd myblog进入到文件夹中</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/8.png" title="hexo2">
<hr>
<h2 id="3-初始化hexo"><a href="#3-初始化hexo" class="headerlink" title="[3] 初始化hexo"></a>[3] 初始化hexo</h2><p>   输入命令：hexo init，若底端显示start blogging with hexo！字样则初始化成功</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/9.png" title="hexo3">
<hr>
<h2 id="4-查看搭建效果"><a href="#4-查看搭建效果" class="headerlink" title="[4] 查看搭建效果"></a>[4] 查看搭建效果</h2><p>   我们打开myblog文件夹，就可以看到hexo搭建的初始目录</p>
<blockquote>
<p><em>node_modules: 依赖包<br>   public：存放生成的页面<br>   scaffolds：生成文章的一些模板<br>   source：用来存放你的文章<br>   themes：主题<br>   _config.yml: 博客的配置文件</em></p>
</blockquote>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/10.png" title="hexo3">
<p>   cmd上输入hexo s，之后在浏览器中输入网址：localhost:4000则可看见初始化的界面</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/11.png" title="hexo4">
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/12.png" title="hexo5">

<hr>
<h1 id="第三章：将本地hexo博客布署到github上"><a href="#第三章：将本地hexo博客布署到github上" class="headerlink" title="第三章：将本地hexo博客布署到github上"></a>第三章：将本地hexo博客布署到github上</h1><hr>
<h2 id="完成了上一步后我们只能在本地查看个人博客，一旦换一台电脑则无法看见，并且每次都要通过键入hexo-s来启动稍显麻烦，因此我们需要将其布署到远端公开"><a href="#完成了上一步后我们只能在本地查看个人博客，一旦换一台电脑则无法看见，并且每次都要通过键入hexo-s来启动稍显麻烦，因此我们需要将其布署到远端公开" class="headerlink" title="   完成了上一步后我们只能在本地查看个人博客，一旦换一台电脑则无法看见，并且每次都要通过键入hexo s来启动稍显麻烦，因此我们需要将其布署到远端公开"></a>   完成了上一步后我们只能在本地查看个人博客，一旦换一台电脑则无法看见，并且每次都要通过键入hexo s来启动稍显麻烦，因此我们需要将其布署到远端公开</h2><h2 id="1-在Github上创建一个仓库"><a href="#1-在Github上创建一个仓库" class="headerlink" title="[1] 在Github上创建一个仓库"></a>[1] 在Github上创建一个仓库</h2><p>   进入Github官网：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a> 登录后在左侧的Respositories处点击new新建仓库，仓库名一定是：账户名.github.io,否则无效！然后点击创建按钮即可</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/13.png" title="github">

<hr>
<h2 id="2-安装deployer插件"><a href="#2-安装deployer插件" class="headerlink" title="[2] 安装deployer插件"></a>[2] 安装deployer插件</h2><p>   输入命令：cnpm install –save hexo-deployer-git,若出现如下结果则表示安装成功</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/14.png" title="github2">

<hr>
<h2 id="3-配置-config-yml文件"><a href="#3-配置-config-yml文件" class="headerlink" title="[3] 配置_config.yml文件"></a>[3] 配置_config.yml文件</h2><p>   右键_config.yml文件，使用Subline打开进行编写，在文件的最底部做如下修改：<br>   <em>deploy:<br>   type: git<br>   repo: <a href="https://github.com/luliang99/luliang99.github.io.git" target="_blank" rel="noopener">https://github.com/luliang99/luliang99.github.io.git</a><br>   branch: master</em><br>   其中，repo后面填写的即是我们的仓库地址，可进入github中名为[用户名.github.io]仓库中找到<br>   修改好后，ctrl+s保存</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/15.png" title="config">

<hr>
<h2 id="4-布署到远端"><a href="#4-布署到远端" class="headerlink" title="[4] 布署到远端"></a>[4] 布署到远端</h2><p>   前面都做好后，这一步就比较简单，在命令行处输入hexo d，可将本地博客推至远端，若出现Deployer Done字样，表示部署完成</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/16.png" title="github3">

<hr>
<h2 id="5-检验部署效果"><a href="#5-检验部署效果" class="headerlink" title="[5] 检验部署效果"></a>[5] 检验部署效果</h2><p>   输入域名地址：用户名.github.io，即可进入个人博客：当显示与localhost:4000上的页面一致时，表明部署成功！</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/17.png" title="github4">










]]></content>
      
        
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
