<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[报错：org.thymeleaf.exceptions.TemplateInputException: Error resolving template xxx]]></title>
      <url>/2020/05/24/%E6%8A%A5%E9%94%99%EF%BC%9Aorg-thymeleaf-exceptions-TemplateInputException-Error-resolving-template-xxx/</url>
      <content type="html"><![CDATA[<ul>
<li>问题：今天使用SpringBoot做秒杀系统的时候，出现org.thymeleaf.exceptions.TemplateInputException: Error resolving template的错误。</li>
</ul>
<a id="more"></a>

<ul>
<li><p>分析：debug两小时，才发现是自己粗心把SeckillApiController里面的注释@RestController误写成@Repository。导致controller无法返回 JSON 对象，这种情况下返回的数据thymeleaf模板无法解析，直接报错。</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">//此处误写为@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">seckillApiController</span> <span class="keyword">extends</span> <span class="title">BaseApiController</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> ISeckillService seckillService;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"seckill/&#123;courseNo&#125;"</span>,method=RequestMethod.GET)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result&lt;Orders&gt; <span class="title">seckill</span><span class="params">(User user, @PathVariable String courseNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(user == <span class="keyword">null</span> ) &#123;</span><br><span class="line">			<span class="keyword">return</span> Result.failure();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> seckillService.seckillFlow(user, courseNo);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决方法：改为@RestController 或者 加上@Controller的同时，在相应方法上加上@ResponseBody。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> debug </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Thymeleaf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS下使用yum安装失败，提示Cannot retrieve metalink for repository: epel/x86_64]]></title>
      <url>/2020/05/19/CentOS%E4%B8%8B%E4%BD%BF%E7%94%A8yum%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%EF%BC%8C%E6%8F%90%E7%A4%BACannot-retrieve-metalink-for-repository-epel-x86-64/</url>
      <content type="html"><![CDATA[<ul>
<li>今天在centos7服务器上用yum安装nginx的时候发现，yum命令不能用了，使用yum install nginx命令出现如下错误提示：</li>
</ul>
<a id="more"></a>

<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot retrieve metalink for repository: epel/x86_64. Please verify its path and try again</span><br></pre></td></tr></table></figure>

<ul>
<li>完整提示如下：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">One of the configured repositories failed (Unknown),</span><br><span class="line"> and yum doesn't have enough cached data to continue. At this point the only</span><br><span class="line"> safe thing yum can do is fail. There are a few ways to work "fix" this:</span><br><span class="line"></span><br><span class="line">     1. Contact the upstream for the repository and get them to fix the problem.</span><br><span class="line"></span><br><span class="line">     2. Reconfigure the baseurl/etc. for the repository, to point to a working</span><br><span class="line">        upstream. This is most often useful if you are using a newer</span><br><span class="line">        distribution release than is supported by the repository (and the</span><br><span class="line">        packages for the previous distribution release still work).</span><br><span class="line"></span><br><span class="line">     3. Disable the repository, so yum won't use it by default. Yum will then</span><br><span class="line">        just ignore the repository until you permanently enable it again or use</span><br><span class="line">        --enablerepo for temporary usage:</span><br><span class="line"></span><br><span class="line">            yum-config-manager --disable &lt;repoid&gt;</span><br><span class="line"></span><br><span class="line">     4. Configure the failing repository to be skipped, if it is unavailable.</span><br><span class="line">        Note that yum will try to contact the repo. when it runs most commands,</span><br><span class="line">        so will have to try and fail each time (and thus. yum will be be much</span><br><span class="line">        slower). If it is a very temporary problem though, this is often a nice</span><br><span class="line">        compromise:</span><br><span class="line"></span><br><span class="line">            yum-config-manager --save --setopt=&lt;repoid&gt;.skip_if_unavailable=true</span><br><span class="line"></span><br><span class="line">Cannot retrieve metalink for repository: epel/x86_64. Please verify its path and try again</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解决思路：首先以为是网络问题，按照网上的思路进行了网络测试、配置，发现均没问题：</p>
<ol>
<li>我的服务器 ping 正常的，无论是ping镜像还是ping其它网站都可以ping通。</li>
<li>/etc/resolv.conf 里面的 nameserver 114.114.114.114 也是有的，dns也没问题。</li>
</ol>
</li>
<li><p>解决方法：问题根本的原因是“/etc/yum.repos.d/epel.repo”里面的镜像源路径不对。</p>
<ul>
<li>首先，打开<strong>/etc/yum.repos.d/epel.repo</strong>文件。</li>
<li>然后，将里面的所有metalink注释掉，然后把所有的baseurl打开。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[epel]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - $basearch</span><br><span class="line">baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch</span><br><span class="line">#metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line"></span><br><span class="line">[epel-debuginfo]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - $basearch - Debug</span><br><span class="line">baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch/debug</span><br><span class="line">#metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-7&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck=1</span><br><span class="line"></span><br><span class="line">[epel-source]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - $basearch - Source</span><br><span class="line">baseurl=http://download.fedoraproject.org/pub/epel/7/SRPMS</span><br><span class="line">#metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-source-7&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure>

<ul>
<li>最后，更新缓存，并更新yum，执行安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum update</span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果图：（安装成功）</p>
</li>
</ul>
<img src="/2020/05/19/CentOS下使用yum安装失败，提示Cannot-retrieve-metalink-for-repository-epel-x86-64/1.png" title="yum">



]]></content>
      
        
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> yum </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用SpringBoot+Junit+Mock进行json数据传输时候遇到的问题]]></title>
      <url>/2020/05/01/%E4%BD%BF%E7%94%A8SpringBoot-Junit-Mock%E8%BF%9B%E8%A1%8Cjson%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%97%B6%E5%80%99%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="1-initializationError-runner-Junit4"><a href="#1-initializationError-runner-Junit4" class="headerlink" title="[1]  initializationError [runner:Junit4]"></a>[1]  initializationError [runner:Junit4]</h3><a id="more"></a>

<ul>
<li>试了好久，发现并不是@Test注释的方法修饰符非public、类名修饰符非public、带参数等等问题。</li>
<li>解决：而是我@Test包导错了，我导的是import org.junit.jupiter.api.Test; 实际需要的是 import org.junit.Test;前者是junit5需要的，后者是junit4需要的，我用的是junit4。</li>
</ul>
<h3 id="2-java-lang-AssertionError-Content-type-expected…"><a href="#2-java-lang-AssertionError-Content-type-expected…" class="headerlink" title="[2]  java.lang.AssertionError: Content type expected…"></a>[2]  java.lang.AssertionError: Content type expected…</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面代码中出现以上错误</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    MvcResult result = mockMvc.perform(post(<span class="string">"/api/login"</span>).param(<span class="string">"username"</span>, <span class="string">"123"</span>).param(<span class="string">"password"</span>, <span class="string">"123456"</span>)</span><br><span class="line">        .contentType(MediaType.APPLICATION_JSON))</span><br><span class="line">        .andExpect(status().isOk())</span><br><span class="line">        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">        .andReturn();</span><br><span class="line">    System.out.println(result.getResponse().getContentAsString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>原因是使用了 MediaType.APPLICATION_JSON_UTF8 的传输类型，这种写法已经被废弃，将”_UTF8”删除即可不报错，但是输出的信息乱码。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> debug </tag>
            
            <tag> Mock </tag>
            
            <tag> Junit </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot秒课系统-1]]></title>
      <url>/2020/04/30/SpringBoot%E7%A7%92%E8%AF%BE%E7%B3%BB%E7%BB%9F-1/</url>
      <content type="html"><![CDATA[<h1 id="一、整体设计思路"><a href="#一、整体设计思路" class="headerlink" title="一、整体设计思路"></a>一、整体设计思路</h1><a id="more"></a>

<h2 id="I-MILK项目整体开发概述"><a href="#I-MILK项目整体开发概述" class="headerlink" title="I. MILK项目整体开发概述"></a>I. MILK项目整体开发概述</h2><h3 id="1-课程收获："><a href="#1-课程收获：" class="headerlink" title="[1]  课程收获："></a>[1]  课程收获：</h3><img src="/2020/04/30/SpringBoot秒课系统-1/1.png" title="1-1">

<h3 id="2-MILK（秒课系统）实战："><a href="#2-MILK（秒课系统）实战：" class="headerlink" title="[2]  MILK（秒课系统）实战："></a>[2]  MILK（秒课系统）实战：</h3><ul>
<li>解决实际问题：大学选课，可能高并发，选课人多，半天进不去，好不容易进去了，可能课程名额已经没了。</li>
<li>本系统就是为了<strong>支持高并发选课</strong>而设计的一个项目。<ul>
<li>功能：登录注册功能、课程列表功能、核心：课程详情（包括<strong>倒计时和秒杀</strong>的功能）、订单（购买是否成功）。</li>
</ul>
</li>
</ul>
<h3 id="3-提供两种解决方案："><a href="#3-提供两种解决方案：" class="headerlink" title="[3]  提供两种解决方案："></a>[3]  提供两种解决方案：</h3><ul>
<li>前后端分离解决方案：<ul>
<li>主要技术栈：Spring Boot2.0 + Vuejs2.0。</li>
</ul>
</li>
</ul>
<img src="/2020/04/30/SpringBoot秒课系统-1/3.png" title="3-1">

<ul>
<li>高并发场景解决方案：<ul>
<li>主要技术栈：缓存redis + 异步处理kafka + 限流削峰。</li>
<li>分析：在互联网的大流量项目中，这些流量会落到一个点上，我们就要设计一种方案分解压力，避免它的层层传递。</li>
<li>解决方案：<ul>
<li>前后端解耦：将请求拦截在上游，减少下游的一个压力。因为高并发请求量是极大的，但真正秒杀成功的是极少的，因此若不在前端进行解耦，可能造成数据库压力过大，导致读写冲突，死锁等，造成服务跟不上请求的情况。</li>
<li>业务层：解决两个问题，尽可能在业务层解决大部分问题，不让流量流到数据层。采用缓存读写和同步异步化解决这个问题。</li>
<li>横向扩展：Nginx负载，Redis\kafka集群等。</li>
</ul>
</li>
</ul>
</li>
</ul>
<img src="/2020/04/30/SpringBoot秒课系统-1/4.png" title="4-1">

<img src="/2020/04/30/SpringBoot秒课系统-1/5.png" title="5-1">



<h2 id="II-项目整体规划"><a href="#II-项目整体规划" class="headerlink" title="II. 项目整体规划"></a>II. 项目整体规划</h2><ul>
<li>本项目开发整体分成：后端开发（Spring Boot）<strong>、</strong>前端开发（VueJS）<strong>、</strong>核心功能开发（SpringBoot+Vuejs）<strong>、</strong>高并发优化（Redis+Kafka）四个阶段。</li>
</ul>
<h3 id="1-后端开发："><a href="#1-后端开发：" class="headerlink" title="[1]  后端开发："></a>[1]  后端开发：</h3><ul>
<li>登录场景：<ol>
<li>SpringBoot的数据操作、事务管理、控制器、模板引擎。</li>
<li>登录安全策略：数字图形验证码、两次MDS加密等。</li>
<li>使用Redis优化登录功能。</li>
<li>实现分布式session的登录方案，为前后端分离做准备。</li>
</ol>
</li>
</ul>
<h3 id="2-前端开发："><a href="#2-前端开发：" class="headerlink" title="[2]  前端开发："></a>[2]  前端开发：</h3><ul>
<li>登陆场景：<ol>
<li>前端开发分析：界面构成、跳转关系、组件划分以及文件结构。</li>
<li>开发历程：vue-router的路由控制、element-UI的组件库、axios的网络通信以及Vuex的数据状态管理。</li>
<li>前后端对接：打包以及部署。</li>
<li>前后端分离的跨域登录状态保持解决方案。</li>
</ol>
</li>
</ul>
<h3 id="3-核心功能："><a href="#3-核心功能：" class="headerlink" title="[3]  核心功能："></a>[3]  核心功能：</h3><ul>
<li>课程列表、课程详情，秒课功能、订单列表。</li>
</ul>
<h3 id="4-高并发优化："><a href="#4-高并发优化：" class="headerlink" title="[4]  高并发优化："></a>[4]  高并发优化：</h3><img src="/2020/04/30/SpringBoot秒课系统-1/2.png" title="2-1">



<h1 id="二、环境搭建（详见手册）"><a href="#二、环境搭建（详见手册）" class="headerlink" title="二、环境搭建（详见手册）"></a>二、环境搭建（详见手册）</h1><ul>
<li>开发环境安装（win10）<ul>
<li>Spring Tool Suite（sts） + Atom</li>
</ul>
</li>
<li>服务器环境安装（CentOS）<ul>
<li>Nginx、MySQL、Redis、Tomcat、Kafka、Zookeeper</li>
</ul>
</li>
</ul>
<h1 id="三、使用SpringBoot实现注册功能"><a href="#三、使用SpringBoot实现注册功能" class="headerlink" title="三、使用SpringBoot实现注册功能"></a>三、使用SpringBoot实现注册功能</h1><img src="/2020/04/30/SpringBoot秒课系统-1/6.png" title="6-1">

<h2 id="I-SpringBoot项目构建"><a href="#I-SpringBoot项目构建" class="headerlink" title="I. SpringBoot项目构建"></a>I. SpringBoot项目构建</h2><h3 id="1-快速构建："><a href="#1-快速构建：" class="headerlink" title="[1]  快速构建："></a>[1]  快速构建：</h3><ul>
<li>我们通过 <a href="http://start.spring.io/来在线生成项目。" target="_blank" rel="noopener">http://start.spring.io/来在线生成项目。</a></li>
<li>然后在sts中使用maven进行导入在线生成的项目。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编写SimpleController.java</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动时报错：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line">Failed to configure a DataSource: &apos;url&apos; attribute is not specified and no embedded datasource could be configured.</span><br><span class="line">Reason: Failed to determine a suitable driver class</span><br><span class="line">Action:</span><br><span class="line">Consider the following:</span><br><span class="line">	If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.</span><br><span class="line">	If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).</span><br></pre></td></tr></table></figure>

<ul>
<li>错误原因：依赖中有JPA（java持久层api），还没有导入数据库所致。</li>
<li>解决：将jpa依赖包注释掉：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">			&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">		&lt;/dependency&gt;  --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-SpringBoot为我们做了什么？"><a href="#2-SpringBoot为我们做了什么？" class="headerlink" title="[2]  SpringBoot为我们做了什么？"></a>[2]  SpringBoot为我们做了什么？</h3><h4 id="1-嵌入式服务器："><a href="#1-嵌入式服务器：" class="headerlink" title="1.  嵌入式服务器："></a>1.  嵌入式服务器：</h4><ul>
<li>以前，我们启动一个web应用，需要：<ul>
<li>安装java。</li>
<li>安装Web或者是应用程序的服务器（比如：Tomcat）。</li>
<li>部署应用程序war包。</li>
</ul>
</li>
<li>其中：<strong>嵌入式服务器</strong>就是我们可执行单元包含服务器的二进制文件（tomcat.jar)。</li>
<li>而对于SpringBoot来说：<ul>
<li>你可以生成一个包含Embedded Tomcat的应用程序jar包。</li>
<li>然后就可以像正常Java程序一样运行web程序了。</li>
</ul>
</li>
</ul>
<h4 id="2-自动配置："><a href="#2-自动配置：" class="headerlink" title="2.  自动配置："></a>2.  自动配置：</h4><ul>
<li>以前的做法：<ul>
<li>容器启动的时候，读取Beans. xml配置文件，把它存储到ioc容器（可以理解成大的硬盘）里面。</li>
<li>我们会把容器中的具象的东西调给context管理，context管理对象之间的关系。</li>
<li>想用对象的时候，直接到容器，或者上下文中去拿。拿来直接用。</li>
</ul>
</li>
</ul>
<img src="/2020/04/30/SpringBoot秒课系统-1/7.png" title="7-1">

<ul>
<li>而SpringBoot一行这样的代码都没有写过，因此Springboot帮了程序员做了工作。</li>
</ul>
<h4 id="3-自动配置的实现原理："><a href="#3-自动配置的实现原理：" class="headerlink" title="3.  自动配置的实现原理："></a>3.  自动配置的实现原理：</h4><ul>
<li>引人注目：<ul>
<li>导入一系列的自动配置类，实现强大的自动配置功能。</li>
</ul>
</li>
<li>步骤：<ul>
<li>第一步：SpringBoot在启动的时候扫描所依赖的Jar包，寻找包含<strong>spring.factories</strong>文件的jar；</li>
<li>第二步：spring.factories配置加载<strong>AutoConfigure</strong>类；</li>
<li>第三步：根据<strong>@Condition</strong>注解的条件，进行自动配置，并<strong>将Bean注入SpringContext</strong>。</li>
</ul>
</li>
</ul>
<h4 id="4-HelloWorld项目解读："><a href="#4-HelloWorld项目解读：" class="headerlink" title="4.  HelloWorld项目解读："></a>4.  HelloWorld项目解读：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckilApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(SeckilApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>点进去run方法查看源代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建了ApplicationContext，也就是上下文，容器创建好了，就可以直接拿来用了。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigurationApplication <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    context = createApplicationContext();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>关于：@SpringBootApplication</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span> <span class="comment">//实现springboot那几个步骤</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line">		<span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-项目结构分层："><a href="#3-项目结构分层：" class="headerlink" title="[3]  项目结构分层："></a>[3]  项目结构分层：</h3><ol>
<li>界面层：<ul>
<li>接受用户请求，把信息返还给用户。</li>
</ul>
</li>
<li>业务访问层：操作数据。</li>
<li>数据访问层：对数据库进行操作，而不是数据。对数据表进行增删改查。</li>
</ol>
<img src="/2020/04/30/SpringBoot秒课系统-1/8.png" title="8-1">

<h2 id="II-使用JPA数据操作"><a href="#II-使用JPA数据操作" class="headerlink" title="II. 使用JPA数据操作"></a>II. 使用JPA数据操作</h2><h3 id="1-极限编程：编写Junit测试代码："><a href="#1-极限编程：编写Junit测试代码：" class="headerlink" title="[1]  极限编程：编写Junit测试代码："></a>[1]  极限编程：编写Junit测试代码：</h3><h4 id="1-创建测试类："><a href="#1-创建测试类：" class="headerlink" title="1.  创建测试类："></a>1.  创建测试类：</h4><ul>
<li><p>简介：<strong>Junit是一个Java编程语言的单元测试框架</strong>。</p>
</li>
<li><p>过程：构思 –&gt; 编写测试代码 –&gt; 编写代码 –&gt; 测试。</p>
</li>
<li><p>建议：编写测试和编写代码都是增量式的，写一点侧一点。</p>
</li>
<li><p>好处：可以较快的追踪到问题的原因，减小回归错误的纠错难度。</p>
</li>
<li><p>实际使用：</p>
<ul>
<li><p>在 /seckil/src/test/java 下创建测试类Junit Test Case：</p>
<ul>
<li>如UserService.java类似：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		fail(<span class="string">"Not yet implemented"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意运行时若出错：【no tests found with test runner “Junit5”】</p>
<ul>
<li>首先确定juint版本和包引入的juint版本一致，右键测试，run as — run configurations ,把runner版本换成juint4</li>
</ul>
</li>
<li><p>若再次出现：initializationError(org.junit.runner…，可以把创建的测试类删掉，新建一个，注意选择junit 4版本的。</p>
</li>
</ul>
</li>
</ul>
<h4 id="2-编写User类："><a href="#2-编写User类：" class="headerlink" title="2.  编写User类："></a>2.  编写User类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dayup.seckil.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span> <span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span> <span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> String username;</span><br><span class="line">	<span class="keyword">public</span> String password;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-进行简单的测试："><a href="#3-进行简单的测试：" class="headerlink" title="3.  进行简单的测试："></a>3.  进行简单的测试：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		User user = <span class="keyword">new</span> User(<span class="string">"alex"</span>, <span class="string">"0000"</span>);</span><br><span class="line">		Assert.assertNotNull(user);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>若run as 1 Junit 后，显示条是绿色，表示测试通过，否则报错。</li>
</ul>
<h3 id="2-模型设计："><a href="#2-模型设计：" class="headerlink" title="[2]  模型设计："></a>[2]  模型设计：</h3><h4 id="1-配置MySQL-和-JPA："><a href="#1-配置MySQL-和-JPA：" class="headerlink" title="1.  配置MySQL 和 JPA："></a>1.  配置MySQL 和 JPA：</h4><ul>
<li>在application.properties中配置如下信息, 并将注释掉的jpa包打开：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">########################################################</span><br><span class="line">spring.datasource.url =</span><br><span class="line">jdbc:mysql://192.168.3.20:3306/seckill?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = 123456</span><br><span class="line">spring.datasource.driverClassName = com.mysql.jdbc.Driver</span><br><span class="line">#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.initial-size= 1</span><br><span class="line">spring.datasource.min-idle= 3</span><br><span class="line">spring.datasource.max-idle= 20</span><br><span class="line">spring.datasource.max-active= 20</span><br><span class="line">spring.datasource.time-between-eviction-runs-millis: 60000</span><br><span class="line">spring.datasource.min-evictable-idle-time-millis: 30000</span><br><span class="line">spring.datasource.validation-query: select 1</span><br><span class="line">spring.datasource.test-while-idle: true</span><br><span class="line">spring.datasource.test-on-borrow: false</span><br><span class="line">spring.datasource.test-on-return: false</span><br><span class="line">########################################################</span><br><span class="line">###jpa</span><br><span class="line">########################################################</span><br><span class="line">spring.jpa.database= MYSQL</span><br><span class="line">spring.jpa.show-sql= true</span><br><span class="line">spring.jpa.hibernate.ddl-auto= update</span><br><span class="line">spring.jpa.open-in-view= true</span><br><span class="line">spring.jpa.properties.hibernate.enable_lazy_load_no_trans= true</span><br></pre></td></tr></table></figure>

<h4 id="2-模型设计-User对象："><a href="#2-模型设计-User对象：" class="headerlink" title="2.  模型设计-User对象："></a>2.  模型设计-User对象：</h4><ul>
<li>Java Persistence API定义了一种定义，可以<strong>将常规的普通Java对象（有时被称作POJO）映射到数据库</strong>。<br>这些普通Java对象被称作<strong>Entity Bean</strong>。</li>
<li>除了是用Java Persistence元数据将其映射到数据库外，Entity Bean与其他Java类没有任何区别。</li>
<li>事实上，创建一个Entity Bean对象相当于新建一条记录，删除一个Entity Bean会同时从数据库中删除对应记录，<strong>修改一个Entity Bean时，容器会自动将Entity Bean的状态和数据库同步</strong>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"user"</span>) <span class="comment">//绑定名为user的表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span> <span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span> <span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="meta">@Column</span>(name=<span class="string">"username"</span>)</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Column</span>(name=<span class="string">"password"</span>, nullable=<span class="keyword">false</span>)</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Column</span>(name=<span class="string">"id"</span>, nullable=<span class="keyword">false</span>)</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-使用Spring-Data-JPA："><a href="#3-使用Spring-Data-JPA：" class="headerlink" title="[3]  使用Spring Data JPA："></a>[3]  使用Spring Data JPA：</h3><h4 id="1-编写-JPA-UserRespository："><a href="#1-编写-JPA-UserRespository：" class="headerlink" title="1.  编写 JPA- UserRespository："></a>1.  编写 JPA- UserRespository：</h4><ul>
<li><p>JPA实现持久化：</p>
<ul>
<li>UserRepository 继承 JpaRepository。</li>
<li>增删改查。</li>
<li>自定义声明方法规则：接口中使用关键字findBy、getBy，并且可以拼接SQL关键字。</li>
</ul>
<img src="/2020/04/30/SpringBoot秒课系统-1/10.png" title="10-1">
</li>
<li><p>具体代码：</p>
<ul>
<li>Repository层:下边代码没有一个方法，但是就可以进行数据库的增删改查了。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span> <span class="comment">// 让spring创建一个实例，需要调用该类的实例时，就可以直接调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRespository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">	<span class="comment">//接口继承了JpaRespository，类型是 表名对应的类 + 主键对应的属性的类 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">findUsernameAndPassword</span><span class="params">(String username,String Password)</span></span>;</span><br><span class="line">   <span class="comment">/* 相当于：</span></span><br><span class="line"><span class="comment">    select * from user where username=username and Password=Password;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-编写Service-UserService："><a href="#2-编写Service-UserService：" class="headerlink" title="2.  编写Service-UserService："></a>2.  编写Service-UserService：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">// 声明式事务管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span> <span class="comment">// 从Spring容器中提取</span></span><br><span class="line">	<span class="keyword">public</span> UserRepository userRepository;	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">regist</span><span class="params">(User user)</span> </span>&#123;		</span><br><span class="line">		<span class="keyword">return</span> userRepository.saveAndFlush(user); <span class="comment">// 注册（添加）user</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-JUnit测试验证："><a href="#3-JUnit测试验证：" class="headerlink" title="3.  JUnit测试验证："></a>3.  JUnit测试验证：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> UserService userService;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		User user = <span class="keyword">new</span> User(<span class="string">"fadsfa"</span>, <span class="string">"0afsd40"</span>);</span><br><span class="line">		Assert.assertNotNull(userService.regist(user));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="III-控制层-amp-视图设计"><a href="#III-控制层-amp-视图设计" class="headerlink" title="III. 控制层&amp;视图设计"></a>III. 控制层&amp;视图设计</h2><h3 id="1-控制层编码："><a href="#1-控制层编码：" class="headerlink" title="[1]  控制层编码："></a>[1]  控制层编码：</h3><ul>
<li>get: /reg ：跳转到注册页面、参数username、password。</li>
<li>post: /register：保存提交的用户名和密码。</li>
</ul>
<img src="/2020/04/30/SpringBoot秒课系统-1/11.png" title="11-1">

<ul>
<li>使用ModelAndView类用来存储处理完后的结果数据，以及显示该数据的视图。从名字上看ModelAndView中的Model代表模型，View代表视图，这个名字就很好地解释了该类的作用。业务处理器调用模型层处理完用户请求后，把结果数据存储在该类的model属性中，把要返回的视图信息存储在该类的view属性中，然后让该ModelAndView返回该Spring MVC框架。框架通过调用配置文件中定义的视图解析器，对该对象进行解析，最后把结果数据显示在指定的页面上。 </li>
<li>作用：<ul>
<li>1、返回指定页面<ul>
<li><strong>ModelAndView构造方法可以指定返回的页面名称，</strong></li>
<li>*<em>也可以通过setViewName()方法跳转到指定的页面 *</em></li>
</ul>
</li>
<li>2、返回所需数值<ul>
<li>使用addObject()设置需要返回的值，addObject()有几个不同参数的方法，可以默认和指定返回对象的名字。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取日志对象</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(RegisterController.class);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 提取ioc容器中的userService对象</span></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 准备注册</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/reg"</span>, method=RequestMethod.GET)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">toRegister</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 创建一个用户类用于注册</span></span><br><span class="line">		User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">// 将带有空user对象的register.html返回给用户，给用户填</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"register"</span>).addObject(user);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 提交后进行注册，真正将传过来的对象进行保存</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/register"</span>, method=RequestMethod.POST)</span><br><span class="line">    <span class="comment">// 获取到从raegist.html页面传来的user对象，作为参数</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">Register</span><span class="params">(@ModelAttribute(value=<span class="string">"user"</span>)</span> User user) </span>&#123;</span><br><span class="line">		<span class="comment">// 日志输出参数信息</span></span><br><span class="line">		log.info(<span class="string">"username="</span> + user.getUsername() + <span class="string">";password="</span> + user.getPassword());</span><br><span class="line">		user.setId(<span class="number">2020</span>);</span><br><span class="line">        <span class="comment">// 将user对象存储到数据库</span></span><br><span class="line">		userService.regist(user);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"register"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Thymeleaf模板的使用："><a href="#2-Thymeleaf模板的使用：" class="headerlink" title="[2]  Thymeleaf模板的使用："></a>[2]  Thymeleaf模板的使用：</h3><ul>
<li>java模板引擎，能够处理HTML,  XML,  JavaScript,  CSS甚至是纯文本。类似于JSP。</li>
<li>作用就是把各个用户的公用的东西（页面）做一个提取，然后再根据不同的数据对页面进行渲染。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># thymeleaf的配置</span><br><span class="line"># 文件路径</span><br><span class="line">spring.thymeleaf.prefix= classpath:/templates/</span><br><span class="line"># 后缀名</span><br><span class="line">spring.thymeleaf.suffix= .html</span><br><span class="line">spring.thymeleaf.mode= HTML5</span><br><span class="line">spring.thymeleaf.encoding= UTF-8</span><br><span class="line">spring.thymeleaf.content-type= text/html</span><br><span class="line">spring.thymeleaf.cache= false</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了避免静态资源文件无法引入,在WebConfig.java中添加如下代码</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span> <span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX+<span class="string">"/static/"</span>);</span><br><span class="line">		<span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-Bootstrap模板美化注册页面："><a href="#3-Bootstrap模板美化注册页面：" class="headerlink" title="[3]  Bootstrap模板美化注册页面："></a>[3]  Bootstrap模板美化注册页面：</h3><ul>
<li>基于HTML、CSS、<a href="https://baike.baidu.com/item/JavaScript/321142" target="_blank" rel="noopener">JavaScript</a> 开发的简洁、直观、强悍的<a href="https://baike.baidu.com/item/%E5%89%8D%E7%AB%AF/5956545" target="_blank" rel="noopener">前端</a>开发框架，使得 Web 开发更加快捷。</li>
<li>做法：在官网下载，并在static文件夹下引入bootstrap样式：css、fonts、js。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- register.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultrag.net.nz/thymeleaf/layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入bootstrap --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/bootstrap.min.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"text-align:center;margin-top:50px;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row col-md-6 col-md-offset-3"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;title&#125;"</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"registerForm"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/register&#125;"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;user&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>username<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!-- &lt;input id="username" type="text" name="username" class="form-control"</span></span><br><span class="line"><span class="comment">placeholder="用户名"&gt; --&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;username&#125;"</span> <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">placeholder</span>=<span class="string">" 用户名 "</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;#fields.hasErrors('username')&#125;"</span> <span class="attr">th:errors</span>=<span class="string">"*&#123;username&#125;"</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">style</span>=<span class="string">"color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>password<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!-- &lt;input id="password" type="password" name="password" class="form-</span></span><br><span class="line"><span class="comment">control" placeholder="密码"&gt; --&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!-- &lt;input id="password" type="password" th:field="*&#123;password&#125;" class="form-</span></span><br><span class="line"><span class="comment">control" placeholder="密码" &gt;--&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">placeholder</span>=<span class="string">" 密码 "</span> &gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;#fields.hasErrors('password')&#125;"</span> <span class="attr">th:errors</span>=<span class="string">"*&#123;password&#125;"</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">style</span>=<span class="string">"color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>re-password<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!-- &lt;input id="repassword" type="password" name="repassword" class="form-</span></span><br><span class="line"><span class="comment">control" placeholder="确认密码"&gt; --&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"repassword"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;repassword&#125;"</span> <span class="attr">class</span>=<span class="string">"form-</span></span></span><br><span class="line"><span class="tag"><span class="string">                                                                                                       control"</span> <span class="attr">placeholder</span>=<span class="string">" 确认密码 "</span> &gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary register-btn"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="IV-数据验证"><a href="#IV-数据验证" class="headerlink" title="IV. 数据验证"></a>IV. 数据验证</h2><h3 id="1-JQuery-Validate客户端验证："><a href="#1-JQuery-Validate客户端验证：" class="headerlink" title="[1]  JQuery Validate客户端验证："></a>[1]  JQuery Validate客户端验证：</h3><h4 id="1-JQuery-Validate简介："><a href="#1-JQuery-Validate简介：" class="headerlink" title="1.  JQuery Validate简介："></a>1.  JQuery Validate简介：</h4><ul>
<li>jQuery Validate 插件为表单提供了强大的<strong>验证功能</strong>，让客户端表单验证变得更简单，同时提供了大量的定制<br>选项，满足应用程序各种需求。</li>
<li>该插件捆绑了一套有用的验证方法，包括<strong>URL 和电子邮件验证</strong>，同时提供了一个用来编写用户自定义方法的 API。所有的捆绑方法默认使用英语作为错误信息，且已翻译成其他 37 种语言。</li>
</ul>
<h4 id="2-导入包："><a href="#2-导入包：" class="headerlink" title="2.  导入包："></a>2.  导入包：</h4><ul>
<li>jquery-3.1.1.js、additional-methods.min.js、jquery.validate.min.js(用于校验)、messages_zh.min.js(用于支持中文)。导入这四个包到 static/js 文件夹中。</li>
</ul>
<h4 id="3-编写javascript代码："><a href="#3-编写javascript代码：" class="headerlink" title="3.  编写javascript代码："></a>3.  编写javascript代码：</h4><ul>
<li>js是一种脚本语言，常用于<strong>网页客户端编程</strong>，使网页在客户端浏览器中，实现更多的<strong>动态功能，表现出更加丰富的视觉效果</strong>。</li>
<li>jquery是一个快速、简洁的<strong>JavaScript框架</strong>，极大的简化了javascript编程。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>...<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/jquery-3.1.1.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/jquery.validate.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/messages_zh.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/additional-methods.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">        $("#registerForm").validate(&#123;</span><br><span class="line">            rules: &#123;</span><br><span class="line">                // 表示username必填</span><br><span class="line">                username: "required", </span><br><span class="line">                // 表示password必填，并且长度4--6</span><br><span class="line">                password: &#123;</span><br><span class="line">                    required: true,</span><br><span class="line">                    minlength: 4,</span><br><span class="line">                    maxlength: 6,</span><br><span class="line">                &#125;,</span><br><span class="line">                // 表示和确认密码相同</span><br><span class="line">                repassword: &#123;</span><br><span class="line">                    equalTo: "#password"</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>效果：</li>
</ul>
<img src="/2020/04/30/SpringBoot秒课系统-1/12.png" title="12-1">

<h3 id="2-JSR303服务端验证："><a href="#2-JSR303服务端验证：" class="headerlink" title="[2]  JSR303服务端验证："></a>[2]  JSR303服务端验证：</h3><h4 id="1-JSR303基本概念："><a href="#1-JSR303基本概念：" class="headerlink" title="1.  JSR303基本概念："></a>1.  JSR303基本概念：</h4><ul>
<li>JSR的基本概念：<ul>
<li>JSR是Java Specification Requests的缩写，意思是<strong>Java 规范提案</strong>。是指向 JCP (Java Community Process，一个开放的国际组织，主要由Java开发者以及被授权者组成，职能是发展和更新) 提出<strong>新增一个标准化技术规范的正式请求</strong>。任何人都可以提交JSR，以向Java平台增添新的API和服务。JSR已成为Java界的一个重要标准。</li>
<li>JSR-303 是<strong>JAVA EE 6 中的一项子规范</strong>，叫做Bean Validation，Hibernate Validator 是 Bean Validation 的参考实现 . Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint 的实现，除此之外还有一些附加的 constraint。</li>
</ul>
</li>
</ul>
<img src="/2020/04/30/SpringBoot秒课系统-1/13.png" title="13-1">

<ul>
<li>Hibernate Validator 附加的一些constraint：</li>
</ul>
<img src="/2020/04/30/SpringBoot秒课系统-1/14.png" title="14-1">

<h4 id="2-必要性："><a href="#2-必要性：" class="headerlink" title="2.  必要性："></a>2.  必要性：</h4><ul>
<li>客户端的校验：<ul>
<li>就是客户端的程序对用户的输入信息作出合法性检验，减少了一些不必要的请求，减轻了服务器压力。</li>
</ul>
</li>
<li>服务器端的校验同理：<ul>
<li>区别就是<strong>服务器端的校验比客户端的校验更可靠</strong>，<strong>服务器程序或者数据端被篡改的可能性要远小于客户端</strong>。</li>
</ul>
</li>
</ul>
<h4 id="3-具体操作："><a href="#3-具体操作：" class="headerlink" title="3.  具体操作："></a>3.  具体操作：</h4><ul>
<li>给User类username字段加上验证信息：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="meta">@Column</span>(name=<span class="string">"username"</span>)</span><br><span class="line">	<span class="meta">@NotBlank</span>(message=<span class="string">"用户名不能为空！"</span>) <span class="comment">// 改动点！</span></span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改RegistController：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterController</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// @Valid用于验证注解是否符合要求，直接加在变量user之前，在变量中添加验证信息的要求，当不符合要求时就会在方法中返回message 的错误提示信息。</span></span><br><span class="line">    <span class="comment">// BindingResult用于存储错误。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">Register</span><span class="params">(@ModelAttribute(value=<span class="string">"user"</span>)</span> @Valid User user, BindingResult bindingResult) </span>&#123;</span><br><span class="line"></span><br><span class="line">		log.info(<span class="string">"username="</span> + user.getUsername() + <span class="string">";password="</span> + user.getPassword());</span><br><span class="line">		<span class="keyword">if</span> (bindingResult.hasErrors()) &#123; <span class="comment">// 若有错误，则返回页面</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"register"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>效果：为了掩饰效果，需要先注释掉上一章节script中的验证代码。</li>
</ul>
<img src="/2020/04/30/SpringBoot秒课系统-1/15.png" title="15-1">

<h2 id="V-安全设计"><a href="#V-安全设计" class="headerlink" title="V. 安全设计"></a>V. 安全设计</h2><h3 id="1-前端用户密码的MD5加盐加密传输："><a href="#1-前端用户密码的MD5加盐加密传输：" class="headerlink" title="[1]  前端用户密码的MD5加盐加密传输："></a>[1]  前端用户密码的MD5加盐加密传输：</h3><h4 id="1-MD5概述："><a href="#1-MD5概述：" class="headerlink" title="1.  MD5概述："></a>1.  MD5概述：</h4><ul>
<li><p><em>MD5<em>信息摘要算法（英语：</em>MD5</em> Message-Digest Algorithm），一种被广泛使用的<strong>密码散列函数</strong>，可以产生出一个128位（16字节）的散列值（hash value），用于<strong>确保信息传输完整一致</strong>。</p>
</li>
<li><p>加盐：盐（Salt）在密码学中，是指<strong>通过在密码任意固定位置插入特定的字符串，让散列后的结果和使用原始密码的散列结果不相符</strong>，这种过程称之为“加盐”。</p>
<ul>
<li>由于加了 Salt，即便数据库泄露了，但是由于密码都是加了 Salt 之后的散列，坏人们的数据字典已经无法<br>直接匹配，明文密码被破解出来的概率也大大降低。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String salt = <span class="string">"springboot"</span>; <span class="comment">// 特定盐</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">inputPassToFormPass</span><span class="params">(String inputPass)</span> </span>&#123;</span><br><span class="line">String str = inputPass + salt; <span class="comment">// 加盐</span></span><br><span class="line"><span class="comment">// 更多是下面这种加盐</span></span><br><span class="line">String str = salt.charAt(<span class="number">0</span>)+inputPass + salt.charAt(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> md5(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-具体实现："><a href="#2-具体实现：" class="headerlink" title="2.  具体实现："></a>2.  具体实现：</h4><ul>
<li>首先将下载的 jquery.md5.js 放到 js 文件目录下，在将这个文件进行导入到前端。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- register.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/jquery.md5.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>其次，在html中加上MD5相关代码：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/jquery.md5.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">     	$("#registerForm").validate(&#123;</span><br><span class="line">     		rules: &#123;</span><br><span class="line">     			...</span><br><span class="line">     		&#125;,</span><br><span class="line">     		submitHandler: function(form) &#123;</span><br><span class="line">                // html上以debug模式运行</span><br><span class="line">     			debugger; </span><br><span class="line">                // 加入的盐</span><br><span class="line">     			var salt = 'springboot';</span><br><span class="line">                // 将密码进行MD5加密，生成加密后的密码</span><br><span class="line">     			var newPassword = $.md5($("#password").val()+salt);</span><br><span class="line">                // 把加密的密码赋值给password</span><br><span class="line">     			$("#password").val(newPassword);</span><br><span class="line">                // form表单提交</span><br><span class="line">     			form.submit();</span><br><span class="line">     		&#125;</span><br><span class="line">     	&#125;)   </span><br><span class="line">     <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>效果：</li>
</ul>
<img src="/2020/04/30/SpringBoot秒课系统-1/16.png" title="16-1">

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 后台打印的log文件：</span><br><span class="line">username=314312122;password=40eaf31007410f790ca58c37c2903f24</span><br></pre></td></tr></table></figure>

<h3 id="2-后端用户密码的MD5加盐加密存储："><a href="#2-后端用户密码的MD5加盐加密存储：" class="headerlink" title="[2]  后端用户密码的MD5加盐加密存储："></a>[2]  后端用户密码的MD5加盐加密存储：</h3><h4 id="1-后端加密概述："><a href="#1-后端加密概述：" class="headerlink" title="1.  后端加密概述："></a>1.  后端加密概述：</h4><ul>
<li>在前端进行加密后，后端再进行一次随机的加密。</li>
<li>最后<strong>将随机盐以及两次MD5加密的密码存储在数据库中</strong>。</li>
</ul>
<h4 id="2-后端加密的实现："><a href="#2-后端加密的实现：" class="headerlink" title="2.  后端加密的实现："></a>2.  后端加密的实现：</h4><ul>
<li>先在User类中添加一个dbflag字段用于存储随机盐。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"dbflag"</span>)</span><br><span class="line">    <span class="keyword">private</span> String dbglag;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDbglag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dbglag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDbglag</span><span class="params">(String dbglag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dbglag = dbglag;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>导包：增加 MD5Util 工具类，引入下面内容：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- for MD5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- for MD5 end --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编写DB5Util工具类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Util</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String salt = <span class="string">"springboot"</span>;</span><br><span class="line">	<span class="comment">// 对字符串进行加密的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span> <span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// DigestUtils就是导入的包中的方法</span></span><br><span class="line">		<span class="keyword">return</span> DigestUtils.md5Hex(str);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 第一次加盐，模拟第一次客户端加密的过程</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">inputToBack</span> <span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> md5(str + salt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 第二次加盐</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">backToDb</span><span class="params">(String str, String dbSalt)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> md5(str + dbSalt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 整个加密过程的整合</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">inputToDb</span> <span class="params">(String str, String dbSalt)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> backToDb(inputToBack(str), dbSalt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>将第二次加密过程写进RegistController中：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/register"</span>, method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">Register</span><span class="params">(@ModelAttribute(value=<span class="string">"user"</span>)</span> @Valid User user, BindingResult bindingResult) </span>&#123;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"username="</span> + user.getUsername() + <span class="string">";password="</span> + user.getPassword());</span><br><span class="line">    <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"register"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String salt = <span class="string">"alex"</span>; <span class="comment">// 设置随机盐</span></span><br><span class="line">    String newPassword = MD5Util.backToDb(user.getPassword(), salt); <span class="comment">// 进行第二次加密</span></span><br><span class="line">    user.setId(<span class="number">2020</span>);</span><br><span class="line">    user.setPassword(newPassword); <span class="comment">// 更新密码</span></span><br><span class="line">    user.setDbflag(salt); <span class="comment">// 设置user中的盐属性</span></span><br><span class="line">    userService.regist(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"register"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>执行效果：</li>
</ul>
<img src="/2020/04/30/SpringBoot秒课系统-1/17.png" title="17-1">



<h2 id="VI-提升SpringBoot应用性能"><a href="#VI-提升SpringBoot应用性能" class="headerlink" title="VI. 提升SpringBoot应用性能"></a>VI. 提升SpringBoot应用性能</h2><h3 id="1-更改加载配置的方式："><a href="#1-更改加载配置的方式：" class="headerlink" title="[1]  更改加载配置的方式："></a>[1]  更改加载配置的方式：</h3><ul>
<li><p>SpringBoot 自动配置给我们提供很大便利，难免会增加应用的启动时间、内存和 CPU 的消耗等，如果对这方面要求很高，就可以根据自动配置的原理进行一些优化。</p>
</li>
<li><p>操作：</p>
<ul>
<li><p>先将sts的console窗口的限制字符个数取消掉。</p>
</li>
<li><p>再于main函数所在class中的 Run Configurations 中把Enable debug out勾选上，run，启动程序，就会输出我们需要的资源，和不需要的资源。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Positive matches:</span><br><span class="line">-----------------</span><br><span class="line">AopAutoConfiguration matched:</span><br><span class="line">- @ConditionalOnProperty (spring.aop.auto=true) matched (OnPropertyCondition)</span><br><span class="line">...</span><br><span class="line">Negative matches:</span><br><span class="line">-----------------</span><br><span class="line">ActiveMQAutoConfiguration:</span><br><span class="line">Did not match:</span><br><span class="line">- @ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory' (OnClassCondition)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>把上述positive的资源导入主函数所在的类（negative的就会自动忽略），就可以减少SpringBoot启动时候对资源的加载，从而提升效率。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @SpringBootApplication</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@import</span>(&#123;</span><br><span class="line">    AopAutoConfiguration.class, </span><br><span class="line">    <span class="comment">// 将positive所有的资源添加进去</span></span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckilApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(SeckilApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// maven： update project 后，启动发现控制台输出：</span></span><br><span class="line"><span class="function">Jetty started on <span class="title">port</span><span class="params">(s)</span> 8080 <span class="params">(http/<span class="number">1.1</span>)</span> with context path '/'</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h3 id="2-将Tomcat换成Jetty："><a href="#2-将Tomcat换成Jetty：" class="headerlink" title="[2]  将Tomcat换成Jetty："></a>[2]  将Tomcat换成Jetty：</h3><ul>
<li>为了提高应用性能，也可以将默认的 tomcat 插件，更换成更小巧的 Jetty。</li>
<li>只需要修改 pom.xml 即可：<ul>
<li>做法：1.去除 Spring Boot 中默认的 Tomcat 依赖。2.添加 Jetty 依赖。</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.将tomcat排除在外 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 1.将tomcat排除在外 end --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.加入Jetty依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.加入Jetty依赖 end --&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="四、使用SpringBoot实现登录功能"><a href="#四、使用SpringBoot实现登录功能" class="headerlink" title="四、使用SpringBoot实现登录功能"></a>四、使用SpringBoot实现登录功能</h1><h2 id="I-登录基本功能"><a href="#I-登录基本功能" class="headerlink" title="I. 登录基本功能"></a>I. 登录基本功能</h2><h3 id="1-编写登录功能："><a href="#1-编写登录功能：" class="headerlink" title="[1]  编写登录功能："></a>[1]  编写登录功能：</h3><h4 id="1-基本思路："><a href="#1-基本思路：" class="headerlink" title="1.  基本思路："></a>1.  基本思路：</h4><ul>
<li>数据验证：<ul>
<li>登录页面<strong>前端</strong>部分，关注的重点还是<strong>用户账号和密码在js代码里要客户端验证</strong>，这是验证的第一步，保证用户输入格式的正确性同时也从一方面减少用户向后台发送没必要的错误请求。前端向后端请求的方式使用POST。</li>
<li>在后台接收前端传送的信息同样要经过<strong>服务端验证</strong>， 因为有可能一些人并不是通过合法的方式进行访问， 可以<strong>减少没必要的数据库查询</strong>。</li>
</ul>
</li>
<li>安全设计：<ul>
<li>密码要如何保存， 明文存入数据库？当然非常非常非常不推荐， 由于大多数客户的习惯都是使用相同的密码，如果明文在发生信息泄露的情况下容易发生撞库的事情。所以在密码的保存上最好在后台使用MD5的两次加盐加密的方式存储到数据库中。</li>
</ul>
</li>
<li>登录状态的保存：<ul>
<li>由于http协议是无状态的， 所以要记录用户的登录状态就要靠后台相应数据的维护来记录， 我们通常都是登录成功后<strong>在seesion中保存登录用户</strong>。</li>
</ul>
</li>
</ul>
<h4 id="2-具体实现：-1"><a href="#2-具体实现：-1" class="headerlink" title="2.  具体实现："></a>2.  具体实现：</h4><ul>
<li>添加LoginController：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(RegisterController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/login"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// model 应该是contrller里面的Map结构。Map里面添加key=“user”，value=“user对象”的意思，最后把这个model返回，在页面上就能得到这个user对象了</span></span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, <span class="keyword">new</span> User());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;	<span class="comment">// 对应的逻辑视图名为“login”，URL= prefix前缀+视图名称 +suffix后缀组成。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/login"</span>, method=RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@ModelAttribute(value=<span class="string">"user"</span>)</span> @Valid User user, BindingResult bindingResult, HttpSession session) </span>&#123; <span class="comment">// user是从页面上发回来的user</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"username="</span> + user.getUsername() + <span class="string">";password="</span> + user.getPassword());</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        User dbUser = userService.getUser(user.getUsername()); <span class="comment">// 提取数据库中相应的user</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将post的user密码和数据库中的作对比</span></span><br><span class="line">        <span class="keyword">if</span>(dbUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dbUser.getPassword().equals(MD5Util.inputToDb(user.getPassword(), dbUser.getDbflag()))) &#123;</span><br><span class="line">                session.setAttribute(<span class="string">"user"</span>, dbUser);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"home"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在UserServiceImpl中添加getUser函数：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> UserRepository userRepository;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">regist</span><span class="params">(User user)</span> </span>&#123;	</span><br><span class="line">		<span class="keyword">return</span> userRepository.saveAndFlush(user);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">// 通过姓名查找数据库中的user对象</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(String username)</span> </span>&#123;	</span><br><span class="line">		<span class="comment">// return userRepository.getOne(username); //懒加载，使用不当会出现问题</span></span><br><span class="line">        <span class="comment">// 懒加载其实就是延时加载，即当对象需要用到的时候再去加载。</span></span><br><span class="line">		<span class="keyword">return</span> userRepository.findByUsername(username);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>添加login.html页面：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultrag.net.nz/thymeleaf/layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/bootstrap.min.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"text-align:center;margin-top:50px;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row col-md-6 col-md-offset-3"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;title&#125;"</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- form表单 用于填写user对象 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"registerForm"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;user&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>username<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                              </span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;username&#125;"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">" 用户名 "</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                            	<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;#fields.hasErrors('username')&#125;"</span> <span class="attr">th:errors</span>=<span class="string">"*&#123;username&#125;"</span> <span class="attr">style</span>=<span class="string">"color:red;"</span>&gt;</span></span><br><span class="line">                            	<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>password<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                   </span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">" 密码 "</span> &gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;#fields.hasErrors('password')&#125;"</span> <span class="attr">th:errors</span>=<span class="string">"*&#123;password&#125;"</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">style</span>=<span class="string">"color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                         </span><br><span class="line">                            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary register-btn"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/jquery-3.1.1.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/jquery.validate.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/messages_zh.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/additional-methods.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/jquery.md5.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">     	$("#registerForm").validate(&#123;</span><br><span class="line">     		rules: &#123;</span><br><span class="line">     			username: "required",</span><br><span class="line">     			password: &#123;</span><br><span class="line">     				required: true</span><br><span class="line">     			&#125;</span><br><span class="line">     		&#125;</span><br><span class="line">     </span><br><span class="line">     	&#125;) </span><br><span class="line">     <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>添加home.html：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultrag.net.nz/thymeleaf/layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/bootstrap.min.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"text-align:center;margin-top:50px;"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用于获取登录后存在session中的用户名 --&gt;</span></span><br><span class="line">   			<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>效果：</li>
</ul>
<img src="/2020/04/30/SpringBoot秒课系统-1/18.png" title="18-1">

<h3 id="2-经典图形验证码："><a href="#2-经典图形验证码：" class="headerlink" title="[2]  经典图形验证码："></a>[2]  经典图形验证码：</h3><h4 id="1-目的：防止恶意攻击："><a href="#1-目的：防止恶意攻击：" class="headerlink" title="1.  目的：防止恶意攻击："></a>1.  目的：防止恶意攻击：</h4><ul>
<li>防止大量重复请求、机器人暴力访问等情况的，最有效的手段就是<strong>加入验证码</strong>， 同时记录某个用户在或ip在某个时段内如果尝试的失败<strong>登录次数超过一定阈值</strong>就限制其在几分钟内不能继续登录。</li>
</ul>
<h4 id="2-实现流程："><a href="#2-实现流程：" class="headerlink" title="2.  实现流程："></a>2.  实现流程：</h4><ul>
<li>新增图形验证码生成工具：<ul>
<li>在util包下添加ValidateCode.java</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dayup.seckil.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics2D;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCode</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 图片的宽度。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> width = <span class="number">160</span>;</span><br><span class="line">	<span class="comment">// 图片的高度。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> height = <span class="number">40</span>;</span><br><span class="line">	<span class="comment">// 验证码字符个数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> codeCount = <span class="number">5</span>;</span><br><span class="line">	<span class="comment">// 验证码干扰线数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> lineCount = <span class="number">150</span>;</span><br><span class="line">	<span class="comment">// 验证码</span></span><br><span class="line">	<span class="keyword">private</span> String code = <span class="keyword">null</span>;</span><br><span class="line">	<span class="comment">// 验证码图片Buffer</span></span><br><span class="line">	<span class="keyword">private</span> BufferedImage buffImg = <span class="keyword">null</span>;</span><br><span class="line">	<span class="comment">// 验证码范围,去掉0(数字)和O(拼音)容易混淆的(小写的1和L也可以去掉,大写不用了)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">char</span>[] codeSequence = &#123; <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>,</span><br><span class="line">			<span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 默认构造函数,设置默认参数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ValidateCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.createCode();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> width</span></span><br><span class="line"><span class="comment">	 *            图片宽</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> height</span></span><br><span class="line"><span class="comment">	 *            图片高</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ValidateCode</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.width = width;</span><br><span class="line">		<span class="keyword">this</span>.height = height;</span><br><span class="line">		<span class="keyword">this</span>.createCode();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> width</span></span><br><span class="line"><span class="comment">	 *            图片宽</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> height</span></span><br><span class="line"><span class="comment">	 *            图片高</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> codeCount</span></span><br><span class="line"><span class="comment">	 *            字符个数</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> lineCount</span></span><br><span class="line"><span class="comment">	 *            干扰线条数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ValidateCode</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> codeCount, <span class="keyword">int</span> lineCount)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.width = width;</span><br><span class="line">		<span class="keyword">this</span>.height = height;</span><br><span class="line">		<span class="keyword">this</span>.codeCount = codeCount;</span><br><span class="line">		<span class="keyword">this</span>.lineCount = lineCount;</span><br><span class="line">		<span class="keyword">this</span>.createCode();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> x = <span class="number">0</span>, fontHeight = <span class="number">0</span>, codeY = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> red = <span class="number">0</span>, green = <span class="number">0</span>, blue = <span class="number">0</span>;</span><br><span class="line">		x = width / (codeCount + <span class="number">2</span>);<span class="comment">// 每个字符的宽度(左右各空出一个字符)</span></span><br><span class="line">		fontHeight = height - <span class="number">2</span>;<span class="comment">// 字体的高度</span></span><br><span class="line">		codeY = height - <span class="number">4</span>;</span><br><span class="line">		<span class="comment">// 图像buffer</span></span><br><span class="line">		buffImg = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">		Graphics2D g = buffImg.createGraphics();</span><br><span class="line">		<span class="comment">// 生成随机数</span></span><br><span class="line">		Random random = <span class="keyword">new</span> Random();</span><br><span class="line">		<span class="comment">// 将图像填充为白色</span></span><br><span class="line">		g.setColor(Color.WHITE);</span><br><span class="line">		g.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">		<span class="comment">// 创建字体,可以修改为其它的</span></span><br><span class="line">		Font font = <span class="keyword">new</span> Font(<span class="string">"Fixedsys"</span>, Font.PLAIN, fontHeight);</span><br><span class="line">		<span class="comment">// Font font = new Font("Times New Roman", Font.ROMAN_BASELINE, fontHeight);</span></span><br><span class="line">		g.setFont(font);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lineCount; i++) &#123;</span><br><span class="line">			<span class="comment">// 设置随机开始和结束坐标</span></span><br><span class="line">			<span class="keyword">int</span> xs = random.nextInt(width);<span class="comment">// x坐标开始</span></span><br><span class="line">			<span class="keyword">int</span> ys = random.nextInt(height);<span class="comment">// y坐标开始</span></span><br><span class="line">			<span class="keyword">int</span> xe = xs + random.nextInt(width / <span class="number">8</span>);<span class="comment">// x坐标结束</span></span><br><span class="line">			<span class="keyword">int</span> ye = ys + random.nextInt(height / <span class="number">8</span>);<span class="comment">// y坐标结束</span></span><br><span class="line">			<span class="comment">// 产生随机的颜色值，让输出的每个干扰线的颜色值都将不同。</span></span><br><span class="line">			red = random.nextInt(<span class="number">255</span>);</span><br><span class="line">			green = random.nextInt(<span class="number">255</span>);</span><br><span class="line">			blue = random.nextInt(<span class="number">255</span>);</span><br><span class="line">			g.setColor(<span class="keyword">new</span> Color(red, green, blue));</span><br><span class="line">			g.drawLine(xs, ys, xe, ye);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// randomCode记录随机产生的验证码</span></span><br><span class="line">		StringBuffer randomCode = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		<span class="comment">// 随机产生codeCount个字符的验证码。</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; codeCount; i++) &#123;</span><br><span class="line">			String strRand = String.valueOf(codeSequence[random.nextInt(codeSequence.length)]);</span><br><span class="line">			<span class="comment">// 产生随机的颜色值，让输出的每个字符的颜色值都将不同。</span></span><br><span class="line">			red = random.nextInt(<span class="number">255</span>);</span><br><span class="line">			green = random.nextInt(<span class="number">255</span>);</span><br><span class="line">			blue = random.nextInt(<span class="number">255</span>);</span><br><span class="line">			g.setColor(<span class="keyword">new</span> Color(red, green, blue));</span><br><span class="line">			g.drawString(strRand, (i + <span class="number">1</span>) * x, codeY);</span><br><span class="line">			<span class="comment">// 将产生的四个随机数组合在一起。</span></span><br><span class="line">			randomCode.append(strRand);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 将四位数字的验证码保存到Session中。</span></span><br><span class="line">		code = randomCode.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		OutputStream sos = <span class="keyword">new</span> FileOutputStream(path);</span><br><span class="line">		<span class="keyword">this</span>.write(sos);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(OutputStream sos)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		ImageIO.write(buffImg, <span class="string">"png"</span>, sos);</span><br><span class="line">		sos.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> BufferedImage <span class="title">getBuffImg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> buffImg;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> code;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 测试函数,默认生成到f盘</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ValidateCode vCode = <span class="keyword">new</span> ValidateCode(<span class="number">160</span>, <span class="number">40</span>, <span class="number">5</span>, <span class="number">150</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String path = <span class="string">"F:/"</span> + <span class="keyword">new</span> Date().getTime() + <span class="string">".png"</span>;</span><br><span class="line">			System.out.println(vCode.getCode() + <span class="string">" &gt;"</span> + path);</span><br><span class="line">			vCode.write(path);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>输出图片流以及禁止图片缓存：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在LoginController中添加validate方法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/validateCode"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">validate</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 响应类型：图片</span></span><br><span class="line">		response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line">		<span class="comment">// 禁止图像缓存</span></span><br><span class="line">		response.setHeader(<span class="string">"Pragma"</span>, <span class="string">"No-cache"</span>); <span class="comment">//http1.0</span></span><br><span class="line">		response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>); <span class="comment">//http1.1</span></span><br><span class="line">		response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0</span>); <span class="comment">//代理服务器禁止缓存</span></span><br><span class="line">		</span><br><span class="line">		HttpSession session = request.getSession();</span><br><span class="line">		ValidateCode validateCode = <span class="keyword">new</span> ValidateCode(<span class="number">120</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">100</span>); <span class="comment">//宽、高、字符数、干扰线数目</span></span><br><span class="line">		</span><br><span class="line">		session.setAttribute(<span class="string">"code"</span>, validateCode.getCode()); <span class="comment">//把验证码存到session的code中</span></span><br><span class="line">		validateCode.write(response.getOutputStream()); <span class="comment">//将validateCode对应的图片写到response的输出流中, 让login页面拿到</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>页面调用：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>验证码<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"code"</span> <span class="attr">name</span>=<span class="string">"code"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">style</span>=<span class="string">"width: 250px;"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 首次进入页面，通过src获取验证码 changeImg()调用script中的对应函数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"imgObj"</span> <span class="attr">alt</span>=<span class="string">" 验证码 "</span> <span class="attr">src</span>=<span class="string">"/validateCode"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">"img-responsive"</span> <span class="attr">onclick</span>=<span class="string">"changeImg()"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">	$("#registerForm").validate(&#123;</span><br><span class="line">		rules : &#123;</span><br><span class="line">			username : "required",</span><br><span class="line">			password : &#123;</span><br><span class="line">				required : true</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	// 刷新图片</span><br><span class="line">	function changeImg() &#123;</span><br><span class="line">		var imgSrc = $("#imgObj");</span><br><span class="line">		var src = imgSrc.attr("src");</span><br><span class="line">		imgSrc.attr("src", changeUrl(src));</span><br><span class="line">	&#125;</span><br><span class="line">	//为了使每次生成图片不一致，即不让浏览器读缓存，所以需要加上时间戳</span><br><span class="line">	function changeUrl(url) &#123;</span><br><span class="line">		var timestamp = (new Date()).valueOf();</span><br><span class="line">		var index = url.indexOf("?", url); // 获取问号下标（首次出现的位置），没有返回-1</span><br><span class="line">		if (index &gt; 0) &#123;</span><br><span class="line">            // substring提取字符串中介于两个指定下标之间的字符</span><br><span class="line">			url = url.substring(index, url.indexOf(url, "?"));</span><br><span class="line">		&#125;</span><br><span class="line">		if ((url.indexOf("&amp;") &gt;= 0)) &#123; </span><br><span class="line">			url = url + "×tamp=" + timestamp;</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			url = url + "?timestamp=" + timestamp;</span><br><span class="line">		&#125;</span><br><span class="line">		return url;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在登录的时候检查验证码是否正确：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在登录时候优先检查验证码输入对与否（忽略大小写），不对就返回login，对就什么也不做</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/login"</span>, method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@ModelAttribute(value=<span class="string">"user"</span>)</span> @Valid User user, BindingResult bindingResult, HttpSession session, String code, Model model) </span>&#123;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"username="</span> + user.getUsername() + <span class="string">";password="</span> + user.getPassword());</span><br><span class="line">    <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改动点：</span></span><br><span class="line">    String sessionCode = (String) session.getAttribute(<span class="string">"code"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.equalsIgnoreCase(sessionCode, code)) &#123; <span class="comment">//将用户输入的和session中存的正确的验证码作比较</span></span><br><span class="line">        model.addAttribute(<span class="string">"message"</span>, <span class="string">"验证码输入错误！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    User dbUser = userService.getUser(user.getUsername());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dbUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dbUser.getPassword().equals(MD5Util.inputToDb(user.getPassword(), dbUser.getDbflag()))) &#123;</span><br><span class="line">            session.setAttribute(<span class="string">"user"</span>, dbUser);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"home"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将验证码错误的信息输出到login页面上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"text-align: center; margin-top: 50px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;message&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试验证：</li>
</ul>
<img src="/2020/04/30/SpringBoot秒课系统-1/19.png" title="19-1">

<h2 id="II-分布式Session的登录解决方案"><a href="#II-分布式Session的登录解决方案" class="headerlink" title="II. 分布式Session的登录解决方案"></a>II. 分布式Session的登录解决方案</h2><h3 id="1-Spring-Boot中使用Redis："><a href="#1-Spring-Boot中使用Redis：" class="headerlink" title="[1]  Spring Boot中使用Redis："></a>[1]  Spring Boot中使用Redis：</h3><h4 id="1-Redis相关概念："><a href="#1-Redis相关概念：" class="headerlink" title="1.  Redis相关概念："></a>1.  Redis相关概念：</h4><ul>
<li>Redis数据库介绍：<ul>
<li>即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、<strong>Key-Value数据库</strong>，并提供多种语言的API。</li>
</ul>
</li>
<li>Redis的特性：<ul>
<li>性能极高 – Redis能读的速度是110000次/s,  写的速度是81000次/s 。</li>
<li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操<br>作。</li>
<li>原子 – Redis的<strong>所有操作都是原子性的</strong>，意思就是要么成功执行要么失败完全不执行。单个操作是原子性<br>的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li>
<li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li>
</ul>
</li>
<li>相关概念：<ul>
<li>SDR：是Spring官方推出，可以算是<strong>Spring框架集成Redis操作的一个子框架</strong>，封装了Redis的很多命令，可以很方便的使用Spring操作Redis数据库。</li>
<li>Jedis：是Redis官方推出的<strong>面向Java的Client</strong>，提供了很多接口和方法，可以让Java操作使用Redis。</li>
<li>RedisTemplate：Spring封装了RedisTemplate对象来进行对Redis的各种操作，它支持所有的Redis原生的api。</li>
</ul>
</li>
</ul>
<h4 id="2-Redis基础配置文件："><a href="#2-Redis基础配置文件：" class="headerlink" title="2.  Redis基础配置文件："></a>2.  Redis基础配置文件：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建application.yml配置文件</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># redis</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># 让spring redis知道你的repository类是给Redis的不是数据库的。</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">      redis:</span></span><br><span class="line"><span class="attr">         repositories:</span></span><br><span class="line"><span class="attr">           enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># 设置了密码的话要填</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    jedis:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">8</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">8</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<h4 id="3-Redis基础配置类："><a href="#3-Redis基础配置类：" class="headerlink" title="3.  Redis基础配置类："></a>3.  Redis基础配置类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在src/main/java/redis/RedisConfig.java下配置：</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//  自动注入 RedisConnectionFactory 工厂类 （连接redis pool）</span></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">mainRedisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">		initRedisTemplate(redisTemplate, redisConnectionFactory);</span><br><span class="line">		<span class="keyword">return</span> redisTemplate;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//  设置数据存入redis的序列化方式</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initRedisTemplate</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate,</span></span></span><br><span class="line"><span class="function"><span class="params">			RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">		redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">		redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">		redisTemplate.setHashValueSerializer(<span class="keyword">new</span> JdkSerializationRedisSerializer());</span><br><span class="line">		redisTemplate.setValueSerializer(<span class="keyword">new</span> JdkSerializationRedisSerializer());</span><br><span class="line">		<span class="comment">// redisTemplate.setStringSerializer(new StringRedisSerializer());</span></span><br><span class="line">		redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  以下五种便于对五种数据类型进行操作</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> HashOperations&lt;String, String, Object&gt; <span class="title">hashOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> redisTemplate.opsForHash();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ListOperations&lt;String, Object&gt; <span class="title">listperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> redisTemplate.opsForList();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> SetOperations&lt;String, Object&gt; <span class="title">setOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> redisTemplate.opsForSet();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ValueOperations&lt;String, Object&gt; <span class="title">valueOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> redisTemplate.opsForValue();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ZSetOperations&lt;String, Object&gt; <span class="title">zSetOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> redisTemplate.opsForZSet();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-公共方法的定义："><a href="#4-公共方法的定义：" class="headerlink" title="4.  公共方法的定义："></a>4.  公共方法的定义：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加src/main/java/redis/BaseRedis.java类，进行编写</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseRedis</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// RedisTemplate对象来进行对Redis进行各种操作</span></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">protected</span> RedisTemplate&lt;String, Object&gt; redisTemlate;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 使用HashOperations方式对对象进行存储</span></span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">protected</span> HashOperations&lt;String, String, T&gt; hashOperations;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 用来解决公共的redis——key的一些问题，获取最外层公共的key</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">getRedisKey</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// user对象存储到redis里面，expire表示数值什么时候过期</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, T domain, <span class="keyword">long</span> expire)</span> </span>&#123;</span><br><span class="line">		hashOperations.put(getRedisKey(), key, domain);</span><br><span class="line">		<span class="keyword">if</span>(expire != -<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="comment">// 表示多少秒后过期</span></span><br><span class="line">			redisTemlate.expire(getRedisKey(), expire, TimeUnit.SECONDS);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-User的Redis存取："><a href="#5-User的Redis存取：" class="headerlink" title="5.  User的Redis存取："></a>5.  User的Redis存取：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对User类实现序列化</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"user"</span>) <span class="comment">//绑定名为user的表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123; <span class="comment">//继承后可进行序列化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动创建序列化版本号</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1253425624351531L</span>;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加src/main/java/redis/UserRedis.java类，进行中编写REDIS_KEY</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRedis</span> <span class="keyword">extends</span> <span class="title">BaseRedis</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_KEY = <span class="string">"com.dayup.seckil.redis.UserRedis"</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> String <span class="title">getRedisKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> REDIS_KEY;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-Junit测试验证："><a href="#6-Junit测试验证：" class="headerlink" title="6.  Junit测试验证："></a>6.  Junit测试验证：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> UserRedis userRedis;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPutRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		User user = <span class="keyword">new</span> User(<span class="string">"alex"</span>, <span class="string">"123456"</span>);</span><br><span class="line">		<span class="comment">// -1表示不过期</span></span><br><span class="line">		userRedis.put(user.getUsername(), user, -<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-实现效果："><a href="#7-实现效果：" class="headerlink" title="7.  实现效果："></a>7.  实现效果：</h4><img src="/2020/04/30/SpringBoot秒课系统-1/20.png" title="20-1">



<h3 id="2-分布式session的登录解决方案编码："><a href="#2-分布式session的登录解决方案编码：" class="headerlink" title="[2]  分布式session的登录解决方案编码："></a>[2]  分布式session的登录解决方案编码：</h3><h4 id="1-问题描述："><a href="#1-问题描述：" class="headerlink" title="1.  问题描述："></a>1.  问题描述：</h4><ul>
<li>一个登录请求发送到服务端 server 1 （如tomcat服务器），将seeion状态保存，但是下一次访问时发送到不同的服务端server 2，导致没有了session，为解决这一问题，需要<strong>保持登录状态的一致性</strong>。</li>
<li>解决思路：Redis 中存session，这样的话客户端请求服务器的话，会先从Redis中找session。</li>
</ul>
<h4 id="2-session相关："><a href="#2-session相关：" class="headerlink" title="2.  session相关："></a>2.  session相关：</h4><ul>
<li>首先<strong>cookie 机制</strong>采用的是在<strong>客户端</strong>保持状态的方案，而 <strong>session 机制</strong>采用的是在<strong>服务器端</strong>保持状态的方案。</li>
<li>服务器使用一种类似于<strong>散列表</strong>的结构来保存信息。</li>
<li>但程序需要为某个客户端的请求创建一个 session 的时候，服务器首先检查这个客户端的请求里是否包含了一<br>个 <strong>session 标识</strong>－称为 session id,如果已经包含一个 session id 则说明以前已经为此客户创建过 session，服务器就按照 session id 把这个 session 检索出来使用(如果检索不到，可能会新建一个，这种情况可能出现在服务端已经删除了该用户对应的 session 对象，但用户人为地在请求的 URL 后面附加上一个 JSESSION 的参数)。</li>
<li>保存 Session id 的几种方式：<ul>
<li>A．保存 session id 的方式可以<strong>采用 cookie</strong>，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。</li>
<li>B．由于 cookie 可以被人为的禁止，必须有其它的机制以便在 cookie 被禁止时仍然能够把 session id 传递回服务器，经常采用的一种技术叫做 <strong>URL 重写</strong>，就是把 session id 附加在 URL 路径的后面，附加的方式也有两种，一种是作为 URL 路径的附加信息，另一种是作为查询字符串附加在 URL 后面。网络在整个交互过程中始终保持状态，就必须在每个客户端可能请求的路径后面都包含这个 session id。</li>
<li>C．另一种技术叫做<strong>表单隐藏字段</strong>。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把 session id 传递回服务器。</li>
</ul>
</li>
<li>你要理解 JSESSIONID 与 cookie 是什么关系，session 与 cookie 到底有什么关系：<ul>
<li>简单来说，当第一次 request server 时，server 产生 JSESSIONID 对应的值 1，通过 http header set-<br>cookie，传递给 browser，browser 检测到 http response header 里带 set-cookie，那么 browser 就会<br>create 一个 cookie，key=JSESSIONID，value=值 1，而后的每次请求，browser 都会把 cookie 里的键值对，放到 http request header 里，传递给 server。</li>
<li>当在 server 端调用 http.getSession()方法时，server 会先从 http request header 里解析出来<br>JSESSIONID 的值，再从一个 Map 容器里去找有没有 value，如果没有，就会产生一个 HttpSessioon 对象，放到这个 Map 容器里，同时设置一个最大生存时间。HttpSession 你也可以把它想象成是一个 Map，可以getAttribute()，可以 setAttribute()。</li>
<li>总结：<strong>JSESSIONID由server产生，cookie由浏览器产生，cookie中保存JSESSIONID。</strong>服务器通过浏览器的request获取cookie中的JSESSIONID。</li>
</ul>
</li>
<li>分布式Session如何实现？<ul>
<li>最前端的<strong>负载均衡器，如 nginx</strong>，会把 request 原封不动的平均分配到集群中的一台机器，所喂原封不动，就是指的 request header 里的内容不变。</li>
<li>Tomcat 处理单机 session 其实就是 JSESSIONID 来获取 session 信息，所以要实现分布式 Session，只要得到 JSESSIONID 的值就可以了，剩下的操作无非就是根据 key 去 redis 或 memcache 中存取值，并缓存到本机内存中。<strong>（即把JSSESSIONID存到 redis 中，然后通过 key 到redis中去获取 JSSESSIONID的值）</strong></li>
</ul>
</li>
</ul>
<h4 id="3-VO、PO、BO、POJO："><a href="#3-VO、PO、BO、POJO：" class="headerlink" title="3.  VO、PO、BO、POJO："></a>3.  VO、PO、BO、POJO：</h4><ul>
<li>VO：value object：值对象<ul>
<li>通常用于<strong>业务层之间的数据传递</strong>，由new创建，由GC回收。</li>
</ul>
</li>
<li>PO：persistant object：持久层对象<ul>
<li>对应<strong>数据库中表的字段</strong>。</li>
<li>VO和PO，都是属性加上属性的get和set方法；表面看没什么不同，但代表的含义是完全不同的。</li>
</ul>
</li>
<li>BO：business object：业务对象<ul>
<li>BO把业务逻辑封装为一个对象。</li>
<li>我理解是<strong>PO的组合</strong>，比如投保人是一个PO，被保险人是一个PO，险种信息是一个PO等等，他们组合起来是第一张保单的BO。</li>
</ul>
</li>
<li>POJO：plain ordinary java object：简单无规则java对象<ul>
<li><strong>纯的传统意义的java对象</strong>，最基本的Java Bean只有属性加上属性的get和set方法。</li>
<li>可以转化为PO、DTO、VO；比如POJO在传输过程中就是DTO。</li>
</ul>
</li>
</ul>
<h4 id="4-具体实现："><a href="#4-具体实现：" class="headerlink" title="4.  具体实现："></a>4.  具体实现：</h4><ul>
<li>编写 seckill. VO. UserVO. java：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去和Model对象（即User，POJO）做映射的。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVO</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5785185994389280644L</span>;</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">long</span> id;	</span><br><span class="line">	<span class="keyword">private</span> String repassword;	</span><br><span class="line">	<span class="keyword">private</span> String dbflag;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getRepassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> repassword;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRepassword</span><span class="params">(String repassword)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.repassword = repassword;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDbflag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dbflag;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDbflag</span><span class="params">(String dbflag)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.dbflag = dbflag;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>改写/seckil/service/impl/UserServiceImpl.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> UserRepository userRepository;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//导入userRedis</span></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> UserRedis userRedis;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">regist</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> userRepository.saveAndFlush(user);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//从redis中获取数据</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> UserVO <span class="title">getUser</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">		User user = userRedis.get(<span class="string">"username"</span>);</span><br><span class="line">		<span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123; <span class="comment">//redis中没有这个对象</span></span><br><span class="line">			<span class="comment">//从数据库中去读</span></span><br><span class="line">			user = userRepository.findByUsername(username);</span><br><span class="line">			<span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">//向redis中存数据</span></span><br><span class="line">				userRedis.put(user.getUsername(), user, -<span class="number">1</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// 用户没有注册，返回null</span></span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//把user的值赋给userVO</span></span><br><span class="line">		BeanUtils.copyProperties(user, userVO);</span><br><span class="line">		<span class="comment">// return userRepository.getOne(username); //懒加载，使用不当会出现问题</span></span><br><span class="line">		<span class="keyword">return</span> userVO;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//把user对象通过token存到redis中</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUserToRedisByToken</span><span class="params">(UserVO dbUser, String token)</span> </span>&#123;</span><br><span class="line">		User user = <span class="keyword">new</span> User();</span><br><span class="line">		BeanUtils.copyProperties(dbUser, user);</span><br><span class="line">		userRedis.put(token, user, <span class="number">3600</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在redis中通过token获取user对象</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getUserFromRedisByToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> userRedis.get(token);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在seckil/controller/LoginController.java下编写：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(RegisterController.class);</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> UserService userService;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/login"</span>, method=RequestMethod.GET)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		model.addAttribute(<span class="string">"user"</span>, <span class="keyword">new</span> User());</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/login"</span>, method=RequestMethod.POST)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@ModelAttribute(value=<span class="string">"user"</span>)</span> @Valid User user, BindingResult bindingResult, HttpSession session, String code, Model model, HttpServletResponse response) </span>&#123;</span><br><span class="line">		</span><br><span class="line">		log.info(<span class="string">"username="</span> + user.getUsername() + <span class="string">";password="</span> + user.getPassword());</span><br><span class="line">		<span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		String sessionCode = (String) session.getAttribute(<span class="string">"code"</span>);</span><br><span class="line">		<span class="keyword">if</span>(!StringUtils.equalsIgnoreCase(sessionCode, code)) &#123;</span><br><span class="line">			model.addAttribute(<span class="string">"message"</span>, <span class="string">"验证码输入错误！"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//先从redis拿，没有再到mysql中拿</span></span><br><span class="line">		UserVO dbUser = userService.getUser(user.getUsername());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//到mysql数据库中拿</span></span><br><span class="line">		<span class="keyword">if</span>(dbUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(dbUser.getPassword().equals(MD5Util.inputToDb(user.getPassword(), dbUser.getDbflag()))) &#123;</span><br><span class="line">				<span class="comment">//不用session了，注释掉session.setAttribute("user", dbUser);</span></span><br><span class="line">				<span class="comment">//改为存到Redis中</span></span><br><span class="line">				<span class="comment">//通过创建唯一标识符，获取key</span></span><br><span class="line">				String token = UUIDUtil.getUUID();</span><br><span class="line">				userService.saveUserToRedisByToken(dbUser, token);</span><br><span class="line">				</span><br><span class="line">				Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"token"</span>, token);</span><br><span class="line">				cookie.setMaxAge(<span class="number">3600</span>); <span class="comment">//有效期</span></span><br><span class="line">				cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">				response.addCookie(cookie);</span><br><span class="line">				<span class="comment">// 跳转到HomeController的home方法中去</span></span><br><span class="line">				</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"redirect:/home"</span>; <span class="comment">//重定向跳转到home</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/validateCode"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">validate</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 响应类型：图片</span></span><br><span class="line">		response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line">		<span class="comment">// 禁止图像缓存</span></span><br><span class="line">		response.setHeader(<span class="string">"Pragma"</span>, <span class="string">"No-cache"</span>); <span class="comment">//http1.0</span></span><br><span class="line">		response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>); <span class="comment">//http1.1</span></span><br><span class="line">		response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0</span>); <span class="comment">//代理服务器禁止缓存</span></span><br><span class="line">		</span><br><span class="line">		HttpSession session = request.getSession();</span><br><span class="line">		ValidateCode validateCode = <span class="keyword">new</span> ValidateCode(<span class="number">120</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">100</span>); <span class="comment">//宽、高、字符数、干扰线数目</span></span><br><span class="line">		</span><br><span class="line">		session.setAttribute(<span class="string">"code"</span>, validateCode.getCode());</span><br><span class="line">		validateCode.write(response.getOutputStream());</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在/seckil/controller/HomeController.java下编写：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试User对象能否获取到</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/home"</span>, method=RequestMethod.GET)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">(Model model,User user)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"------------"</span>+user.getUsername());</span><br><span class="line">		model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"home"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写UUID统一标识符：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在/seckil/util/UUIDUtil.java下编写：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UUIDUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//UUID 是 通用唯一识别码（Universally Unique Identifier）的缩写</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUUID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//标识符不要横杠“-”</span></span><br><span class="line">		<span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写自定义解析器：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在/seckil/config/UserArgumentResolver.java下编写：</span></span><br><span class="line"><span class="comment">//(HandlerMethodArgumentResolver 自定义解析器)来完成参数的传值</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserArgumentResolver</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> UserService userService;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getParameterCokies</span><span class="params">(HttpServletRequest request, String tokenName)</span> </span>&#123;</span><br><span class="line">		Cookie[] cookies = request.getCookies();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (Cookie ck : cookies) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ck.getName().equals(tokenName)) &#123;</span><br><span class="line">				<span class="keyword">return</span> ck.getValue();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">			NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		HttpServletRequest request = nativeWebRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">		<span class="comment">//先从reqest 参数中找token</span></span><br><span class="line">		String requestParameter_token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">		<span class="comment">//再从cookies中找token</span></span><br><span class="line">		String Cokies_token = getParameterCokies(request, <span class="string">"token"</span>);</span><br><span class="line">		<span class="comment">//全为空则返回null</span></span><br><span class="line">		<span class="keyword">if</span> (requestParameter_token == <span class="keyword">null</span> &amp;&amp; Cokies_token == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//从redis找token对应的user，（参数中两个哪个不为空就以哪个为准）</span></span><br><span class="line">		<span class="keyword">return</span> userService.getUserFromRedisByToken((requestParameter_token != <span class="keyword">null</span> ? requestParameter_token : Cokies_token));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//用以判断参数类型是否一致</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter methodParameter)</span> </span>&#123;</span><br><span class="line">		Class&lt;?&gt; p_class = methodParameter.getParameterType();</span><br><span class="line">		<span class="keyword">return</span> p_class == User.class;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在/seckil/config/WebConfig.java下到导入自定义参数解析器</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//导入自定义参数解析器</span></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	UserArgumentResolver userArgumentResolver;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span></span>&#123;</span><br><span class="line">		argumentResolvers.add(userArgumentResolver);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//下面代码为了避免静态资源文件无法引入</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span> <span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">		registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX+<span class="string">"/static/"</span>);</span><br><span class="line">		<span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>最后为了防止redis热部署导致数据格式错误：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释掉，防止热部署：在运行时更新Java类文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--	&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">			&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">			&lt;scope&gt;runtime&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">			&lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line"><span class="comment">		&lt;/dependency&gt;   --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>效果：</li>
</ul>
<img src="/2020/04/30/SpringBoot秒课系统-1/21.png" title="21-1">

<h3 id="3-登录功能还需要做些什么？"><a href="#3-登录功能还需要做些什么？" class="headerlink" title="[3]  登录功能还需要做些什么？"></a>[3]  登录功能还需要做些什么？</h3>]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> redis </tag>
            
            <tag> vue </tag>
            
            <tag> kafka </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Note-of-JDBC]]></title>
      <url>/2020/04/30/Note-of-JDBC/</url>
      <content type="html"><![CDATA[<h1 id="一、-JDBC简介"><a href="#一、-JDBC简介" class="headerlink" title="一、 JDBC简介"></a>一、 JDBC简介</h1><a id="more"></a>

<h2 id="I-jdbc是什么"><a href="#I-jdbc是什么" class="headerlink" title="I. jdbc是什么"></a>I. jdbc是什么</h2><ul>
<li>Java DataBase Connectivity（java语言连接数据库）</li>
</ul>
<h2 id="II-jdbc本质"><a href="#II-jdbc本质" class="headerlink" title="II. jdbc本质"></a>II. jdbc本质</h2><ul>
<li>jdbc是sun公司指定的<strong>一套接口（interface）</strong>，接口都<strong>有调用者和实现者</strong>。</li>
<li>面向<strong>接口调用、面向接口写实现类</strong>，这都属于<strong>接口编程</strong>。</li>
</ul>
<h2 id="III-面向接口编程的原因"><a href="#III-面向接口编程的原因" class="headerlink" title="III. 面向接口编程的原因"></a>III. 面向接口编程的原因</h2><ul>
<li><p><strong>解耦合</strong>：降低程序的耦合度，提高程序的扩展力。</p>
<p>多态机制就是非常典型的面向抽象编程。（不要面向具体。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建议：</span></span><br><span class="line">Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 喂养的方法</span></span><br><span class="line">    <span class="comment">//面向父类型编程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不建议：</span></span><br><span class="line">Cat a = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure>
</li>
<li><p>为什么sun公司定制一套JDBC接口？</p>
<ul>
<li>因为每一个数据库底层实现原理不一样。</li>
<li>Oracle数据库有自己的原理，MySQL有自己的原理，MS SqlServer也有自己的原理。</li>
</ul>
</li>
</ul>
<img src="/2020/04/30/Note-of-JDBC/1.png" title="1-1">

<h2 id="IV-模拟三种角色"><a href="#IV-模拟三种角色" class="headerlink" title="IV. 模拟三种角色"></a>IV. 模拟三种角色</h2><ul>
<li>java程序员（调用者）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 配置文件jdbc.properties</span><br><span class="line"># 以后要连什么数据库只要修改配置文件即可，不用改代码</span><br><span class="line">className=Oracle</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaProgrammer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">/*JDBC jdbc = new MySQL();</span></span><br><span class="line"><span class="comment">          jdbc.getConnection();*/</span></span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        String className = bundle.getString(<span class="string">"className"</span>);</span><br><span class="line">        Class c = Class.froName(className);</span><br><span class="line">        JDBC jdbc = (JDBC)c.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>SUN公司（编写接口）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getConnection</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数据库厂商（实现接口）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Oracle驱动（就是一大堆的xx.class文件）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Oracle</span> <span class="keyword">implements</span> <span class="title">JDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"连接Oracle数据库成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MySQL驱动（就是一大堆的xx.class文件）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQL</span> <span class="keyword">implements</span> <span class="title">JDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"连接MYSQL数据库成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、开发前准备"><a href="#二、开发前准备" class="headerlink" title="二、开发前准备"></a>二、开发前准备</h1><h2 id="I-配置环境变量"><a href="#I-配置环境变量" class="headerlink" title="I. 配置环境变量"></a>I. 配置环境变量</h2><ul>
<li>注意：只有文本编辑器编辑的时候才需要配置环境变量，<strong>使用eclipse、idea等ide开发时无需配置环境变量</strong>。</li>
<li>配置JDBC实现类（即驱动）环境变量：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath=.;D:\course\mysql-connector-java-5.1.23-bin.jar</span><br></pre></td></tr></table></figure>

<h1 id="三、JDBC编程基本操作"><a href="#三、JDBC编程基本操作" class="headerlink" title="三、JDBC编程基本操作"></a>三、JDBC编程基本操作</h1><h2 id="I-JDBC编程六步："><a href="#I-JDBC编程六步：" class="headerlink" title="I. JDBC编程六步："></a>I. JDBC编程六步：</h2><ul>
<li>第一步：注册驱动（告诉java程序，即将要连接的是哪个品牌的数据库）</li>
<li>第二步：获取连接（表示JVM的进程和数据库进程之间的通道打开了，属于<strong>进程之间的通信</strong>，重量级的，使用完成后要关闭）</li>
<li>第三步：获取数据库操作对象（专门执行sql语句的对象）</li>
<li>第四步：执行SQL语句（DQL、DML…）</li>
<li>第五步：处理查询结果集（只有第四步执行的是select语句的时候，才有这第五步查询结果集）</li>
<li>第六步：释放资源（使用完资源后要关闭资源。java和数据库属于进程间的通信）</li>
</ul>
<h2 id="II-JDBC编程六步的实现："><a href="#II-JDBC编程六步的实现：" class="headerlink" title="II. JDBC编程六步的实现："></a>II. JDBC编程六步的实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line">pubic <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            </span><br><span class="line">           <span class="comment">// 1、注册驱动</span></span><br><span class="line">            <span class="comment">// 多态，父类型引用指向子类型对象</span></span><br><span class="line">            Driver driver = <span class="keyword">new</span> com.mysql.jdbc.Driver();</span><br><span class="line">            DriverManager.registerDriver(driver);</span><br><span class="line">            </span><br><span class="line">           <span class="comment">// 2、获取连接</span></span><br><span class="line">            <span class="comment">// url：协议+IP+PORT+资源名</span></span><br><span class="line">            <span class="comment">// 协议：数据传送格式</span></span><br><span class="line">            String url = <span class="string">"jdbc:mysql://127.0.0.1:3306/bjpowernode"</span>;</span><br><span class="line">            String user = <span class="string">"root"</span>;</span><br><span class="line">            String password = <span class="string">"333"</span>;</span><br><span class="line">            Connection conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">            </span><br><span class="line">           <span class="comment">// 3、获取数据库操作对象(专门执行sql语句)</span></span><br><span class="line">            Statement stmt = conn.createStatement();</span><br><span class="line">            </span><br><span class="line">           <span class="comment">// 4、执行sql语句</span></span><br><span class="line">            String sql = <span class="string">"insert into dept(deptno,dname,loc) values(50,'人事部','北京')"</span>;</span><br><span class="line">            <span class="comment">//专门执行DML语句的（insert、delete、update）</span></span><br><span class="line">            <span class="comment">//返回值是：影响数据库中的记录条数</span></span><br><span class="line">            <span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line">            System.out.println(count == <span class="number">1</span> ? <span class="string">"保存成功"</span> : <span class="string">"保存失败"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 5、处理查询结果集</span></span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         	<span class="comment">// 6、释放资源 （遵循从小到大依次关闭）  </span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="III-注册驱动的第二种写法-常用）"><a href="#III-注册驱动的第二种写法-常用）" class="headerlink" title="III. 注册驱动的第二种写法(常用）"></a>III. 注册驱动的第二种写法(常用）</h2><ul>
<li>由于com.mysql.jdbc.Driver类中有下列静态代码块，因此只需要加载该类就能注册驱动。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">    &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册驱动的第二种方式：反射机制加载类</span></span><br><span class="line"><span class="comment">// 为什么这种方式常用：因为参数是一个字符串，字符串可以写到xxx.properties之中</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IV-将数据库连接的所有信息配置到配置文件中去"><a href="#IV-将数据库连接的所有信息配置到配置文件中去" class="headerlink" title="IV. 将数据库连接的所有信息配置到配置文件中去"></a>IV. 将数据库连接的所有信息配置到配置文件中去</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># jdbc.properties 配置文件</span><br><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/bjpowernode</span><br><span class="line">user=root</span><br><span class="line">password=131212</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过资源绑定器获取参数</span></span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        String driver = bundle.getString(<span class="string">"driver"</span>);</span><br><span class="line">        String url = bundle.getString(<span class="string">"url"</span>);</span><br><span class="line">        String user = bundle.getString(<span class="string">"user"</span>);</span><br><span class="line">        String password = bundle.getString(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//2、建立连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">            <span class="comment">//3、创建数据库执行对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//4、执行sql语句</span></span><br><span class="line">            String sql = <span class="string">"insert into dept values(69,'交通部','shanghai')"</span>;</span><br><span class="line">            <span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line">            System.out.println(count == <span class="number">1</span> ? <span class="string">"执行成功"</span> : <span class="string">"执行失败"</span>);</span><br><span class="line">            <span class="comment">//5、处理查询结果集</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6、释放资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="V-处理查询结果集"><a href="#V-处理查询结果集" class="headerlink" title="V. 处理查询结果集"></a>V. 处理查询结果集</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCQueryTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        String driver = bundle.getString(<span class="string">"driver"</span>);</span><br><span class="line">        String url = bundle.getString(<span class="string">"url"</span>);</span><br><span class="line">        String user = bundle.getString(<span class="string">"user"</span>);</span><br><span class="line">        String password = bundle.getString(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>; <span class="comment">//添加这个结果集，要记得关闭</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            String sql = <span class="string">"select empno,ename,sal from emp"</span>;</span><br><span class="line">            rs = stmt.executeQuery(sql); <span class="comment">//获得结果集</span></span><br><span class="line">            <span class="comment">//处理查询结果集</span></span><br><span class="line">            <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">                <span class="comment">//也可以写数字1,2,3 ... ，也可以getInt()</span></span><br><span class="line">                String empno = rs.getString(<span class="string">"empno"</span>); </span><br><span class="line">                String ename = rs.getString(<span class="string">"ename"</span>);</span><br><span class="line">                String sal = rs.getString(<span class="string">"sal"</span>);</span><br><span class="line">                System.out.println(empno + <span class="string">","</span> + ename + <span class="string">","</span> + sal);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    rs.close(); <span class="comment">//关闭结果集</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、JDBC编程实战"><a href="#四、JDBC编程实战" class="headerlink" title="四、JDBC编程实战"></a>四、JDBC编程实战</h1><h2 id="I-模拟用户登录"><a href="#I-模拟用户登录" class="headerlink" title="I. 模拟用户登录"></a>I. 模拟用户登录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCLoginTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化界面</span></span><br><span class="line">        Map&lt;String,String&gt; userLogin = initUI();</span><br><span class="line">        <span class="comment">//登录验证</span></span><br><span class="line">        Boolean flag = Login(userLogin);</span><br><span class="line">        System.out.println(flag == <span class="keyword">true</span> ? <span class="string">"登录成功"</span> : <span class="string">"登陆失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,String&gt; <span class="title">initUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; userLogin = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入用户名："</span>);</span><br><span class="line">        String username = input.nextLine();</span><br><span class="line">        userLogin.put(<span class="string">"username"</span>,username);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line">        String password = input.nextLine();</span><br><span class="line">        userLogin.put(<span class="string">"password"</span>,password);</span><br><span class="line"></span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userLogin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">Login</span><span class="params">(Map&lt;String,String&gt; userLogin)</span> </span>&#123;</span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        String driver = bundle.getString(<span class="string">"driver"</span>);</span><br><span class="line">        String url = bundle.getString(<span class="string">"url"</span>);</span><br><span class="line">        String user = bundle.getString(<span class="string">"user"</span>);</span><br><span class="line">        String password = bundle.getString(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        Boolean flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//2、建立连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">            <span class="comment">//3、创建数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//4、执行sql语句</span></span><br><span class="line">             String sql = <span class="string">"select * from t_login where user = '"</span> + userLogin.get(<span class="string">"username"</span>) + <span class="string">"' and password = '"</span> + userLogin.get(<span class="string">"password"</span>) + <span class="string">"'"</span>;</span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">//5、处理结果集</span></span><br><span class="line">            <span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">               flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6、释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(rs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stmt == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="II-SQL注入的演示和排除"><a href="#II-SQL注入的演示和排除" class="headerlink" title="II. SQL注入的演示和排除"></a>II. SQL注入的演示和排除</h2><h3 id="1-sql注入："><a href="#1-sql注入：" class="headerlink" title="[1] sql注入："></a>[1] sql注入：</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># sql注入演示</span><br><span class="line">请输入用户名：</span><br><span class="line">dasf</span><br><span class="line">请输入密码：</span><br><span class="line">dasf' or '<span class="number">1</span>'='<span class="number">1</span></span><br><span class="line">登录成功</span><br></pre></td></tr></table></figure>

<h3 id="2-sql注入原理："><a href="#2-sql注入原理：" class="headerlink" title="[2] sql注入原理："></a>[2] sql注入原理：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将上述的用户名密码进行拼接后：发现&apos;1&apos;=&apos;1&apos;恒成立。</span><br><span class="line">select * from t_login where user = &apos;dasf&apos; and password = &apos;dasf&apos; or &apos;1&apos;=&apos;1&apos;；</span><br></pre></td></tr></table></figure>

<ul>
<li>导致sql注入的根本原因：<ul>
<li>用户输入的信息中含有sql语句的关键字，并且这些关键字参与sql的编译过程，导致sql语句的愿意被扭曲，进而sql注入。</li>
</ul>
</li>
</ul>
<h3 id="3-防止sql注入的办法："><a href="#3-防止sql注入的办法：" class="headerlink" title="[3] 防止sql注入的办法："></a>[3] 防止sql注入的办法：</h3><ul>
<li>使用<strong>预编译的数据库操作对象PreparedStatement</strong>。</li>
<li>PreparedStatement继承了Statement。</li>
<li>原理是：预先对sql语句的框架进行编译，然后再给sql语句传值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">Login</span><span class="params">(Map&lt;String,String&gt; userLogin)</span> </span>&#123;</span><br><span class="line">    ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">    String driver = bundle.getString(<span class="string">"driver"</span>);</span><br><span class="line">    String url = bundle.getString(<span class="string">"url"</span>);</span><br><span class="line">    String user = bundle.getString(<span class="string">"user"</span>);</span><br><span class="line">    String password = bundle.getString(<span class="string">"password"</span>);</span><br><span class="line">    </span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement ps = <span class="keyword">null</span>; <span class="comment">//改动点！！！</span></span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    Boolean flag = <span class="keyword">false</span>;</span><br><span class="line">    String username = userLogin.get(<span class="string">"username"</span>);</span><br><span class="line">    String password = userLogin.get(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1、注册驱动</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2、建立连接</span></span><br><span class="line">        conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3、获取预编译的数据库操作对象</span></span><br><span class="line">        String sql = <span class="string">"select * from t_login where user = ? and password = ?"</span>; <span class="comment">// 改动点！！！"?"表示占位符:占位符不使用单引号括起来</span></span><br><span class="line">        <span class="comment">//程序执行到此，会发送sql语句框子给DBMS，然后DBMS进行sql语句的预先编译。</span></span><br><span class="line">        ps = conn.prepareStatement(sql); <span class="comment">//改动点</span></span><br><span class="line">        <span class="comment">//给占位符？传值（第一个问号下标是1，第二个是2...)</span></span><br><span class="line">        ps.setString(<span class="number">1</span>,username);</span><br><span class="line">        ps.setString(<span class="number">2</span>,username);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4、执行sql语句</span></span><br><span class="line">        rs = ps.executeQuery();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5、处理结果集</span></span><br><span class="line">        <span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//6、释放资源</span></span><br><span class="line">        <span class="keyword">if</span>(rs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ps == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-PreparedStatement和Statement的区别"><a href="#4-PreparedStatement和Statement的区别" class="headerlink" title="[4] PreparedStatement和Statement的区别"></a>[4] PreparedStatement和Statement的区别</h3><ol>
<li>Statement存在sql注入问题，而PreparedStatement解决了sql注入。</li>
<li>PreparedStatement效率高。<strong>Statement的特点是编译一次执行一次。PreparedStatement是编译一次可执行多次</strong>。</li>
<li>PreparedStatement会在编译阶段做类型的安全检查。</li>
</ol>
<ul>
<li>综上所述，使用PreparedStatement较多。但是业务方面要求可以进行sql语句拼接的话需要Statement。</li>
</ul>
<h2 id="III-PreparedStatement完成增删改"><a href="#III-PreparedStatement完成增删改" class="headerlink" title="III. PreparedStatement完成增删改"></a>III. PreparedStatement完成增删改</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCPreparedStatementTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        String driver = bundle.getString(<span class="string">"driver"</span>);</span><br><span class="line">        String url = bundle.getString(<span class="string">"url"</span>);</span><br><span class="line">        String user = bundle.getString(<span class="string">"user"</span>);</span><br><span class="line">        String password = bundle.getString(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//2、建立连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">            <span class="comment">//3、获取预编译数据库操纵对象</span></span><br><span class="line">            String sql = <span class="string">"insert into t_login values(?,?)"</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//4、处理sql语句</span></span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">"luliang"</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>,<span class="string">"131212"</span>);</span><br><span class="line">            <span class="keyword">int</span> count = ps.executeUpdate();</span><br><span class="line">            System.out.println(count == <span class="number">1</span> ? <span class="string">"插入成功"</span> : <span class="string">"插入失败"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、JDBC事务机制"><a href="#五、JDBC事务机制" class="headerlink" title="五、JDBC事务机制"></a>五、JDBC事务机制</h1><h2 id="I-JDBC事务机制的特性"><a href="#I-JDBC事务机制的特性" class="headerlink" title="I. JDBC事务机制的特性"></a>I. JDBC事务机制的特性</h2><ul>
<li>jdbc中的事务是自动提交的<ul>
<li>只要执行任意一条DML语句，则自动提交一次。</li>
<li>但是实际的业务中，通常都是N条DML语句共同联合才能完成的，必须保证这些DML语句在同一事务中同时成功或同时失败。</li>
</ul>
</li>
</ul>
<h2 id="II-事务自动提交的演示"><a href="#II-事务自动提交的演示" class="headerlink" title="II. 事务自动提交的演示"></a>II. 事务自动提交的演示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTransactionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        String driver = bundle.getString(<span class="string">"driver"</span>);</span><br><span class="line">        String url = bundle.getString(<span class="string">"url"</span>);</span><br><span class="line">        String user = bundle.getString(<span class="string">"user"</span>);</span><br><span class="line">        String  password = bundle.getString(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">            String sql = <span class="string">"update t_login set password = ? where user = ?"</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">"666"</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>,<span class="string">"luliang"</span>);</span><br><span class="line">            <span class="keyword">int</span> count1 = ps.executeUpdate();</span><br><span class="line">            System.out.println(count1); <span class="comment">//在此设置断点，以debug方式运行，发现数据库中已经把lulinag的password改为了666，说明了JDBC的自动提交机制</span></span><br><span class="line"></span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">"000"</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>,<span class="string">"wangwu"</span>);</span><br><span class="line">            <span class="keyword">int</span> count2 = ps.executeUpdate();</span><br><span class="line">            System.out.println(count2);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="III-JDBC事务手动提交"><a href="#III-JDBC事务手动提交" class="headerlink" title="III. JDBC事务手动提交"></a>III. JDBC事务手动提交</h2><h3 id="1-要点："><a href="#1-要点：" class="headerlink" title="[1] 要点："></a>[1] 要点：</h3><ul>
<li>conn.setAutoCommit(false);</li>
<li>conn.commit();</li>
<li>conn.rollback();</li>
</ul>
<h3 id="2-银行账户转账："><a href="#2-银行账户转账：" class="headerlink" title="[2] 银行账户转账："></a>[2] 银行账户转账：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * .sql文件</span></span><br><span class="line"><span class="comment"> * drop if exists t_account;</span></span><br><span class="line"><span class="comment"> * create t_account (</span></span><br><span class="line"><span class="comment"> *      id int primary key,</span></span><br><span class="line"><span class="comment"> *      balance bigint</span></span><br><span class="line"><span class="comment"> *      );</span></span><br><span class="line"><span class="comment"> * insert into t_account values(1,20000);</span></span><br><span class="line"><span class="comment"> * insert into t_account values(2,0);</span></span><br><span class="line"><span class="comment"> * select * from t_account;</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        String driver = bundle.getString(<span class="string">"driver"</span>);</span><br><span class="line">        String url = bundle.getString(<span class="string">"url"</span>);</span><br><span class="line">        String user = bundle.getString(<span class="string">"user"</span>);</span><br><span class="line">        String password = bundle.getString(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>); <span class="comment">// 设置自动提交关闭，手动提交开启</span></span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">"update t_account set balance = ? where id = ?"</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">"10000"</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>,<span class="string">"1"</span>);</span><br><span class="line">            <span class="keyword">int</span> count = ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">"10000"</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>,<span class="string">"2"</span>);</span><br><span class="line">            count += ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">            System.out.println(count == <span class="number">2</span> ? <span class="string">"转账成功"</span> : <span class="string">"转账失败"</span>);</span><br><span class="line"></span><br><span class="line">            conn.commit(); <span class="comment">//提交事务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.rollback(); <span class="comment">//若出错则回滚</span></span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、JDBC工具类：DBUtil"><a href="#六、JDBC工具类：DBUtil" class="headerlink" title="六、JDBC工具类：DBUtil"></a>六、JDBC工具类：DBUtil</h1><h2 id="I-工具类的建立"><a href="#I-工具类的建立" class="headerlink" title="I. 工具类的建立"></a>I. 工具类的建立</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DBUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工具类中的构造方法都是私有的。</span></span><br><span class="line"><span class="comment">     * 因为工具类中的方法都是静态的，不需要new对象，直接类名调用</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DBUtil</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块只在类加载的时候执行，并且只执行一次</span></span><br><span class="line">    <span class="keyword">static</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/bjpowernode"</span>,<span class="string">"root"</span>,<span class="string">"131212"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement ps, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="II-测试JDBCUtil是否好用"><a href="#II-测试JDBCUtil是否好用" class="headerlink" title="II. 测试JDBCUtil是否好用"></a>II. 测试JDBCUtil是否好用</h2><h3 id="1-编写工具类："><a href="#1-编写工具类：" class="headerlink" title="[1] 编写工具类："></a>[1] 编写工具类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DBUtil;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工具类中的构造方法都是私有的。</span></span><br><span class="line"><span class="comment">     * 因为工具类中的方法都是静态的，不需要new对象，直接类名调用</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DBUtil</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块只在类加载的时候执行，并且只执行一次</span></span><br><span class="line">    <span class="keyword">static</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/bjpowernode"</span>,<span class="string">"root"</span>,<span class="string">"131212"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement ps, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-测试工具类："><a href="#2-测试工具类：" class="headerlink" title="[2] 测试工具类："></a>[2] 测试工具类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> DBUtil.DBUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtilTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DBUtil.getConnection();</span><br><span class="line">            String sql = <span class="string">"select ename from emp where ename like ?"</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">"_A%"</span>);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">"ename"</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Note-of-MySQL-2-事务、索引、范式]]></title>
      <url>/2020/04/30/Note-of-MySQL-2/</url>
      <content type="html"><![CDATA[<h1 id="五、事务"><a href="#五、事务" class="headerlink" title="五、事务"></a>五、事务</h1><a id="more"></a>

<h2 id="I-事务概述"><a href="#I-事务概述" class="headerlink" title="I. 事务概述"></a>I. 事务概述</h2><ul>
<li><p>一个事务是一个完整的业务逻辑单元，不可再分。</p>
<ul>
<li><p>比如：银行账户转账，从A账户转向B账户10000元，需要执行两条语句。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">update t_act</span><br><span class="line">set balance = balance - 10000 </span><br><span class="line">where actno = &apos;act-001&apos;;</span><br><span class="line">update t_act</span><br><span class="line">set balance = balance + 10000 </span><br><span class="line">where actno = &apos;act-002&apos;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>以上两条DML语句必须同时成功，或者同时失败，不能一条成功一条失败。</p>
</li>
<li><p>要想保证以上两条同时成功或失败，就需要使用事务。</p>
</li>
<li><p>假设所有的业务都只用一条DML语句搞定，就不需要事务机制了。但实际上一个事务通常需要多条DML语句！</p>
</li>
</ul>
</li>
<li><p><strong>注意：与事物相关的只有DML语句！</strong>（insert，update，delete）</p>
<ul>
<li>因为这三条语句都是和数据库表中的“数据”相关的。</li>
<li>事务的存在是为了保证数据的完整性，安全性。</li>
</ul>
</li>
</ul>
<h2 id="II-事务的原理"><a href="#II-事务的原理" class="headerlink" title="II. 事务的原理"></a>II. 事务的原理</h2><ul>
<li><p>假设一个事情：先执行一条insert，再执行一条update，最后执行一条delete。</p>
<ul>
<li><p>事务机制开始：</p>
</li>
<li><p>执行insert语句，执行成功后，会将这个记录到数据库的操作历史中，并不会向文件中保存一条数据，不会真正修改到硬盘上。</p>
</li>
<li><p>执行update语句，执行成功后，同理只记录一下历史操作。</p>
</li>
<li><p>执行insert语句，同理也是只记录一下历史操作【记录到缓存】。</p>
</li>
<li><p>提交事务 commit 或者回滚事务 rollback（结束）。</p>
</li>
</ul>
</li>
<li><p>结论：<strong>执行每条DML语句的时候，只是记录到缓存中，只有整个事务结束后，才记录到文件（硬盘）上</strong>。这不像DDL语句，会上来就直接记录到文件（硬盘）上。</p>
</li>
</ul>
<h2 id="III-事务的特性"><a href="#III-事务的特性" class="headerlink" title="III. 事务的特性"></a>III. 事务的特性</h2><ul>
<li>事务的四大特性：ACID<ul>
<li><strong>原子性（atomicity）</strong>：事务是最小的工作单元不可再分。</li>
<li><strong>一致性（consistency）</strong>：事务必须保证多条DML语句同时成功或者同时失败。</li>
<li><strong>隔离性（isolation）</strong>：事务A和事务B具有隔离。</li>
<li><strong>持久性（durability）</strong>：最终数据必须持久化到硬盘文件中，事务才算成功的结束。</li>
</ul>
</li>
<li>事务之间的隔离性：<ul>
<li>第一级别：读未提交（read uncommitted）<ul>
<li>对方事务还没有提交，我们当前事务可以读取到对方未提交的数据。</li>
<li>读未提交存在脏读（dirty read）现象，表示读到了脏数据。</li>
</ul>
</li>
<li>第二级别（oracle默认）：读已提交（read committed）<ul>
<li>对方事务提交后的数据我方可以读取到。</li>
<li>读已提交存在的问题是：不可重复读。（做不到一个数据从头到尾读到的数据是一样的）</li>
<li>这种隔离级别解决了脏读现象。</li>
</ul>
</li>
<li>第三级别（mysql默认）：可重复读（repeatable read）<ul>
<li>解决了不可重复读的问题。</li>
<li>存在的问题：读取到的数据是幻象，即<strong>备份</strong>。</li>
</ul>
</li>
<li>第四级别：序列化/串行化<ul>
<li>解决了所有问题，效率低，需要排队。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="IV-演示事务"><a href="#IV-演示事务" class="headerlink" title="IV. 演示事务"></a>IV. 演示事务</h2><h3 id="1-演示事务commit、rollback："><a href="#1-演示事务commit、rollback：" class="headerlink" title="[1] 演示事务commit、rollback："></a>[1] 演示事务commit、rollback：</h3><ul>
<li><p>mysql事务默认情况下自动提交。（只要任意执行一条DML语句则提交一次）</p>
</li>
<li><p>如何关闭自动提交：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start transaction；</span><br></pre></td></tr></table></figure>
</li>
<li><p>演示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 创建表</span><br><span class="line">drop table if exists t_user;</span><br><span class="line">create table t_user(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">    username varchar(255)</span><br><span class="line">);</span><br><span class="line"># 开启事务</span><br><span class="line">start transaction;</span><br><span class="line"># 插入语句</span><br><span class="line">insert into t_user values(1,&apos;zhangsan&apos;);</span><br><span class="line">insert into t_user values(2,&apos;lisi&apos;);</span><br><span class="line"># 回滚</span><br><span class="line">rollback;</span><br><span class="line"># 查看</span><br><span class="line">select * from t_user;</span><br><span class="line">/* Empty set (0.00 sec) */</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 开启事务</span><br><span class="line">start transaction;</span><br><span class="line"># 插入语句</span><br><span class="line">insert into t_user values(1,&apos;zhangsan&apos;);</span><br><span class="line">insert into t_user values(2,&apos;lisi&apos;);</span><br><span class="line"># 提交</span><br><span class="line">commit;</span><br><span class="line"># 查看</span><br><span class="line">select * from t_user;</span><br><span class="line">/*+----+----------+</span><br><span class="line">  | id | username |</span><br><span class="line">  +----+----------+</span><br><span class="line">  |  1 | zhangsan |</span><br><span class="line">  |  2 | lisi     |</span><br><span class="line">  +----+----------+*/</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-演示读未提交："><a href="#2-演示读未提交：" class="headerlink" title="[2] 演示读未提交："></a>[2] 演示读未提交：</h3><ul>
<li>开两个窗口，都登录mysql：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 窗口一操作：</span><br><span class="line"># 设置事务的隔离级别：</span><br><span class="line">set global transaction isolation level read uncommitted;</span><br><span class="line"># 查看事务的全局隔离级别：</span><br><span class="line">select @@global.tx_isolation;</span><br></pre></td></tr></table></figure>

<ul>
<li>两个窗口都重新登录：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 窗口一操作，未提交或回滚：</span><br><span class="line">start transaction；</span><br><span class="line">insert into t_user(username) values(&apos;SMITH&apos;);</span><br><span class="line"># 窗口二操作：</span><br><span class="line">start transaction；</span><br><span class="line">select * from t_user;</span><br><span class="line">/*+----+----------+</span><br><span class="line">  | id | username |</span><br><span class="line">  +----+----------+</span><br><span class="line">  |  1 | SMITH    |</span><br><span class="line">  +----+----------+*/</span><br></pre></td></tr></table></figure>

<h3 id="3-演示读已提交："><a href="#3-演示读已提交：" class="headerlink" title="[3] 演示读已提交："></a>[3] 演示读已提交：</h3><ul>
<li>开两个窗口，都登录mysql：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 窗口一操作：</span><br><span class="line"># 设置事务的隔离级别：</span><br><span class="line">set global transaction isolation level read committed;</span><br><span class="line"># 查看事务的全局隔离级别：</span><br><span class="line">select @@global.tx_isolation;</span><br></pre></td></tr></table></figure>

<ul>
<li>两个窗口退出后再次登录：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 窗口一操作，提交：</span><br><span class="line">start transaction；</span><br><span class="line">insert into t_user(username) values(&apos;HELLO&apos;);</span><br><span class="line">commit;</span><br><span class="line"># 窗口二操作：</span><br><span class="line">start transaction；</span><br><span class="line">select * from t_user;</span><br><span class="line">/*+----+----------+</span><br><span class="line">  | id | username |</span><br><span class="line">  +----+----------+</span><br><span class="line">  |  1 | SMITH    |</span><br><span class="line">  |  2 | HELLO    |</span><br><span class="line">  +----+----------+*/</span><br></pre></td></tr></table></figure>

<h3 id="4-演示可重复读："><a href="#4-演示可重复读：" class="headerlink" title="[4] 演示可重复读："></a>[4] 演示可重复读：</h3><ul>
<li>开两个窗口，都登录mysql：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 窗口一操作：</span><br><span class="line"># 设置事务的隔离级别：</span><br><span class="line">set global transaction isolation level repeatable read;</span><br><span class="line"># 查看事务的全局隔离级别：</span><br><span class="line">select @@global.tx_isolation;</span><br></pre></td></tr></table></figure>

<ul>
<li>两个窗口退出后再次登录：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 窗口一操作，提交：</span><br><span class="line">start transaction；</span><br><span class="line">delete from t_user;</span><br><span class="line">commit;</span><br><span class="line"># 窗口二操作：</span><br><span class="line">start transaction；</span><br><span class="line">select * from t_user;</span><br><span class="line">/*+----+----------+</span><br><span class="line">  | id | username |</span><br><span class="line">  +----+----------+</span><br><span class="line">  |  1 | SMITH    |</span><br><span class="line">  |  2 | HELLO    |</span><br><span class="line">  +----+----------+*/</span><br><span class="line"># 其实读到的是备份数据，不是原表数据</span><br></pre></td></tr></table></figure>

<h3 id="5-演示序列化-串行化："><a href="#5-演示序列化-串行化：" class="headerlink" title="[5] 演示序列化/串行化："></a>[5] 演示序列化/串行化：</h3><ul>
<li>开两个窗口，都登录mysql：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 窗口一操作：</span><br><span class="line"># 设置事务的隔离级别：</span><br><span class="line">set global transaction isolation level serializable;</span><br><span class="line"># 查看事务的全局隔离级别：</span><br><span class="line">select @@global.tx_isolation;</span><br></pre></td></tr></table></figure>

<ul>
<li>两个窗口退出后再次登录：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 窗口一操作，未提交提交：</span><br><span class="line">start transaction；</span><br><span class="line">insert into t_user(username) values(&apos;HEHE&apos;);</span><br><span class="line"># 窗口二操作：</span><br><span class="line">start transaction；</span><br><span class="line">select * from t_user;</span><br><span class="line">/*窗口二卡住了*/</span><br><span class="line"># 窗口一操作，提交：</span><br><span class="line">commit;</span><br><span class="line"># 窗口二马上执行select * from t_user;：</span><br><span class="line">/*+----+----------+</span><br><span class="line">  | id | username |</span><br><span class="line">  +----+----------+</span><br><span class="line">  |  1 | SMITH    |</span><br><span class="line">  |  2 | HELLO    |</span><br><span class="line">  |  3 | HEHE     |</span><br><span class="line">  +----+----------+*/</span><br></pre></td></tr></table></figure>

<h1 id="六、索引"><a href="#六、索引" class="headerlink" title="六、索引"></a>六、索引</h1><h2 id="I-索引概念"><a href="#I-索引概念" class="headerlink" title="I. 索引概念"></a>I. 索引概念</h2><h3 id="1-索引是什么，有什么用？"><a href="#1-索引是什么，有什么用？" class="headerlink" title="[1] 索引是什么，有什么用？"></a>[1] 索引是什么，有什么用？</h3><ul>
<li>索引相当于一本书的目录，通过目录可以快速找到对应的资源。</li>
<li>数据库有两种检索方式：<ul>
<li>第一种：全表扫描</li>
<li>第二种：根据索引检索（效率很高）</li>
</ul>
</li>
<li>为什么提高检索效率？<ul>
<li>缩小了检索范围。</li>
</ul>
</li>
<li>索引虽然也可以提高检索效率，但是不能随意添加索引，因为索引也是数据库中的对象，也需要数据库的不断维护，有维护成本。<strong>若表中的数据经常被修改，这样就不适合添加索引，因为数据一旦修改，索引要重新排序，进行维护</strong>。</li>
<li>添加索引是<strong>给某字段，或者某些字段添加索引</strong>。</li>
</ul>
<h3 id="2-什么时候考虑给字段添加索引？"><a href="#2-什么时候考虑给字段添加索引？" class="headerlink" title="[2] 什么时候考虑给字段添加索引？"></a>[2] 什么时候考虑给字段添加索引？</h3><ul>
<li>1、数据量庞大</li>
<li>2、该字段很少的DML操作（因为字段进行修改，索引也需要维护）</li>
<li>3、该字段经常出现在where子句中（经常根据哪个字段查询）</li>
</ul>
<h3 id="3-注意：主键和有unique约束的字段自动添加索引。"><a href="#3-注意：主键和有unique约束的字段自动添加索引。" class="headerlink" title="[3] 注意：主键和有unique约束的字段自动添加索引。"></a>[3] 注意：主键和有unique约束的字段自动添加索引。</h3><ul>
<li>因此根据主键查询效率高。</li>
</ul>
<h2 id="II-索引的实现"><a href="#II-索引的实现" class="headerlink" title="II. 索引的实现"></a>II. 索引的实现</h2><ul>
<li>查看sql语句执行计划：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select ename,sal from emp where sal=5000;</span><br></pre></td></tr></table></figure>

<img src="/2020/04/30/Note-of-MySQL-2/4.png" title="4-1">

<ul>
<li>给薪资添加索引：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index emp_sal_index on emp(sal);</span><br></pre></td></tr></table></figure>

<img src="/2020/04/30/Note-of-MySQL-2/5.png" title="5-1">

<ul>
<li>删除索引对象：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index emp_sal_index on emp(sal);</span><br></pre></td></tr></table></figure>

<h2 id="III-索引底层采用的数据结构和原理"><a href="#III-索引底层采用的数据结构和原理" class="headerlink" title="III. 索引底层采用的数据结构和原理"></a>III. 索引底层采用的数据结构和原理</h2><ul>
<li><p>数据结构：B + tree</p>
</li>
<li><p>实现原理：</p>
<ul>
<li>通过BTree缩小扫描范围，底层索引进行了排序，分区，索引会携带数据在表中的“物理地址”，最终通过索引检索到数据之后，获取到关联的物理地址，通过物理地址定位表中的数据，效率最高的。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 如以下转换：</span><br><span class="line">select ename from emp where ename = &apos;SMITH&apos;;</span><br><span class="line"># 通过索引转换为：</span><br><span class="line">select ename from emp where 物理地址 = 0x3;</span><br></pre></td></tr></table></figure>
</li>
<li><p>图解：</p>
<ul>
<li>自己对下图的理解：<strong>在对某字段使用create index命令后，会在文件或磁盘上创建一个索引，索引采用的数据结构是B+树，而B+树是有序的，并且存有某数据的物理地址；因此在查询该字段的时候会迅速通过索引找到待查询的关键字的物理地址，通过物理地址定位到表的实际位置，完成查询</strong>。</li>
</ul>
</li>
</ul>
<img src="/2020/04/30/Note-of-MySQL-2/6.png" title="6-1">

<h2 id="IV-索引的分类"><a href="#IV-索引的分类" class="headerlink" title="IV. 索引的分类"></a>IV. 索引的分类</h2><ul>
<li>单一索引：给单个索引添加索引。</li>
<li>复合索引：多个字段合起来添加索引。</li>
<li>主键索引：主键会自动添加索引。</li>
<li>唯一索引：有unique约束的字段会自动添加索引。</li>
</ul>
<h2 id="V-索引失效"><a href="#V-索引失效" class="headerlink" title="V. 索引失效"></a>V. 索引失效</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 如以下模糊查询会索引失效，不知道第一个字母是什么</span><br><span class="line"># 因此模糊查询第一个通配符是百分号的时候，索引失效</span><br><span class="line">select ename from emp where ename like &apos;%A%&apos;;</span><br></pre></td></tr></table></figure>

<h1 id="七、视图"><a href="#七、视图" class="headerlink" title="七、视图"></a>七、视图</h1><h2 id="I-视图概述"><a href="#I-视图概述" class="headerlink" title="I. 视图概述"></a>I. 视图概述</h2><ul>
<li><p>什么是视图？</p>
<ul>
<li>站在不同的角度去看到数据。（同一张表的数据，通过不同的角度去看待）。</li>
</ul>
</li>
<li><p>如何创建、删除视图？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create view myview as select empno,ename from emp;</span><br><span class="line">drop view myview;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对视图进行增删改查（crud）会影响原表数据。（通过视图影响原表数据的，不是直接操作原表）</p>
</li>
<li><p>只有<strong>DQL语句</strong>才能以视图对象的方式创建出来。</p>
</li>
</ul>
<h2 id="II-视图的基本操作"><a href="#II-视图的基本操作" class="headerlink" title="II. 视图的基本操作"></a>II. 视图的基本操作</h2><h3 id="1-操作演示："><a href="#1-操作演示：" class="headerlink" title="[1] 操作演示："></a>[1] 操作演示：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 对视图进行增删改会影响原表</span><br><span class="line">create table emp_bak as select * from emp;</span><br><span class="line">create view myview as select empno,ename,sal from emp_bak;</span><br><span class="line"># 通过修改视图，修改原表数据</span><br><span class="line">update myview set ename=&apos;hehe&apos;,sal=1 where empno=7369;</span><br><span class="line"># 通过删除视图，删除原表数据</span><br><span class="line">delete from myview where empno =&apos;7369&apos;;</span><br></pre></td></tr></table></figure>

<h3 id="2-视图的作用："><a href="#2-视图的作用：" class="headerlink" title="[2] 视图的作用："></a>[2] 视图的作用：</h3><ul>
<li><strong>视图可以隐藏表的实现细节</strong>。保密级别较高的系统，数据库只对外提供相关的视图。java程序员只对视图对象进行crud。</li>
</ul>
<h1 id="八、其他知识点"><a href="#八、其他知识点" class="headerlink" title="八、其他知识点"></a>八、其他知识点</h1><h2 id="I-DBA命令"><a href="#I-DBA命令" class="headerlink" title="I. DBA命令"></a>I. DBA命令</h2><h3 id="1-将数据库当中的数据导出："><a href="#1-将数据库当中的数据导出：" class="headerlink" title="[1] 将数据库当中的数据导出："></a>[1] 将数据库当中的数据导出：</h3><ul>
<li>在Windows的dos命令窗口中（未登录的时候）输入：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># &gt;号表示输出</span><br><span class="line"># 导出整个库</span><br><span class="line">mysqldump bjpowernode&gt;D:\bjpowernode.sql -uroot -p123</span><br><span class="line"># 导出指定表</span><br><span class="line">mysqldump bjpowernode emp&gt;D:\bjpowernode.sql -uroot -p123</span><br></pre></td></tr></table></figure>

<h3 id="2-导入数据："><a href="#2-导入数据：" class="headerlink" title="[2] 导入数据："></a>[2] 导入数据：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database bjpowernode;</span><br><span class="line">use bjpowernode;</span><br><span class="line">source D:\bjpowernode.sql</span><br></pre></td></tr></table></figure>

<h2 id="II-重点：数据库设计三范式（面试常问）"><a href="#II-重点：数据库设计三范式（面试常问）" class="headerlink" title="II. 重点：数据库设计三范式（面试常问）"></a>II. 重点：数据库设计三范式（面试常问）</h2><h3 id="1-什么是设计三范式："><a href="#1-什么是设计三范式：" class="headerlink" title="[1] 什么是设计三范式："></a>[1] 什么是设计三范式：</h3><ul>
<li><p>设计表的依据。按照这三个凡是设计的表<strong>不会出现数据冗余</strong>。</p>
</li>
<li><p>三范式包括：</p>
<ul>
<li><p>第一范式：任何一张表都应该有<strong>主键</strong>，并且每一个字段<strong>原子性</strong>不可再分。</p>
</li>
<li><p>第二范式：建立在第一范式的基础之上，<strong>所有非主键字段完全依赖主键，不能产生部分依赖</strong>。</p>
<ul>
<li>如一张表四个字段：学生编号，学生姓名，教师编号，教师姓名，主键是（学生编号，教师编号），字段学生姓名只依赖学生编号，这就是部分依赖。容易产生冗余。</li>
<li>解决方式：创建三张表，关系表两个外键。<ul>
<li>表一：学生表（学生编号pk，学生姓名）</li>
<li>表二：教师表（教师编号pk，教师姓名）</li>
<li>表三：学生–教师关系表（关系编号pk，学生编号fk，教师编号fk）</li>
</ul>
</li>
<li>口诀：<strong>多对多？三张表，关系表两个外键。</strong></li>
</ul>
</li>
<li><p>第三范式：建立在第二范式的基础之上，所有<strong>非主键字段直接依赖主键，不能产生传递依赖</strong>。</p>
<ul>
<li><p>如表：学生编号pk，学生姓名，班级编号，班级名称。</p>
</li>
<li><p>问题：班级名称依赖班级编号，班级编号依赖学生编号，发生传递依赖。</p>
</li>
<li><p>解决方式：创建两张表。</p>
<ul>
<li>表一：班级编号pk，班级名称</li>
<li>表二：学生编号pk，学生姓名，班级编号fk</li>
</ul>
</li>
<li><p>口诀：<strong>一对多？两张表，多的表加外键。</strong></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>提醒：在实际开发中，有时候需要用冗余换取速率。</p>
</li>
</ul>
<h2 id="III-表的设计经典设计方案"><a href="#III-表的设计经典设计方案" class="headerlink" title="III. 表的设计经典设计方案"></a>III. 表的设计经典设计方案</h2><ul>
<li><p>一对一设计方案之——<strong>主键共享</strong>：</p>
<p><em>用户登录表</em></p>
<table>
<thead>
<tr>
<th>id（pk）</th>
<th>username</th>
<th>password</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>zhangsan</td>
<td>123</td>
</tr>
<tr>
<td>2</td>
<td>ls</td>
<td>456</td>
</tr>
</tbody></table>
<p><em>用户详细信息表</em></p>
<table>
<thead>
<tr>
<th>id（pk+fk）</th>
<th>realname</th>
<th>tel</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>11111</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>12223</td>
</tr>
</tbody></table>
</li>
<li><p>一对一设计方案之——<strong>外键唯一</strong>：</p>
<p><em>用户登录表</em></p>
<table>
<thead>
<tr>
<th>id（pk）</th>
<th>username</th>
<th>password</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>zs</td>
<td>123</td>
</tr>
<tr>
<td>2</td>
<td>ls</td>
<td>456</td>
</tr>
</tbody></table>
<p><em>用户详细信息表</em></p>
<table>
<thead>
<tr>
<th>id（pk）</th>
<th>realname</th>
<th>tel</th>
<th>userid（fk+unique）</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>1122</td>
<td>2</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>3344</td>
<td>1</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="IV-I-悲观锁-行级锁for-update-和乐观锁"><a href="#IV-I-悲观锁-行级锁for-update-和乐观锁" class="headerlink" title="IV. I. 悲观锁(行级锁for update)和乐观锁"></a>IV. I. 悲观锁(行级锁for update)和乐观锁</h2><h3 id="1-悲观锁、乐观锁概述："><a href="#1-悲观锁、乐观锁概述：" class="headerlink" title="[1] 悲观锁、乐观锁概述："></a>[1] 悲观锁、乐观锁概述：</h3><ul>
<li><p>概述：</p>
<ul>
<li>乐观锁：支持并发，事务不需要排队，只不过需要一个版本号。</li>
<li>悲观锁：事务必须排队执行，数据锁住了，不允许并发。</li>
</ul>
</li>
<li><p>举个例子：<strong>select 语句</strong>如果在后面加上<strong>for update</strong>的话，就表示对应点行被锁住了。如下面的语句表示job是’MANAGR’的所有行都被锁住了，<strong>别的事务无法修改</strong>，这就是<strong>悲观锁（行级锁）</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename,job,sal from emp where jon = &apos;MANAGER&apos; for update;</span><br></pre></td></tr></table></figure>

<img src="/2020/04/30/Note-of-MySQL-2/7.png" title="7-1&} - 再举个例子： {%asset_img 8.png 8-1&} ### [2] 悲观锁（行级锁）演示： - 执行过程： - 1、以debug的方式运行SQLLockTest01，到断点停止。 - 2、运行SQLLockTest02，发现程序卡住，无法进行修改操作。 - 3、释放SQLLockTest01上的断点继续执行。 - 4、同时发现SQLLockTest02运行，控制台打印出修改成功。 - 5、看后台数据库，数据库中相应行的工资得到修改。 undefined undefined # 九、补录：数据库题目 *表1——emp* {%asset_img 1.png 1-1">

</li>
</ul>
<p><em>表2——salgrade</em></p>
<img src="/2020/04/30/Note-of-MySQL-2/2.png" title="2-1">

<p><em>表3——dept</em></p>
<img src="/2020/04/30/Note-of-MySQL-2/3.png" title="3-1">



<h2 id="1-查询每个部门获得最高工资的人员名称："><a href="#1-查询每个部门获得最高工资的人员名称：" class="headerlink" title="[1] 查询每个部门获得最高工资的人员名称："></a>[1] 查询每个部门获得最高工资的人员名称：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select t.*, e.ename</span><br><span class="line">from (select deptno, max(sal) as msal</span><br><span class="line">	  from emp </span><br><span class="line">	  group by deptno) t</span><br><span class="line">join emp e</span><br><span class="line">on t.msal = e.sal and t.deptno = e.deptno;</span><br></pre></td></tr></table></figure>

<h2 id="2-哪些人的薪水在部门平均薪水之上："><a href="#2-哪些人的薪水在部门平均薪水之上：" class="headerlink" title="[2] 哪些人的薪水在部门平均薪水之上："></a>[2] 哪些人的薪水在部门平均薪水之上：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select e.ename, e.sal</span><br><span class="line">from (select deptno, avg(sal) as avgsal</span><br><span class="line">	  from emp</span><br><span class="line">	  group by deptno) t</span><br><span class="line">join emp e</span><br><span class="line">on t.deptno = e.deptno and e.sal &gt; t.avgsal;</span><br></pre></td></tr></table></figure>

<h2 id="3-取得部门中-所有人的-平均的薪水等级："><a href="#3-取得部门中-所有人的-平均的薪水等级：" class="headerlink" title="[3] 取得部门中(所有人的)平均的薪水等级："></a>[3] 取得部门中(所有人的)平均的薪水等级：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select e.deptno, avg(s.grade)</span><br><span class="line">from emp e</span><br><span class="line">left join salgrade s</span><br><span class="line">on e.sal between s.losal and s.hisal</span><br><span class="line">group by e.deptno;</span><br></pre></td></tr></table></figure>

<h2 id="4-不使用组函数（max）取得最高薪水："><a href="#4-不使用组函数（max）取得最高薪水：" class="headerlink" title="[4] 不使用组函数（max）取得最高薪水："></a>[4] 不使用组函数（max）取得最高薪水：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 方法一：</span><br><span class="line">select sal</span><br><span class="line">from emp</span><br><span class="line">order by sal desc limit 0,1;</span><br><span class="line"># 方法二</span><br><span class="line">select sal </span><br><span class="line">from emp </span><br><span class="line">where sal not in (select distinct a.sal</span><br><span class="line">				  from emp a</span><br><span class="line">				  join emp b</span><br><span class="line">				  on a.sal &lt; b.sal);</span><br></pre></td></tr></table></figure>

<h2 id="5-取得平均薪水最高的部门编号："><a href="#5-取得平均薪水最高的部门编号：" class="headerlink" title="[5] 取得平均薪水最高的部门编号："></a>[5] 取得平均薪水最高的部门编号：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 方案一：</span><br><span class="line">select deptno, avg(sal) as avgsal</span><br><span class="line">from emp</span><br><span class="line">group by deptno</span><br><span class="line">order by avgsal desc limit 1;</span><br><span class="line"># 方案二：</span><br><span class="line">select deptno, avg(sal) as avgsal</span><br><span class="line">from emp</span><br><span class="line">group by deptno</span><br><span class="line">having avgsal = </span><br><span class="line">(select max(t.avgsal)</span><br><span class="line">from (select deptno, avg(sal) as avgsal</span><br><span class="line">	  from emp</span><br><span class="line">	  group by deptno) t);</span><br></pre></td></tr></table></figure>

<h2 id="6-取得平均薪水最高的部门的部门名称："><a href="#6-取得平均薪水最高的部门的部门名称：" class="headerlink" title="[6] 取得平均薪水最高的部门的部门名称："></a>[6] 取得平均薪水最高的部门的部门名称：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：</span><br><span class="line">select d.dname, avg(e.sal) as avgsal</span><br><span class="line">from emp e</span><br><span class="line">join dept d</span><br><span class="line">on e.deptno = d.deptno</span><br><span class="line">group by d.dname</span><br><span class="line">order by avgsal desc limit 1;</span><br><span class="line"># 方式二：</span><br><span class="line">select d.dname, avg(e.sal) as avgsal</span><br><span class="line">from emp e, dept d</span><br><span class="line">where e.deptno = d.deptno</span><br><span class="line">group by e.deptno</span><br><span class="line">having avgsal = </span><br><span class="line">(select max(t.avgsal)</span><br><span class="line">from (select deptno, avg(sal) as avgsal</span><br><span class="line">	  from emp</span><br><span class="line">	  group by deptno) t);</span><br></pre></td></tr></table></figure>

<h2 id="7-求平均薪水等级最低的部门名称："><a href="#7-求平均薪水等级最低的部门名称：" class="headerlink" title="[7] 求平均薪水等级最低的部门名称："></a>[7] 求平均薪水等级最低的部门名称：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">select t.*, s.grade</span><br><span class="line">from</span><br><span class="line">(select d.dname, avg(e.sal) as avgsal</span><br><span class="line">from dept d</span><br><span class="line">join emp e</span><br><span class="line">on d.deptno = e.deptno</span><br><span class="line">group by e.deptno) t</span><br><span class="line">join</span><br><span class="line">salgrade s</span><br><span class="line">on t.avgsal between s.losal and s.hisal</span><br><span class="line">where</span><br><span class="line">s.grade=</span><br><span class="line">(select min(g.grade)</span><br><span class="line">from</span><br><span class="line">((select t.deptno, s.grade</span><br><span class="line">from salgrade s</span><br><span class="line">join (select deptno, avg(sal) as avgsal</span><br><span class="line">	  from emp</span><br><span class="line">	  group by deptno) t</span><br><span class="line">on t.avgsal between s.losal and s.hisal)) g);</span><br></pre></td></tr></table></figure>

<h2 id="8-求取得比普通员工（名字不在mgr上的）最高薪水还要高的领导人姓名："><a href="#8-求取得比普通员工（名字不在mgr上的）最高薪水还要高的领导人姓名：" class="headerlink" title="[8] 求取得比普通员工（名字不在mgr上的）最高薪水还要高的领导人姓名："></a>[8] 求取得比普通员工（名字不在mgr上的）最高薪水还要高的领导人姓名：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select e.ename, e.sal</span><br><span class="line">from emp e</span><br><span class="line">where e.sal &gt;</span><br><span class="line">(select max(e.sal)</span><br><span class="line">from emp e</span><br><span class="line">where e.empno not in (select distinct a.empno</span><br><span class="line">					  from emp a</span><br><span class="line">					  join emp b</span><br><span class="line">					  on a.empno = b.mgr));</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Note-of-MySQL-1-基础、约束、存储引擎]]></title>
      <url>/2020/04/30/Note-of-MySQL/</url>
      <content type="html"><![CDATA[<h1 id="一、数据库概述以及数据准备"><a href="#一、数据库概述以及数据准备" class="headerlink" title="一、数据库概述以及数据准备"></a>一、数据库概述以及数据准备</h1><a id="more"></a>

<h2 id="I-数据库简介"><a href="#I-数据库简介" class="headerlink" title="I. 数据库简介"></a>I. 数据库简介</h2><ul>
<li><p>mysql删除：</p>
<ol>
<li>双击安装包，点击下一步，然后remove，卸载。</li>
<li>手动删除Program Files中的MySQL目录。</li>
<li>手动删除ProgramData目录（隐藏）中的MySQL。</li>
</ol>
</li>
<li><p>sql、DB、DBMS的关系：</p>
<ul>
<li>DB：DataBase：数据库，实际上在硬盘上以文件的形式存在。</li>
<li>DBMS：DataBase Management System：数据库管理系统，常见的有：MySQL、Oracle、DB2、SqlServer等。</li>
<li>sql：结构化查询语言，通用的语言，适合于所有的数据库产品。<strong>sql语句在执行的时候，也会进行编译，只不过是编译由DBMS进行</strong>。</li>
<li>*<em>DBMS –(执行)–&gt; SQL –(操作)–&gt;DB *</em></li>
</ul>
</li>
</ul>
<h2 id="II-什么是表"><a href="#II-什么是表" class="headerlink" title="II. 什么是表"></a>II. 什么是表</h2><ul>
<li><p>表：table，这是数据库的基本组成单元，所有数据都以表格的形式组织，目的是可读性强。</p>
</li>
<li><p>一个表包括行和列：</p>
<ul>
<li>行：被称为数据/记录（data）</li>
<li>列：被称为字段（column）</li>
</ul>
</li>
<li><p>一个字段包含的属性：</p>
<ul>
<li>字段名、数据类型、相关的约束。</li>
</ul>
</li>
</ul>
<h2 id="III-SQL语句概述"><a href="#III-SQL语句概述" class="headerlink" title="III. SQL语句概述"></a>III. SQL语句概述</h2><ul>
<li>sql语句的分类：<ul>
<li>DQL：【数据查询语言】，凡是select的语句都是DQL。</li>
<li>DML：【数据操作语言】insert、update、delete对表中的数据进行增删改。</li>
<li>DDL：【数据定义语言】creat、drop、alter，对表结构进行增删改。</li>
<li>TCL：【事务控制语言】commit提交事务，rollback回滚事务。（T是Transaction）</li>
<li>DCL：【数据控制语言】grant授权、revoke撤销权限等。如超管创建用户zhangsan。</li>
</ul>
</li>
</ul>
<h2 id="IV-Mysql导入数据和常用命令"><a href="#IV-Mysql导入数据和常用命令" class="headerlink" title="IV. Mysql导入数据和常用命令"></a>IV. Mysql导入数据和常用命令</h2><ol>
<li><p>登录mysql DBMS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p333</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看有什么数据库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases; #这些不是sql语句，而是Mysql命令</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建属于我们自己的数据库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database bjpowernode;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用bjpowenode数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use bjpowernode;</span><br></pre></td></tr></table></figure>
</li>
<li><p>show查看当前使用的数据库中有什么表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tatbles;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source D:\course\bjpowernode.sql</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database bjpowernode;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看表结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc dept;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看表中的数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from dept;</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select database();#查看当前用的是哪个数据库</span><br><span class="line">select version();#查看mysql的版本号</span><br><span class="line">\c #结束一条语句</span><br><span class="line">exit #退出mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看一张表的建表语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table emp;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="V-对sql脚本的理解"><a href="#V-对sql脚本的理解" class="headerlink" title="V. 对sql脚本的理解"></a>V. 对sql脚本的理解</h2><ul>
<li>bjpowernode.sql这个文件以sql结尾，这样的文件成为sql脚本，其中编写了大量的sql语句。</li>
<li>sql脚本数据量太大的时候，无法打开，请使用<strong>source命令完成初始化</strong>。</li>
</ul>
<h1 id="二、增删改查（CRUD）"><a href="#二、增删改查（CRUD）" class="headerlink" title="二、增删改查（CRUD）"></a>二、增删改查（CRUD）</h1><h2 id="I-简单查询语句（单表DQL）"><a href="#I-简单查询语句（单表DQL）" class="headerlink" title="I. 简单查询语句（单表DQL）"></a>I. 简单查询语句（单表DQL）</h2><h3 id="1-DQL概述："><a href="#1-DQL概述：" class="headerlink" title="[1] DQL概述："></a>[1] DQL概述：</h3><ul>
<li>任何一条是sql语句都要以“ ; ”结尾。</li>
<li>sql不区分大小写。</li>
</ul>
<h3 id="2-DQL简单实现："><a href="#2-DQL简单实现：" class="headerlink" title="[2] DQL简单实现："></a>[2] DQL简单实现：</h3><ul>
<li>字段可以参与数学运损：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename, sal*12 from emp;</span><br></pre></td></tr></table></figure>

<ul>
<li>给查询结果重命名：<ul>
<li>注意：as关键字可以省略。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal*12 as yearsal from emp;</span><br></pre></td></tr></table></figure>

<ul>
<li>有中文，用单引号括起来，字符串都用单引号括起来：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal*12 as &apos;年薪&apos; from emp;</span><br></pre></td></tr></table></figure>

<ul>
<li>查询所有字段，不建设使用select * from …效率较低</li>
</ul>
<h3 id="3-条件查询："><a href="#3-条件查询：" class="headerlink" title="[3] 条件查询："></a>[3] 条件查询：</h3><ul>
<li>找出工资1100和3000之间的员工：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal from emp where sal between 1000 and 3000; #不能倒过来写，必须左小右大</span><br><span class="line">select ename,sal from emp where sal&gt;=1100 and sal&lt;=3000;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>between…and…</strong>还可以用在字符串方面：（左闭右开）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename from emp where ename between &apos;A&apos; and &apos;c&apos;; #找出了a、b开头的名字</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：在数据库中NULL不是一个值，代表什么也没有，为空。空不是一个值，不用等号衡量，必须用<strong>is null或is not null</strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal,comm from emp where comm is null;  #找出津贴为NULL的人</span><br><span class="line">select ename,sal,comm from emp where comm is null or comm = 0; #找出那些人没有津贴</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>and和or联合使用</strong>：and优先级较高<ul>
<li>找出薪资大于1000，并且部门编号是20或30的员工。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal,deptno from emp where sal &gt; 1000 and (deptno=20 or deptno=30); #想要谁先执行，直接加括号就行</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>in 等同于 or：</strong>找出工作岗位是MANAGER和SALESMAN的员工？</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select ename,job from emp where job in (&apos;SALESMAN&apos;,&apos;MANAGER&apos;);</span><br><span class="line">select ename,job from emp where job=&apos;SALESMAN&apos; or job=&apos;MANAGER&apos;; #以上两句等同</span><br><span class="line">select ename,job from emp where sal in(1000,5000); #注意：此句话表示薪资1000和5000的，不是区间！！！</span><br></pre></td></tr></table></figure>

<ul>
<li>模糊查询<strong>like</strong>：百分号%代表多个字符，下划线_代表任意一个字符。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select ename from emp where ename like &apos;%O%&apos;; #找出名字中带有O的</span><br><span class="line">select ename from emp where ename like &apos;_A%&apos;; #找出第二个字母是A的</span><br><span class="line">select ename from emp where ename like &apos;%\_%&apos;; #找名字中带有下划线的（转义）</span><br></pre></td></tr></table></figure>

<h3 id="4-排序："><a href="#4-排序：" class="headerlink" title="[4] 排序："></a>[4] 排序：</h3><ul>
<li>默认是<strong>asc表示升序，desc表示降序</strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal from emp order by sal asc;</span><br><span class="line">select ename,sal from emp order by sal desc; #降序</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>多个排列字段：</strong>案例：按照工资降序排，工资一样的话按照名字升序排：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal from emp order by sal desc, ename asc; #越靠前的越先排列</span><br></pre></td></tr></table></figure>

<ul>
<li>还可以<strong>按照数字排</strong>：表示第几列。但是这种方法不提倡，建议还是写死，因为调换顺序的话就废了。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal from emp order by 2; #第二列是工资</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：语句执行顺序：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">select          #（5）</span><br><span class="line">	字段</span><br><span class="line">from            # 最先执行（1）</span><br><span class="line">    表名</span><br><span class="line">where           #（2）</span><br><span class="line">    条件</span><br><span class="line">group by        #（3）</span><br><span class="line">    ...</span><br><span class="line">having          #（4）</span><br><span class="line">    ...</span><br><span class="line">order by        #（6）</span><br><span class="line">    ...</span><br><span class="line">limit           # 最后执行（7）</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h3 id="5-分组函数："><a href="#5-分组函数：" class="headerlink" title="[5] 分组函数："></a>[5] 分组函数：</h3><ul>
<li>一共五个，也只有五个：（别名：多行处理函数，输入多行，最终显示结果是1行）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">count #计数</span><br><span class="line">sum   #求和</span><br><span class="line">avg   #平均值</span><br><span class="line">max   #最大值</span><br><span class="line">min   #最小值</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：所有分组函数都是对“某一组”数据进行操作的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select sum(sal) from emp; #找出工资总和：</span><br><span class="line">select max(sal) from emp; #找出最高公司</span><br><span class="line">select min(sal) from emp; #找出最低工资</span><br><span class="line">select avg(sal) from emp; #找出平均工资</span><br><span class="line">select count(*) from emp; #找出总人数</span><br></pre></td></tr></table></figure>

<ul>
<li><p>分组函数特点：<strong>自动忽略null</strong>。</p>
<ul>
<li><p>规定：所有数据库都是这样的：<strong>null参与运算的结果一定是null</strong>。</p>
</li>
<li><p>注意<strong>所有分组函数自动忽略null</strong>，不要画蛇添足加上如where comm is not NULL；</p>
</li>
</ul>
</li>
<li><p>案例：找出薪资大于平均薪资的员工：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#分组函数不能直接出现在where中，因为group by是在where后面执行，而分组函数在group by后执行。</span><br><span class="line">#以下语句没有分组（group by），不能使用分组函数。</span><br><span class="line">select ename,sal from emp where sal&gt;avg(sal); #语法出错！！！、</span><br><span class="line">select ename,sal from emp where sal &gt; (select avg(sal) from emp); #正确！！！</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：count(*) 和count(某个字段)的区别？<ul>
<li>count（*）表示一共几条记录。</li>
<li>count（某个字段）表示字段不为NULL的记录条数。</li>
</ul>
</li>
</ul>
<h3 id="6-单行处理函数："><a href="#6-单行处理函数：" class="headerlink" title="[6] 单行处理函数："></a>[6] 单行处理函数：</h3><ul>
<li>ifnull ()  的用法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifnull(可能为NULL的数据，被当成做什么处理)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename,ifnull(comm,0) as comm from emp; #comm要是为NULL就输出0</span><br></pre></td></tr></table></figure>

<h3 id="7-group-by-和-having："><a href="#7-group-by-和-having：" class="headerlink" title="[7] group by 和 having："></a>[7] group by 和 having：</h3><ul>
<li><p>两者概念：</p>
<ul>
<li>group by：按照某个字段或者某些字段进行分组。</li>
<li>having：having是对分组之后的数据进行再次过滤。</li>
</ul>
</li>
<li><p>案列：找出每个工作岗位的最高薪资。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select max(sal) from emp group by job;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：分组函数一般会和group by联合使用，并且<strong>任何一个分组函数都会在group by语句执行后执行</strong>。</li>
</ul>
<h3 id="8-多字段分组查询："><a href="#8-多字段分组查询：" class="headerlink" title="[8] 多字段分组查询："></a>[8] 多字段分组查询：</h3><ul>
<li>记住：<strong>一条语句中要是有group by的话，select后面只能跟分组函数和参与分组的字段</strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ename,max(sal),job from emp group by job; #这段语句虽然能执行但毫无意义，（若在oracle会报错）</span><br><span class="line">select job,avg(sal) from emp group by job; #正确</span><br></pre></td></tr></table></figure>

<ul>
<li>多字段联合分组：<ul>
<li>案例：找出每个部门，不同工作岗位的最高薪资。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select deptno,job,max(sal) from emp group by deptno,job;</span><br></pre></td></tr></table></figure>

<h3 id="9-having和where的选择："><a href="#9-having和where的选择：" class="headerlink" title="[9] having和where的选择："></a>[9] having和where的选择：</h3><ul>
<li>案例：找出每个部门的最高薪资，要求显示薪资大于2500的数据。<ul>
<li>以下方式效率低，因为选出来的max(sal)可能在第二步被删掉。建议使用第二种方式，上来先把大于2900的项删掉。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#第一步：找出每个部门的最高薪资</span><br><span class="line">select max(sal),deptno from emp group by deptno;</span><br><span class="line">#第二步：找出薪资大于2900</span><br><span class="line">select max(sal),deptno from emp group by deptno having max(sal)&gt;2900; #低效</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#第二种方式：高效</span><br><span class="line">#建议能够使用where的尽量使用where</span><br><span class="line">select max(sal),deptno from emp where sal&gt;2900 group by deptno;</span><br></pre></td></tr></table></figure>

<ul>
<li>where搞不定的案例：找出每个部门的平均薪资，要求显示薪资大于2000的数据。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select avg(sal),deptno from emp group by deptno having avg(sal)&gt;2000 ;</span><br></pre></td></tr></table></figure>

<h3 id="10-查询结果集的去重："><a href="#10-查询结果集的去重：" class="headerlink" title="[10] 查询结果集的去重："></a>[10] 查询结果集的去重：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct job from emp;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意：distinct只能出现在所有字段的最前面。</p>
<ul>
<li>distinct出现在最前方表示<strong>后面的所有字段联合起来去重</strong>。</li>
</ul>
</li>
<li><p>案例：统计岗位的数量：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct job) from emp;</span><br></pre></td></tr></table></figure>

<h2 id="II-连接查询（多表DQL）"><a href="#II-连接查询（多表DQL）" class="headerlink" title="II. 连接查询（多表DQL）"></a>II. 连接查询（多表DQL）</h2><h3 id="1-笛卡尔积现象："><a href="#1-笛卡尔积现象：" class="headerlink" title="[1] 笛卡尔积现象："></a>[1] 笛卡尔积现象：</h3><ul>
<li>笛卡尔积现象：当两张表进行连接查询的时候，没有任何的条件限制，最终的查询结果是两张记录条数的乘积。</li>
<li>关于表的别名：<ul>
<li>优点：执行效率高、可读性好。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.ename, d.dname from emp e, dept d;</span><br></pre></td></tr></table></figure>

<ul>
<li>思考：避免了笛卡尔积现象，会减少记录的匹配次数吗？<ul>
<li><strong>不会，底层还是进行笛卡尔积次数的匹配</strong>，只不过显示的是有效记录。</li>
</ul>
</li>
</ul>
<h3 id="2-内连接："><a href="#2-内连接：" class="headerlink" title="[2] 内连接："></a>[2] 内连接：</h3><ol>
<li><strong>等值连接：最大的特点：条件是等量关系</strong>。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># SQL92:(太老了，不用)</span><br><span class="line">select e.ename, d.dname from emp e, dept d where e.dept=d.dept;</span><br><span class="line"># SQL99:(常用的)</span><br><span class="line">select e.ename,d.deptno </span><br><span class="line">from emp e </span><br><span class="line">inner join dept d #inner可以省略</span><br><span class="line">on e.deptno=d.deptno;</span><br></pre></td></tr></table></figure>

<ul>
<li>SQL99语法结构更加清晰，表的连接条件和后来的where条件分离了。</li>
</ul>
<ol start="2">
<li><p><strong>非等值连接：最大特点：连接条件中条件非等量</strong>。</p>
<ul>
<li>案例：找出每个员工的工资等级，要求现实员工名、工资、工资等级。</li>
</ul>
<p><em>表1——emp</em></p>
<table>
<thead>
<tr>
<th>ename</th>
<th>sal</th>
</tr>
</thead>
<tbody><tr>
<td>SMITH</td>
<td>800.00</td>
</tr>
<tr>
<td>ALLEN</td>
<td>1600.00</td>
</tr>
<tr>
<td>JONES</td>
<td>2975.00</td>
</tr>
</tbody></table>
<p><em>表2——salgrade</em></p>
<table>
<thead>
<tr>
<th>GRADE</th>
<th>LOSAL</th>
<th>HISAL</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>700</td>
<td>1200</td>
</tr>
<tr>
<td>2</td>
<td>1201</td>
<td>2000</td>
</tr>
<tr>
<td>3</td>
<td>2001</td>
<td>9999</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select e.ename,e.sal,s.grade</span><br><span class="line">from emp e</span><br><span class="line">join salgrade s</span><br><span class="line">on e.sal between s.LOASL and s.HISAL</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自连接：最大特点：一张表看成两张表，自己连自己</strong>。</p>
<ul>
<li>案例：找出每个员工的上级领导，要求员工名和对应的领导名。</li>
</ul>
<p><em>表1——emp</em></p>
<table>
<thead>
<tr>
<th>empno</th>
<th>ename</th>
<th>mgr</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>SMITH</td>
<td>2</td>
</tr>
<tr>
<td>2</td>
<td>WARD</td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td>BLACK</td>
<td>NULL</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select a.ename as &apos;员工名&apos; b.ename as &apos;领导名&apos;</span><br><span class="line">from emp a</span><br><span class="line">inner join emp b</span><br><span class="line">on a.mgr = b.empno;</span><br></pre></td></tr></table></figure>

<p><em>结果——result</em></p>
<table>
<thead>
<tr>
<th>员工名</th>
<th>领导名</th>
</tr>
</thead>
<tbody><tr>
<td>SMITH</td>
<td>WARD</td>
</tr>
<tr>
<td>WARD</td>
<td>BLACK</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="3-外连接："><a href="#3-外连接：" class="headerlink" title="[3] 外连接："></a>[3] 外连接：</h3><ul>
<li>外连接和内连接的区别：<ul>
<li>使用内连接的话，凡是A表和B表能能够匹配上的记录查询出来，这就是内连接。两张表没有主副之分。</li>
<li>使用外连接的话，AB两张表有一张表是主表，另一张是副表。主要查询主表的数据，捎带着查询附表，当副表中的数据没有和主表中的数据匹配上，副表自动模出null与之匹配。</li>
<li>外连接的特点：<strong>主表上的数据无条件全部查询出来！</strong></li>
</ul>
</li>
</ul>
<ol>
<li>左外连接（左连接）：左边的是主表</li>
<li>右外连接（右连接）：右边的是主表</li>
</ol>
<ul>
<li>案例：找出每个员工的上级领导：所有员工都要查询。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># outer可以省略</span><br><span class="line">select a.ename &apos;员工&apos;, b.ename &apos;领导&apos;</span><br><span class="line">from emp a</span><br><span class="line">left outer join emp b</span><br><span class="line">on a.mgr = b.empno;</span><br></pre></td></tr></table></figure>

<p><em>结果——result</em></p>
<table>
<thead>
<tr>
<th>员工</th>
<th>领导</th>
</tr>
</thead>
<tbody><tr>
<td>SMITH</td>
<td>WARD</td>
</tr>
<tr>
<td>WARD</td>
<td>BLACK</td>
</tr>
<tr>
<td>BLACK</td>
<td>NULL</td>
</tr>
</tbody></table>
<h3 id="4-全连接："><a href="#4-全连接：" class="headerlink" title="[4] 全连接："></a>[4] 全连接：</h3><ul>
<li>左右表都是主表（了解即可，实际上不怎么用）</li>
</ul>
<h3 id="5-三张表进行连接："><a href="#5-三张表进行连接：" class="headerlink" title="[5] 三张表进行连接："></a>[5] 三张表进行连接：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 以下表示A表和B表先进行连接，连接之后的结果继续和C进行连接</span><br><span class="line">... A</span><br><span class="line">join B</span><br><span class="line">on ...</span><br><span class="line">join C</span><br><span class="line">on ...</span><br></pre></td></tr></table></figure>

<h2 id="III-嵌套查询（多表DQL）"><a href="#III-嵌套查询（多表DQL）" class="headerlink" title="III. 嵌套查询（多表DQL）"></a>III. 嵌套查询（多表DQL）</h2><h3 id="1-基本概念："><a href="#1-基本概念：" class="headerlink" title="[1] 基本概念："></a>[1] 基本概念：</h3><ul>
<li><p>select语句当中嵌套select语句，被嵌套的select语句是子查询。</p>
</li>
<li><p>出现位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select ...(select).</span><br><span class="line">from ...(select).</span><br><span class="line">where ...(select).</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-where中使用子查询："><a href="#2-where中使用子查询：" class="headerlink" title="[2] where中使用子查询："></a>[2] where中使用子查询：</h3><ul>
<li><p>找出高于平均薪资的员工信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select e.ename, e.sal</span><br><span class="line">from emp e</span><br><span class="line">where e.sal </span><br><span class="line">&gt; (select avg(sal)</span><br><span class="line">   from emp);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-from后面嵌套子查询："><a href="#3-from后面嵌套子查询：" class="headerlink" title="[3] from后面嵌套子查询："></a>[3] from后面嵌套子查询：</h3><ul>
<li><p>找出每个部门平均薪水的薪资等级。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select a.*, s.grade</span><br><span class="line">from (select e.deptno, AVG(e.sal) as avsal</span><br><span class="line">     from emp e</span><br><span class="line">     group by e.deptno) a</span><br><span class="line">left join salgrade s</span><br><span class="line">on a.avsal between s.losal and s.hisal;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对比练习：找出每个部门平均的薪水等级。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select e.deptno, avg(s.grade)</span><br><span class="line">from emp e </span><br><span class="line">left join salgrade s</span><br><span class="line">on e.sal between s.losal and s.hisal</span><br><span class="line">group by e.deptno;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-select后面嵌套子查询："><a href="#4-select后面嵌套子查询：" class="headerlink" title="[4] select后面嵌套子查询："></a>[4] select后面嵌套子查询：</h3><ul>
<li><p>找出每个员工所在的部门名称：显示员工名和部门名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select e.ename,</span><br><span class="line">	(select d.dname</span><br><span class="line">    from dept d</span><br><span class="line">    where e.deptno = d.deptno) as dname</span><br><span class="line">from emp e;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="IV-其他查询方式"><a href="#IV-其他查询方式" class="headerlink" title="IV. 其他查询方式"></a>IV. 其他查询方式</h2><h3 id="1-union查询："><a href="#1-union查询：" class="headerlink" title="[1] union查询："></a>[1] union查询：</h3><ul>
<li>找出工作岗位是SALESMAN和MANAGER的员工？</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select ename,job from emp where job=&apos;MANAGER&apos;</span><br><span class="line">union</span><br><span class="line">select ename,job from emp where job=&apos;SALESMAN&apos;;</span><br></pre></td></tr></table></figure>

<ul>
<li>UNION作用：可以将两张不相干的表拼接在一起：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 虽然这样没有什么意义</span><br><span class="line">select ename from emp</span><br><span class="line">union</span><br><span class="line">select dname from dept;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：两列的表不能和一列的表拼接一起，即列数要一致。</li>
</ul>
<h3 id="2-limit查询"><a href="#2-limit查询" class="headerlink" title="[2] limit查询:"></a>[2] limit查询:</h3><ul>
<li><p>limit是mysql特有的，其他数据库中没有，不通用。（oracle有个相似的机制叫做rownum）</p>
</li>
<li><p>作用：limit取结果集中的部分数据。</p>
</li>
<li><p>注意：limit是sql语句最后执行的环节。</p>
</li>
<li><p>语法机制：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">limit startIndex, length</span><br><span class="line"># startIndex表示起始位置[0表示第一个数据]，length表示取几个</span><br></pre></td></tr></table></figure>
</li>
<li><p>案例：取出工资前五名的员工：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal </span><br><span class="line">from emp </span><br><span class="line">order by sal desc limit 0 ,5;# 或者直接写5，开始默认为0</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="V-增删改：DDL、DML"><a href="#V-增删改：DDL、DML" class="headerlink" title="V. 增删改：DDL、DML"></a>V. 增删改：DDL、DML</h2><h3 id="1-创建表create："><a href="#1-创建表create：" class="headerlink" title="[1] 创建表create："></a>[1] 创建表create：</h3><ul>
<li>创建格式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名 (</span><br><span class="line">    字段名1 数据类型,</span><br><span class="line">    字段名2 数据类型 default ..., # 可以指定默认值</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>MySQL中的字段的数据类型，常见：</p>
<ul>
<li>int：整数型（java中int）</li>
<li>bigint：长整型（java中的long）</li>
<li>float：浮点型（java中float、double）</li>
<li>char：定长字符串（String）</li>
<li>varchar：不定长字符串（可变长字符串StringBuffer/StringBuilder）</li>
<li>date：日期类型（java中的java.sql.Date类型）</li>
<li>BLOB：二进制大对象（存储图片、视频等流媒体信息）Binary Large OBject（对应java中的Object）</li>
<li>CLOB：字符大对象（存储较大文本，比如存储4G的字符串）Character  Large OBject（对应java中的Object）</li>
</ul>
</li>
<li><p>char和varchar怎么选择？</p>
<ul>
<li>在实际的开发中，当某个字段的<strong>数据长度不发生改变</strong>的时候，是定长的，例如：性别、生日；<strong>用cha</strong>r。</li>
<li>当一个字段的<strong>数据长度不确定</strong>的时候，例如：简介、姓名，<strong>用varchar</strong>。</li>
</ul>
</li>
<li><p>BLOB和CLOB的使用：如电影表，海报用BLOB，描述信息用CLOB。</p>
</li>
<li><p>表名一般采用：t_ 或者 tbl_开始。</p>
</li>
</ul>
<h3 id="2-插入数据insert："><a href="#2-插入数据insert：" class="headerlink" title="[2] 插入数据insert："></a>[2] 插入数据insert：</h3><ul>
<li>基本语法格式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 要求：字段的数量和值的数量相同，并且数据类型要对应</span><br><span class="line">insert into 表名(字段名1, 字段名2, ...)</span><br><span class="line">value(值1,  值2, ...);</span><br></pre></td></tr></table></figure>

<ul>
<li>其他格式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 省略表名参数</span><br><span class="line"># 此时后面的value要写全，有几个字段写几个，否则报错</span><br><span class="line">insert into 表名</span><br><span class="line">value(值1,  值2, ...);</span><br></pre></td></tr></table></figure>

<ul>
<li>一次插入多行数据：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 省略表名参数</span><br><span class="line"># 此时后面的value要写全，有几个字段写几个，否则报错</span><br><span class="line">insert into 表名(字段名1, 字段名2, ...)</span><br><span class="line">value(值1,  值2, ...),(值1, 值2, ...), ... ;</span><br></pre></td></tr></table></figure>

<h3 id="3-表的复制："><a href="#3-表的复制：" class="headerlink" title="[3] 表的复制："></a>[3] 表的复制：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将查询结果当成表创建出来</span><br><span class="line">create table 表名</span><br><span class="line">as</span><br><span class="line">select语句;</span><br></pre></td></tr></table></figure>

<h3 id="4-将查询结果插入到一张表中："><a href="#4-将查询结果插入到一张表中：" class="headerlink" title="[4] 将查询结果插入到一张表中："></a>[4] 将查询结果插入到一张表中：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 select语句</span><br></pre></td></tr></table></figure>

<h3 id="5-修改数据update："><a href="#5-修改数据update：" class="headerlink" title="[5] 修改数据update："></a>[5] 修改数据update：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update 表名</span><br><span class="line">set 字段名1=值1, 字段名2=值2, ... where 条件;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意：没有条件整张表全部更新。</p>
</li>
<li><p>案例：将部门10的LOC修改为SHANGHAI，将部门名称修改成RENSHIBU</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update dept</span><br><span class="line">set LOC = &apos;SHANGHAI&apos;, DNAME = &apos;RENSHIBU&apos;</span><br><span class="line">where DEPTNO = 10;</span><br></pre></td></tr></table></figure>

<ul>
<li>若更新所有记录，则不写where语句即可；</li>
</ul>
<h3 id="6-删除数据delete："><a href="#6-删除数据delete：" class="headerlink" title="[6] 删除数据delete："></a>[6] 删除数据delete：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名 where 条件;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>若删除所有记录，则不写where即可;</p>
</li>
<li><p>如何删除大表？</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table emp1; # 表被截断，不可回滚。永久丢失。但效率高。</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="7-删除整张表drop："><a href="#7-删除整张表drop：" class="headerlink" title="[7] 删除整张表drop："></a>[7] 删除整张表drop：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists 表名;</span><br></pre></td></tr></table></figure>

<h1 id="三、约束（Constraint）"><a href="#三、约束（Constraint）" class="headerlink" title="三、约束（Constraint）"></a>三、约束（Constraint）</h1><h2 id="I-约束概述"><a href="#I-约束概述" class="headerlink" title="I. 约束概述"></a>I. 约束概述</h2><ul>
<li>在创建表的时候，可以给的字段添加相应的约束，添加约束的目的是为了<strong>保证表中数据的合法性、有效性、完整性</strong>。</li>
<li>常见的约束有什么？<ul>
<li>非空约束（not null）：约束的字段不能是NULL</li>
<li>唯一约束（unique）：约束的字段不能重复</li>
<li>主键约束（PK, primary key）：约束的字段既不能是NULL，也不可重复</li>
<li>外键约束（FK, foreign key）：</li>
<li>检查约束（check）：注意Oracle数据库有check约束，mysql没有。</li>
</ul>
</li>
</ul>
<h2 id="II-非空约束not-null"><a href="#II-非空约束not-null" class="headerlink" title="II. 非空约束not null"></a>II. 非空约束not null</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table t_user(</span><br><span class="line">	id int,</span><br><span class="line">    username varchar(255) not null,</span><br><span class="line">    password varchar(255)</span><br><span class="line">);</span><br><span class="line">insert into t_user(id,password) values(1,&apos;123&apos;);</span><br><span class="line"># ERROR 1364 (HY000): Field &apos;username&apos; doesn&apos;t have a default value</span><br></pre></td></tr></table></figure>

<h2 id="III-唯一性约束unique"><a href="#III-唯一性约束unique" class="headerlink" title="III. 唯一性约束unique"></a>III. 唯一性约束unique</h2><h3 id="1-unique概述："><a href="#1-unique概述：" class="headerlink" title="[1] unique概述："></a>[1] unique概述：</h3><ul>
<li>字段具有唯一性，<strong>不能重复，但可以是NULL</strong>。</li>
</ul>
<h3 id="2-列级约束："><a href="#2-列级约束：" class="headerlink" title="[2] 列级约束："></a>[2] 列级约束：</h3><ul>
<li>案例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists t_user;</span><br><span class="line">create table t_user(</span><br><span class="line">	id int,</span><br><span class="line">    username varchar(255) unique</span><br><span class="line">);</span><br><span class="line">insert into t_user values(1,&apos;zhangsan&apos;);</span><br><span class="line">insert into t_user values(2,&apos;zhangsan&apos;);</span><br><span class="line"># ERROR 1062 (23000): Duplicate entry &apos;zhangsan&apos; for key &apos;username&apos;</span><br></pre></td></tr></table></figure>

<h3 id="3-表级约束："><a href="#3-表级约束：" class="headerlink" title="[3] 表级约束："></a>[3] 表级约束：</h3><ul>
<li>给两个列同时加：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists t_user;</span><br><span class="line">create table t_user(</span><br><span class="line">	id int,</span><br><span class="line">    username varchar(255),</span><br><span class="line">    password varchar(255),</span><br><span class="line">    unique(username,password)</span><br><span class="line">);</span><br><span class="line">insert into t_user values(1,&apos;zhangsan&apos;,&apos;123&apos;);</span><br><span class="line">insert into t_user values(1,&apos;zhangsan&apos;,&apos;234&apos;);</span><br><span class="line"># 这样添加可以，表示username,password联合起来一个约束</span><br></pre></td></tr></table></figure>

<h2 id="IV-主键约束"><a href="#IV-主键约束" class="headerlink" title="IV. 主键约束"></a>IV. 主键约束</h2><h3 id="1-主键的基本概念："><a href="#1-主键的基本概念：" class="headerlink" title="[1] 主键的基本概念："></a>[1] 主键的基本概念：</h3><ul>
<li>id是主键，主键上的数据<strong>不能是null，也不能重复</strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists t_user;</span><br><span class="line">create table t_user(</span><br><span class="line">	id int primary key,</span><br><span class="line">    username varchar(255),</span><br><span class="line">    password varchar(255)</span><br><span class="line">);</span><br><span class="line">insert into t_user values(1,&apos;zhangsan&apos;,&apos;123&apos;);</span><br><span class="line">insert into t_user values(1,&apos;lisi&apos;,&apos;234&apos;);</span><br><span class="line"># ERROR 1062 (23000): Duplicate entry &apos;1&apos; for key &apos;PRIMARY&apos;</span><br><span class="line">insert into t_user(username,password) values(&apos;lisi&apos;,&apos;234&apos;);</span><br><span class="line"># ERROR 1364 (HY000): Field &apos;id&apos; doesn&apos;t have a default value</span><br></pre></td></tr></table></figure>

<ul>
<li>主键的三个基本概念：<ul>
<li>主键约束：primary key</li>
<li>主键字段：id 添加 primary key 后，id 叫做主键字段</li>
<li>主键值：id 字段每一个值，如 1</li>
</ul>
</li>
<li>一张表只有一个主键约束。</li>
</ul>
<h3 id="2-主键的作用："><a href="#2-主键的作用：" class="headerlink" title="[2] 主键的作用："></a>[2] 主键的作用：</h3><ul>
<li>表的设计三范式中有要求，第一范式要求任何一张表都要有主键。</li>
<li>主键的作用：<ul>
<li>主键值是这行记录在这张表中的唯一标识（如身份证号）。</li>
</ul>
</li>
</ul>
<h3 id="3-主键的分类："><a href="#3-主键的分类：" class="headerlink" title="[3] 主键的分类："></a>[3] 主键的分类：</h3><ul>
<li>按数量来分：<ul>
<li>单一主键（推荐的常用的）</li>
<li>复合主键（多个字段联合起来添加一个主键约束，复合主键违背三范式，不建议用）</li>
</ul>
</li>
<li>根据主键性质来划分：<ul>
<li>自然主键：主键值最好是和业务无关的自然数。（推荐）</li>
<li>业务主键：主键和系统的业务挂钩，如银行卡号，身份证号。最好不要拿着和业务挂钩的字段作为主键。因为以后的业务一旦发生改变，主键值也可能发生变化，但有事没法变化，因为可能导致主键重复。</li>
</ul>
</li>
</ul>
<h3 id="4-主键自增（非常重要）："><a href="#4-主键自增（非常重要）：" class="headerlink" title="[4] 主键自增（非常重要）："></a>[4] 主键自增（非常重要）：</h3><ul>
<li>从一开始，以1递增。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists t_user;</span><br><span class="line">create table t_user(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">    username varchar(255)</span><br><span class="line">);</span><br><span class="line">insert into t_user(username) values(&apos;a&apos;);</span><br><span class="line">insert into t_user(username) values(&apos;b&apos;);</span><br><span class="line">insert into t_user(username) values(&apos;c&apos;);</span><br><span class="line">select * from t_user;</span><br><span class="line">/*</span><br><span class="line">+----+----------+</span><br><span class="line">| id | username |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | a        |</span><br><span class="line">|  2 | b        |</span><br><span class="line">|  3 | c        |</span><br><span class="line">+----+----------+ */</span><br></pre></td></tr></table></figure>

<h2 id="V-外键约束"><a href="#V-外键约束" class="headerlink" title="V. 外键约束"></a>V. 外键约束</h2><h3 id="1-外键约束概述："><a href="#1-外键约束概述：" class="headerlink" title="[1] 外键约束概述："></a>[1] 外键约束概述：</h3><ul>
<li><p>相关术语：</p>
<ul>
<li>外检约束：foreign key</li>
<li>外键字段：添加有外检约束的字段</li>
<li>外键值：外键字段中的每一个值</li>
</ul>
</li>
<li><p>顺序要求：</p>
<ul>
<li>删除数据的时候，先删除子表，再删除父表。</li>
<li>添加数据的时候，先添加父表，再添加子表。</li>
<li>创建表的时候，先创建父表，再创建子表。</li>
<li>删除表的时候，先删除子表，再删除父表。</li>
</ul>
</li>
<li><p><strong>外键是否可以是NULL：可以</strong></p>
</li>
<li><p>外键字段引用其他表的字段的时候，被引用的字段必须是主键吗？</p>
<ul>
<li>注意：被引用的字段<strong>不一定是主键，但是至少有unique约束</strong>。</li>
</ul>
</li>
</ul>
<h3 id="2-实例："><a href="#2-实例：" class="headerlink" title="[2] 实例："></a>[2] 实例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists t_studnet;</span><br><span class="line">drop table if exists t_class;</span><br><span class="line">create table t_class(</span><br><span class="line">	cno int,</span><br><span class="line">    cname varchar(255),</span><br><span class="line">    primary key(cno)</span><br><span class="line">);</span><br><span class="line">create table t_student(</span><br><span class="line">	sno int,</span><br><span class="line">    sname varchar(255),</span><br><span class="line">    classno int,</span><br><span class="line">    primary key(sno),</span><br><span class="line">    foreign key(classno) references t_class(cno)</span><br><span class="line">);</span><br><span class="line">insert into t_class values(101,&apos;xxxxxxxxxxxxx&apos;);</span><br><span class="line">insert into t_class values(102,&apos;yyyyyyyyyyyyy&apos;);</span><br><span class="line">insert into t_student values(1,&apos;zs1&apos;,101);</span><br><span class="line">insert into t_student values(2,&apos;zs2&apos;,102);</span><br><span class="line">insert into t_student values(3,&apos;zs3&apos;,102);</span><br><span class="line"># 此时插入103，则报错</span><br><span class="line">insert into t_student values(4,&apos;zs4&apos;,103);</span><br><span class="line"># ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails</span><br></pre></td></tr></table></figure>

<h1 id="四、存储引擎（了解）"><a href="#四、存储引擎（了解）" class="headerlink" title="四、存储引擎（了解）"></a>四、存储引擎（了解）</h1><h2 id="I-完整的建表语句"><a href="#I-完整的建表语句" class="headerlink" title="I. 完整的建表语句"></a>I. 完整的建表语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `t_x` (</span><br><span class="line">	`id` int(11) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSER-utf8;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：在MySQL中，凡是标识符也是可以用飘号`括起来的。最好别用，不通用。</li>
<li>建表的时候可以指定存储引擎，也可以指定字符集。</li>
<li>mysql<strong>默认采用的存储引擎是InnoDB方式</strong>。默认采用的字符集是utf8。</li>
</ul>
<h2 id="II-存储引擎概念"><a href="#II-存储引擎概念" class="headerlink" title="II. 存储引擎概念"></a>II. 存储引擎概念</h2><ul>
<li>存储引擎是mysql中存在。（oracle中有对应的叫法，但不叫存储引擎，就叫<strong>表的存储方式</strong>）</li>
<li>mysql支持很多存储引擎。每个存储引擎有自己的优点，需要在合适的时机选择合适的存储引擎。</li>
</ul>
<h3 id="1-查看存储引擎："><a href="#1-查看存储引擎：" class="headerlink" title="[1] 查看存储引擎："></a>[1] 查看存储引擎：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engines \G</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"># 5.5版本的mysql支持一下九个存储引擎</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">      Engine: FEDERATED</span><br><span class="line">     Support: NO</span><br><span class="line">     Comment: Federated MySQL storage engine</span><br><span class="line">Transactions: NULL</span><br><span class="line">          XA: NULL</span><br><span class="line">  Savepoints: NULL</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">      Engine: MRG_MYISAM</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Collection of identical MyISAM tables</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">      Engine: MyISAM</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: MyISAM storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 4. row ***************************</span><br><span class="line">      Engine: BLACKHOLE</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: /dev/null storage engine (anything you write to it disappears)</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 5. row ***************************</span><br><span class="line">      Engine: CSV</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: CSV storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 6. row ***************************</span><br><span class="line">      Engine: MEMORY</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Hash based, stored in memory, useful for temporary tables</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 7. row ***************************</span><br><span class="line">      Engine: ARCHIVE</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Archive storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 8. row ***************************</span><br><span class="line">      Engine: InnoDB</span><br><span class="line">     Support: DEFAULT</span><br><span class="line">     Comment: Supports transactions, row-level locking, and foreign keys</span><br><span class="line">Transactions: YES</span><br><span class="line">          XA: YES</span><br><span class="line">  Savepoints: YES</span><br><span class="line">*************************** 9. row ***************************</span><br><span class="line">      Engine: PERFORMANCE_SCHEMA</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Performance Schema</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br></pre></td></tr></table></figure>

<h2 id="III-常见的存储引擎"><a href="#III-常见的存储引擎" class="headerlink" title="III. 常见的存储引擎"></a>III. 常见的存储引擎</h2><h3 id="1-MyISAM"><a href="#1-MyISAM" class="headerlink" title="[1] MyISAM:"></a>[1] MyISAM:</h3><ul>
<li>最常用的存储引擎，但不是默认的。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> Engine: MyISAM</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: MyISAM storage engine</span><br><span class="line">Transactions: NO # 不支持事务</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br></pre></td></tr></table></figure>

<ul>
<li>MyISAM采用三个文件组织一张表：<ul>
<li>xxx.frm（存储格式的文件）</li>
<li>xxx.MYD（存储表中数据的文件）</li>
<li>xxx.MYI（存储表中索引的文件）</li>
</ul>
</li>
<li>优点：可以被压缩，节省存储空间。并且可以转换为只读表，提高检索效率。</li>
<li>缺点：不支持事务。</li>
</ul>
<h3 id="2-InnoDB（事务、安全、重量级）"><a href="#2-InnoDB（事务、安全、重量级）" class="headerlink" title="[2] InnoDB（事务、安全、重量级）:"></a>[2] InnoDB（事务、安全、重量级）:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> Engine: InnoDB</span><br><span class="line">     Support: DEFAULT</span><br><span class="line">     Comment: Supports transactions, row-level locking, and foreign keys</span><br><span class="line">Transactions: YES</span><br><span class="line">          XA: YES</span><br><span class="line">  Savepoints: YES</span><br></pre></td></tr></table></figure>

<ul>
<li><p>优点：支持事务、行级锁、外键等。这种存储引擎最安全。</p>
</li>
<li><p>表的结构存储在xxx.frm中，数据存储在tablespace这样的表空间中（逻辑概念），无法被压缩，无法转换成只读。</p>
</li>
<li><p>在MySQL数据库崩溃之后提供自动回复机制。</p>
</li>
<li><p>支持级联删除和级联更新。</p>
</li>
</ul>
<h3 id="3-MEMORY"><a href="#3-MEMORY" class="headerlink" title="[3] MEMORY:"></a>[3] MEMORY:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Engine: MEMORY</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Hash based, stored in memory, useful for temporary tables</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br></pre></td></tr></table></figure>

<ul>
<li>缺点：不支持事务。数据容易丢失。因为所有的数据和索引都存在内存中。不支持CLOB, BLOB字段。</li>
<li>优点：查询速度最快。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS7下安装Redis,并连接win10上的Redis Desktop Manager工具]]></title>
      <url>/2020/04/29/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85Redis-%E5%B9%B6%E8%BF%9E%E6%8E%A5win10%E4%B8%8A%E7%9A%84Redis-Desktop-Manager%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h3 id="【1】下载安装包："><a href="#【1】下载安装包：" class="headerlink" title="【1】下载安装包："></a>【1】下载安装包：</h3><a id="more"></a>

<ul>
<li><p>本文以  redis-5.0.8  为例：</p>
</li>
<li><p>下载方式一：</p>
<ul>
<li>通过命令下载（可能较慢）：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.8.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载方式二（推荐）：</p>
<ul>
<li><p>从官网下载  redis-5.0.8.tar.gz ： 地址：<a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></p>
</li>
<li><p>并把它通过xftp传到 centos 系统 /root 文件下：</p>
</li>
</ul>
<img src="/2020/04/29/CentOS7下安装Redis-并连接win10上的Redis-Desktop-Manager工具/1.png" title="1-1">

</li>
</ul>
<h3 id="【2】编译安装："><a href="#【2】编译安装：" class="headerlink" title="【2】编译安装："></a>【2】编译安装：</h3><ul>
<li><p>在压缩包所在目录使用，以下命令解压：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf redis-5.0.8.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入/redis-5.0.8/src后,编译安装：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 如果没安装gcc先yum install -y gcc</span><br><span class="line">cd /redis-5.0.8/src</span><br><span class="line">make all</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="【3】资源整理："><a href="#【3】资源整理：" class="headerlink" title="【3】资源整理："></a>【3】资源整理：</h3><ul>
<li><p>为了启动关闭方便，将生成的文件的常用文件拷贝到/opt/redis下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/redis</span><br><span class="line">cp redis-benchmark /opt/redis/redis-benchmark</span><br><span class="line">cp redis-check-aof /opt/redis/redis-check-aof</span><br><span class="line">cp redis-check-rdb /opt/redis/redis-check-rdb</span><br><span class="line">cp redis-cli /opt/redis/redis-cli</span><br><span class="line">cp redis-sentinel /opt/redis/redis-sentinel</span><br><span class="line">cp redis-server    /opt/redis/redis-server</span><br><span class="line"></span><br><span class="line">redis-benchmark #压力测试</span><br><span class="line">redis-check-aof # 较完成持久化</span><br><span class="line">redis-check-rdb # redis默认持久化，适合大面积</span><br><span class="line">redis-cli #客户端</span><br><span class="line">redis-sentinel #哨兵机制</span><br><span class="line">redis-server #服务端</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>将解压包中根目录下的redis.conf文件也拷贝到/opt/redis目录下</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis.conf  /opt/redis/redis.conf</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="【4】修改相关配置："><a href="#【4】修改相关配置：" class="headerlink" title="【4】修改相关配置："></a>【4】修改相关配置：</h3><ul>
<li>在 /opt/redis/ 下把 redis.conf 进行修改，把 “daemonize no” 改为 yes，否则redis不能在后台运行。</li>
</ul>
<img src="/2020/04/29/CentOS7下安装Redis-并连接win10上的Redis-Desktop-Manager工具/2.png" title="2-1">

<h3 id="【5】启动并测试："><a href="#【5】启动并测试：" class="headerlink" title="【5】启动并测试："></a>【5】启动并测试：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>在目录 /opt/redis 中使用命令 ./redis-server ./redis.conf</span><br><span class="line">./redis-server ./redis.conf</span><br><span class="line"><span class="meta">#</span>使用redis-cli测试服务</span><br><span class="line">./redis-cli</span><br></pre></td></tr></table></figure>

<img src="/2020/04/29/CentOS7下安装Redis-并连接win10上的Redis-Desktop-Manager工具/3.png" title="3-1">

<h3 id="【6】注意：想连接可视化工具，必须设置密码："><a href="#【6】注意：想连接可视化工具，必须设置密码：" class="headerlink" title="【6】注意：想连接可视化工具，必须设置密码："></a>【6】注意：想连接可视化工具，必须设置密码：</h3><img src="/2020/04/29/CentOS7下安装Redis-并连接win10上的Redis-Desktop-Manager工具/4.png" title="4-1">

<h3 id="【7】注意：想让本机以外ip的连接redis："><a href="#【7】注意：想让本机以外ip的连接redis：" class="headerlink" title="【7】注意：想让本机以外ip的连接redis："></a>【7】注意：想让本机以外ip的连接redis：</h3><ul>
<li><p>在Redis的配置文件 redis.conf 中设置了 bind 127.0.0.1, 即表明只有主机才可访问，将其注释掉即可。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /opt/redis/redis.conf</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="【8】关闭保护模式："><a href="#【8】关闭保护模式：" class="headerlink" title="【8】关闭保护模式："></a>【8】关闭保护模式：</h3><ul>
<li>在redis的配置文件里面，是否把本地保护模式给关闭，如果没有，连接不上，关闭方式：protected-mode no</li>
<li>ps: protected-mode 是3.2 之后加入的新特性，是为了禁止公网访问redis cache，加强redis安全的</li>
</ul>
<h3 id="【9】连接可视化工具："><a href="#【9】连接可视化工具：" class="headerlink" title="【9】连接可视化工具："></a>【9】连接可视化工具：</h3><img src="/2020/04/29/CentOS7下安装Redis-并连接win10上的Redis-Desktop-Manager工具/5.png" title="5-1">

<img src="/2020/04/29/CentOS7下安装Redis-并连接win10上的Redis-Desktop-Manager工具/6.png" title="6-1">

<ul>
<li><p>若连不上：关闭防火墙试试：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="【10】附：常用命令："><a href="#【10】附：常用命令：" class="headerlink" title="【10】附：常用命令："></a>【10】附：常用命令：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 检查Redis是否正常启动：</span><br><span class="line">ps -ef | grep redis</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 开启redis服务器：在（我是放到了）目录 /opt/redis 中使用命令</span><br><span class="line">./redis-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 启动redis：  (目录不固定)</span><br><span class="line">redis-server /opt/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 关闭redis：  (目录不固定)</span><br><span class="line">/opt/redis/redis-cli shutdown</span><br></pre></td></tr></table></figure>

]]></content>
      
        
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL使用source命令导入时发生1046错误]]></title>
      <url>/2020/04/23/MySQL%E4%BD%BF%E7%94%A8source%E5%91%BD%E4%BB%A4%E5%AF%BC%E5%85%A5%E6%97%B6%E5%8F%91%E7%94%9F1046%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<ul>
<li>错误：今天在使用MySQL的source命令时，出现<strong>ERROR 1046 (3D000): No database selected</strong>的错误。</li>
</ul>
<a id="more"></a>

<ul>
<li>原因：直接使用source命令，之前未创建相应的数据库，且未使用相应的数据库。</li>
<li>解决方法：</li>
</ul>
<ol>
<li>先查看数据库中是否有相应的数据库，如数据库名叫bjpowernode。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如果没有，则先创建bjpowernode数据库。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database bjpowernode;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建好后，使用该数据库。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use bjpowernode;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>再次执行source语句进行导入。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source F:\\bjpowernode.sql</span><br></pre></td></tr></table></figure>

<ul>
<li>若出现如下则表示导入成功！</li>
</ul>
<img src="/2020/04/23/MySQL使用source命令导入时发生1046错误/1.png" title="mysqldebug">]]></content>
      
        
        <tags>
            
            <tag> debug </tag>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Note-of-JavaSE_6_多线程、反射、注解]]></title>
      <url>/2020/04/21/Node-of-JavaSE-6-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="七、-多线程"><a href="#七、-多线程" class="headerlink" title="七、 多线程"></a>七、 多线程</h1><a id="more"></a>

<h2 id="I-多线程概述"><a href="#I-多线程概述" class="headerlink" title="I. 多线程概述"></a>I. 多线程概述</h2><h3 id="【1】进程和线程："><a href="#【1】进程和线程：" class="headerlink" title="【1】进程和线程："></a>【1】进程和线程：</h3><ul>
<li><p>进程是一个应用程序（一个进程就是一个软件）。</p>
<ul>
<li><p>线程是一个应用程序的执行场景/执行单元。</p>
</li>
<li><p>一个进程可以启动多个线程。</p>
</li>
<li><p>在java语言中，线程A和线程B，<strong>堆内存和方法区共享内存</strong>，但是<strong>栈内存独立</strong>，不共享。</p>
</li>
</ul>
</li>
<li><p>比如，对于JVM而言，在dos命令窗口中输入：java HelloWorld之后。会先启动JVM，而<strong>JVM就是一个进程</strong>。</p>
<ul>
<li>启动一个<strong>主线程</strong>调用main方法。</li>
<li>同时再启动一个<strong>垃圾回收线程</strong>负责看护，回收垃圾。</li>
<li>因此，最起码，java程序中有两个线程并发。</li>
</ul>
</li>
</ul>
<img src="/2020/04/21/Node-of-JavaSE-6-多线程、反射、注解/16.png" title="16-0">

<h3 id="【2】分析以下代码几个线程："><a href="#【2】分析以下代码几个线程：" class="headerlink" title="【2】分析以下代码几个线程："></a>【2】分析以下代码几个线程：</h3><ul>
<li>以下代码线程数：只有一个，因为main，m1，m2，m3都在一个栈中，因此只有一个线程。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"main begin"</span>);</span><br><span class="line">   	 m1();</span><br><span class="line">     System.out.println(<span class="string">"main over"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"m1 begin"</span>);</span><br><span class="line">     m2();</span><br><span class="line">     System.out.println(<span class="string">"m1 over"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"m2 begin"</span>);</span><br><span class="line">     m3();</span><br><span class="line">     System.out.println(<span class="string">"m2 over"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"m3 over"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="II-java中实现多线程的方式"><a href="#II-java中实现多线程的方式" class="headerlink" title="II. java中实现多线程的方式"></a>II. java中实现多线程的方式</h2><h3 id="【1】第一种方式："><a href="#【1】第一种方式：" class="headerlink" title="【1】第一种方式："></a>【1】第一种方式：</h3><ul>
<li>编写一个类，直接继承java.lang.Thread，重写run方法。</li>
<li>start方法的作用是：启动一个分支线程，在JVM中开辟一个新的栈空间，这段代码完成后，瞬间就结束了。</li>
<li>启动成功的线程会自动调用run方法，并且run方法在分支栈的底层（压栈）。main方法在主栈的底部，run和main是平级的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里是main方法，这里的代码属于主线程</span></span><br><span class="line">        <span class="comment">//新建一个分支线程对象</span></span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//调用线程对象的start方法可以启动线程，开辟新的栈空间，只要空间开出来，start()方法就结束了，线程启动成功</span></span><br><span class="line">        myThread.start();</span><br><span class="line">        <span class="comment">//这里的代码还是在主线程中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"主线程--&gt;"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"分支线程--&gt;"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思考：如果不调用start方法，直接调用myThread.run()会怎样？</p>
<ul>
<li>不会启动线程，不会分配新的分支栈，这种就是单线程。</li>
</ul>
</li>
<li><p>原理：</p>
</li>
</ul>
<img src="/2020/04/21/Node-of-JavaSE-6-多线程、反射、注解/17.png" title="17-0">

<img src="/2020/04/21/Node-of-JavaSE-6-多线程、反射、注解/18.png" title="18-0">

<h3 id="【2】第二种方法："><a href="#【2】第二种方法：" class="headerlink" title="【2】第二种方法："></a>【2】第二种方法：</h3><ul>
<li>编写一个类，实现java.lang.Runnable接口。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个可运行的对象</span></span><br><span class="line">        MyRunnable r = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//将可运行的对象封装成一个线程对象</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"主线程--&gt;"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不是一个线程类，是一个可运行的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"分支线程--&gt;"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【3】两种方式比较："><a href="#【3】两种方式比较：" class="headerlink" title="【3】两种方式比较："></a>【3】两种方式比较：</h3><ul>
<li>建议使用第二种方式：因为第二种是实现一个接口，如果还想继承其他类可以extends，但是第一种的话直接继承了Thread，从而不能继承其他类。</li>
</ul>
<h3 id="【4】使用匿名内部类创建多线程："><a href="#【4】使用匿名内部类创建多线程：" class="headerlink" title="【4】使用匿名内部类创建多线程："></a>【4】使用匿名内部类创建多线程：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接口不能new对象，这是通过一个没有名字的类new出来的一个对象</span></span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"线程--&gt;"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//启动线程</span></span><br><span class="line">    t.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【5】第三种方法："><a href="#【5】第三种方法：" class="headerlink" title="【5】第三种方法："></a>【5】第三种方法：</h3><ul>
<li>实现<strong>Callable接口</strong>。（JDK8新特性）</li>
<li>这种方式可以获取线程的返回值。之前的方式无法获取线程执行的返回值因为run方法是返回void。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask; <span class="comment">//JUC包下的属于java的并发包，老JDK中没有这个包，新特性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//第一步：创建一个“未来任务类”对象</span></span><br><span class="line">    FutureTask task = <span class="keyword">new</span> FutureTask(<span class="keyword">new</span> Callable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; <span class="comment">//call方法相当于run方法</span></span><br><span class="line">            System.out.println(<span class="string">"call method begin"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            System.out.println(<span class="string">"call method end"</span>);</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//创建线程对象</span></span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(task);</span><br><span class="line">    <span class="comment">//启动线程</span></span><br><span class="line">    t.start();</span><br><span class="line">    <span class="comment">//获取返回值</span></span><br><span class="line">    Object obj = task.get(); <span class="comment">//使得当前线程阻塞</span></span><br><span class="line">    <span class="comment">//下面方法要执行,需要等到get()方法的结束</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意： Object obj = task.get();语句会使得main线程阻塞，因为只有线程 t 执行完成后才会有返回值。</li>
</ul>
<h2 id="III-线程生命周期"><a href="#III-线程生命周期" class="headerlink" title="III. 线程生命周期"></a>III. 线程生命周期</h2><img src="/2020/04/21/Node-of-JavaSE-6-多线程、反射、注解/19-1.png" title="19-1">

<ul>
<li>附加：执行<strong>sleep、join</strong>方法可能从<strong>“运行”—&gt;”阻塞”</strong>。执行<strong>yield</strong>方法可能使得<strong>“运行”—&gt;”就绪”</strong>。</li>
</ul>
<h2 id="IV-几种方法："><a href="#IV-几种方法：" class="headerlink" title="IV. 几种方法："></a>IV. 几种方法：</h2><h3 id="【1】获取线程名字："><a href="#【1】获取线程名字：" class="headerlink" title="【1】获取线程名字："></a>【1】获取线程名字：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyThread t = <span class="keyword">new</span> MyThread(); <span class="comment">//MyThread继承了Thread</span></span><br><span class="line">t.setName(<span class="string">"tttt"</span>); <span class="comment">//改名字tttt</span></span><br><span class="line">String tName = t.getName(); <span class="comment">//获取名字</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//看默认名字</span></span><br><span class="line">MyThread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">String tName = t.getName(); <span class="comment">//Thread-0</span></span><br></pre></td></tr></table></figure>

<h3 id="【2】获取当前线程对象："><a href="#【2】获取当前线程对象：" class="headerlink" title="【2】获取当前线程对象："></a>【2】获取当前线程对象：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当线程t1执行run方法，那么当前线程指的就是t1</span></span><br><span class="line"><span class="comment">//当线程t2执行run方法，那么当前线程指的就是t2</span></span><br><span class="line"><span class="comment">//在main中的话获取的线程就是main方法</span></span><br><span class="line">Thread currentThread = Thread.currentThread();</span><br><span class="line">System.out.println(currentThread.getName());</span><br></pre></td></tr></table></figure>

<h3 id="【3】sleep-方法："><a href="#【3】sleep-方法：" class="headerlink" title="【3】sleep()方法："></a>【3】sleep()方法：</h3><ul>
<li>基本用法：让当前线程进入休眠：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//让当前线程（主线程）进入休眠状态</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>); <span class="comment">//休眠5秒</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5秒后执行这里的代码</span></span><br><span class="line">    System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>关于Thread.sleep()方法的面试题：<ul>
<li>问：下列代码会使得 t 线程休眠吗？</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.setName(<span class="string">"t"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>答不会Thread.sleep()休眠的是当前线程，和谁调用它没关系，所以即使是t.sleep(5000);也不会让t线程休眠，而是让main休眠，休眠5秒后输出”hello world!”。</li>
</ul>
<h3 id="【4】终止线程的睡眠："><a href="#【4】终止线程的睡眠：" class="headerlink" title="【4】终止线程的睡眠："></a>【4】终止线程的睡眠：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thrad t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        t.setName(<span class="string">"t"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="comment">//希望5秒之后，t线程醒来（活干完了）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//中断t线程的睡眠（依靠了java的异常处理机制）</span></span><br><span class="line">        <span class="comment">//使得t线程抛出InterruptedException异常</span></span><br><span class="line">        t.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//重点：run方法当中的异常不能throws，只能try...catch</span></span><br><span class="line">    <span class="comment">//因为run()方法在父类中没有抛出任何异常，子类不能比父类抛出更多的异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;begin"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【5】强行终止一个线程："><a href="#【5】强行终止一个线程：" class="headerlink" title="【5】强行终止一个线程："></a>【5】强行终止一个线程：</h3><ul>
<li>一个已经过时的方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用t.stop();强行终止，（t是一个线程）</span></span><br><span class="line"><span class="comment">//但是这个方法已过时，不建议使用</span></span><br><span class="line"><span class="comment">//因为容易丢失数据，线程没有保存的数据容易丢失</span></span><br><span class="line">t.stop();</span><br></pre></td></tr></table></figure>

<ul>
<li>合理的方法：设置一个boolean变量：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyRunnable r = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        Thread t = <span class="keyword">new</span>  Thread(r);</span><br><span class="line">        t.setName(<span class="string">"t"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="comment">//模拟5秒</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//终止线程</span></span><br><span class="line">        r.run = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设置一个标志</span></span><br><span class="line">    <span class="keyword">boolean</span> run = <span class="keyword">true</span>;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//模拟十秒</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(run) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//有什么东西没有保存可以在这个代码块中保存</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="V-线程调度"><a href="#V-线程调度" class="headerlink" title="V. 线程调度"></a>V. 线程调度</h2><h3 id="【1】线程调度概述："><a href="#【1】线程调度概述：" class="headerlink" title="【1】线程调度概述："></a>【1】线程调度概述：</h3><ul>
<li>常见的线程调度方式：<ul>
<li>抢占式调度模型：哪个线程的优先级比较高，抢到的CPU时间片的概率就高一些。java采用的就是抢占式调度模型。</li>
<li>均分式调度模型：平均分配CPU时间片。每个线程占有的CPU时间片的时间长度一样。有些编程语言采用的就是这种方式。</li>
</ul>
</li>
<li>线程优先级：<ul>
<li>默认优先级：5</li>
<li>最低优先级：1</li>
<li>最高优先级：10</li>
<li>优先级高的获取时间片会多一些（大概率是这样的）</li>
</ul>
</li>
</ul>
<h3 id="【2】java中常见的线程调度方法："><a href="#【2】java中常见的线程调度方法：" class="headerlink" title="【2】java中常见的线程调度方法："></a>【2】java中常见的线程调度方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例方法：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> newPriority)</span></span>; <span class="comment">//设置线程的优先级</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPriority</span><span class="params">()</span></span>; <span class="comment">//获取线程的优先级    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">()</span></span>; <span class="comment">//合并线程:如调用t.join();则当前线程受阻，t线程执行，t执行完毕后再执行当前线程。内存中不是栈的合并，而是栈的协调</span></span><br><span class="line"><span class="comment">//静态方法：</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">yield</span><span class="params">()</span></span>; <span class="comment">//让位方法，不是阻塞，让当前的线程从“运行状态”到“就绪状态”，但有可能再抢到时间片</span></span><br></pre></td></tr></table></figure>

<h2 id="VI-线程安全（重点）"><a href="#VI-线程安全（重点）" class="headerlink" title="VI. 线程安全（重点）"></a>VI. 线程安全（重点）</h2><h3 id="【1】线程安全概述："><a href="#【1】线程安全概述：" class="headerlink" title="【1】线程安全概述："></a>【1】线程安全概述：</h3><ul>
<li><p>为什么这个是重点？</p>
<ul>
<li>以后在开发中，我们的项目都是运行在服务器中的，而服务器已经将线程的定义，线程对象的创建，启动等都已经实现完成了，这些代码都不需要编写。</li>
<li>你需要知道的是：编写的程序需要放到一个多线程的环境下运行，需要关注的是这些数据在<strong>多线程并发</strong>的环境下是否是安全的。</li>
</ul>
</li>
<li><p>什么时候数据在多线程并发的时候会存在安全问题？</p>
<ul>
<li>条件一：多线程并发。</li>
<li>条件二：有共享数据。</li>
<li>条件三：共享数据有修改的行为。</li>
<li>满足以上三个条件之后，就会存在线程安全问题。</li>
</ul>
</li>
<li><p>如何解决线程安全问题？</p>
<ul>
<li>线程<strong>排队</strong>执行。（不能并发）</li>
<li>这种机制叫做<strong>线程同步机制</strong>。</li>
<li>因此<strong>线程同步</strong>就是<strong>线程排队</strong>，线程排队会牺牲一部分效率。</li>
</ul>
</li>
<li><p>什么是异步编程模型和同步编程模型？</p>
<ul>
<li>异步编程模型：线程t1和t2各管各的，互不干涉。其实就是多线程并发，效率较高。<strong>异步就是并发</strong>。</li>
<li>同步编程模型：线程t1和线程t2，在线程t1执行的时候，必须等待t2执行结束。或者说在线程t2执行的时候，必须等待t1执行结束。两个线程之间发生了等待关系。这就是同步编程模型，效率较低。<strong>同步就是排队</strong>。</li>
</ul>
</li>
</ul>
<h3 id="【2】编写程序实现银行账户取款："><a href="#【2】编写程序实现银行账户取款：" class="headerlink" title="【2】编写程序实现银行账户取款："></a>【2】编写程序实现银行账户取款：</h3><ul>
<li>创建银行账户类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String actno; <span class="comment">//账号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> balance; <span class="comment">//余额</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String actno, <span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.actno = actno;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getActno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> actno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">srtActno</span><span class="params">(String actno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.actno = actno; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取款的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//线程同步代码块，synchronized后面括号内的传参很关键，这个数据必须是多线程共享的数据，才能达到多线程排队</span></span><br><span class="line">        <span class="comment">//()中写的是你想要哪几个线程排队，把共享的对象写进去，但这个共享对象不会对其他线程产生影响</span></span><br><span class="line">        <span class="comment">//这里账户对象是共享的，因此传递this即可</span></span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">double</span> before = <span class="keyword">this</span>.getBalance();</span><br><span class="line">            <span class="keyword">double</span> after = before - money;</span><br><span class="line">            <span class="keyword">this</span>.setBalance(after); <span class="comment">//更新余额</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建账户线程类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Account act;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountThread</span><span class="params">(Account act)</span> </span>&#123;<span class="keyword">this</span>.act = act;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> money = <span class="number">5000</span>;</span><br><span class="line">        act.withdraw(money);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"对"</span> + act.getActno() + <span class="string">"取款"</span> + money + <span class="string">"成功，余额"</span> + act.getBalance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> vois <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account act = <span class="keyword">new</span> Account(<span class="string">"act-001"</span>,<span class="number">10000</span>);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> AccountThread(act);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> AccountThread(act);</span><br><span class="line">        t1.setName(<span class="string">"t1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"t2"</span>);</span><br><span class="line">        t1.start(<span class="string">"t1"</span>);</span><br><span class="line">        t2.start(<span class="string">"t2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【3】对synchronized的理解："><a href="#【3】对synchronized的理解：" class="headerlink" title="【3】对synchronized的理解："></a>【3】对synchronized的理解：</h3><ul>
<li><p>在java语言中，任何一个对象都有一把锁，其实这把锁就是标记。</p>
</li>
<li><p>上述代码的执行原理：</p>
<ol>
<li><p>线程t1、t2并发，必然有一先一后。</p>
</li>
<li><p>假如t1先执行，遇到synchronized，这个时候自动找”后面共享对象”的对象锁，找到之后，占有这把锁，执行同步代码块中的程序，程序执行中，一直占有，直到同步代码块结束，这把锁才会释放。</p>
</li>
<li><p>假设t1已经占有这把锁，此时t2也遇到synchronized关键字，也会占用后面共享对象这把锁，结果这把锁已经被占有，t2只能在同步代码块外面等待t1的结束，直到t1把同步代码块结束了，t1归还这把锁给t2。</p>
</li>
</ol>
</li>
</ul>
<h3 id="【4】银行账户同步另几种写法："><a href="#【4】银行账户同步另几种写法：" class="headerlink" title="【4】银行账户同步另几种写法："></a>【4】银行账户同步另几种写法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下这种方法也行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object(); <span class="comment">//改动点1</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(obj) &#123; <span class="comment">//改动点2</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//但是这种方法不行,因为obj是局部变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">new</span> Object(); <span class="comment">//改动点1</span></span><br><span class="line">        <span class="keyword">synchronized</span>(obj) &#123; <span class="comment">//改动点2</span></span><br><span class="line">			...</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下这种方法也行，abc在字符串常量池中，但是所有线程都会同步</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="string">"abc"</span>) &#123; <span class="comment">//改动点</span></span><br><span class="line">           ...</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下这种方法不行，发生空指针异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">null</span>) &#123; <span class="comment">//改动点</span></span><br><span class="line">           ...</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下这种方法扩大了同步范围，也可以，只是效率变低了</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">        <span class="keyword">synchronized</span>(act) &#123; <span class="comment">//改动点（并将Account类中的同步语句去除）</span></span><br><span class="line">          	act.withdraw(money);</span><br><span class="line">        &#125;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>synchronized用在实例方法上：<ul>
<li>synchronized出现在实例方法上一定<strong>锁的是this</strong>，不能是其他。</li>
<li>因此这种方式不灵活。由于整个方法体同步，可能还会导致扩大同步的范围。</li>
<li>优点：代码节简了。如果整个方法体都需要同步，且同步的对象是this，则建议使用这种方法。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用以下方法也可以</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【5】三大变量的线程安全问题："><a href="#【5】三大变量的线程安全问题：" class="headerlink" title="【5】三大变量的线程安全问题："></a>【5】三大变量的线程安全问题：</h3><ul>
<li>java中三种变量：<strong>实例变量（堆中）、静态变量（方法区）、局部变量（栈中）</strong>，其中实例变量和静态变量都叫<strong>成员变量</strong>。</li>
<li>三大变量中，局部变量永远不会存在线程安全问题。因为局部变量在栈中，不会共享。</li>
<li>实例变量在堆中，堆只有一个，静态变量在方法区，方法区只有一个。</li>
</ul>
<h3 id="【6】小结："><a href="#【6】小结：" class="headerlink" title="【6】小结："></a>【6】小结：</h3><ul>
<li>synchronized三种写法：<ul>
<li>第一种：同步代码块：灵活。</li>
<li>第二种：在实例方法上使用synchronized，同步整个方法体。</li>
<li>第三种：在静态方法上使用synchronized。表示找类锁，就算创建了100个对象，也只有一把锁。</li>
</ul>
</li>
</ul>
<h3 id="【7】面试题："><a href="#【7】面试题：" class="headerlink" title="【7】面试题："></a>【7】面试题：</h3><ul>
<li>第一问：以下代码doOther执行前需要等待doSome执行完毕吗？</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClass mc = <span class="keyword">new</span> MyClass();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> MyThread(mc);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> MyThread(mc);</span><br><span class="line">        t1.setName(<span class="string">"t1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"t2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>); <span class="comment">//保证t1先执行</span></span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyClass mc;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(MyClass mc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mc = mc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Thread.currentThread().getName().equals(<span class="string">"t1"</span>)) &#123;</span><br><span class="line">            mc.doSome();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Thread.currentThread().getName().equals(<span class="string">"t2"</span>)) &#123;</span><br><span class="line">            mc.doOther();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doSome begin"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"doSome over"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doOther</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doOther begin"</span>);</span><br><span class="line">        System.out.println(<span class="string">"doOther over"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>答1：不需要，因为执行doOther没有synchronized修饰，执行不需要this对象锁。</p>
<ul>
<li>输出结果：doSome begin doOther begin doOther over doSome over</li>
</ul>
</li>
<li><p>第二问：以下代码doOther执行前需要等待doSome执行完毕吗？</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//“...”表示与第一问相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doOther</span><span class="params">()</span> </span>&#123; <span class="comment">//改动点</span></span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>答2：需要，因为this（即mc）对象锁已经被t1占据了。</p>
<ul>
<li>输出结果：doSome begin doSome over begin doOther begin doOther over </li>
</ul>
</li>
<li><p>第三问：以下代码doOther执行前需要等待doSome执行完毕吗？</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//“...”表示与第一问相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClass mc1 = <span class="keyword">new</span> MyClass(); <span class="comment">//改动点</span></span><br><span class="line">        MyClass mc2 = <span class="keyword">new</span> MyClass(); <span class="comment">//改动点</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> MyThread(mc1); <span class="comment">//改动点</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> MyThread(mc2); <span class="comment">//改动点</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doOther</span><span class="params">()</span> </span>&#123; <span class="comment">//改动点</span></span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>答3：不需要，因为mc对象有两个，两把锁。</p>
</li>
<li><p>第四问：以下代码doOther执行前需要等待doSome执行完毕吗？</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//“...”表示与第一问相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClass mc1 = <span class="keyword">new</span> MyClass(); <span class="comment">//改动点</span></span><br><span class="line">        MyClass mc2 = <span class="keyword">new</span> MyClass(); <span class="comment">//改动点</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> MyThread(mc1); <span class="comment">//改动点</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> MyThread(mc2); <span class="comment">//改动点</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span> </span>&#123; <span class="comment">//改动点</span></span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doOther</span><span class="params">()</span> </span>&#123; <span class="comment">//改动点</span></span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>答4：需要，synchronized出现在静态方法上是找类锁，<strong>类锁只有一把</strong>。</li>
</ul>
<h3 id="【8】死锁："><a href="#【8】死锁：" class="headerlink" title="【8】死锁："></a>【8】死锁：</h3><ul>
<li>注意不要写成嵌套synchronized形式，容易发生死锁。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object o1 = <span class="keyword">new</span> Object();</span><br><span class="line">        Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> MyThread1(o1, o2);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> MyThread2(o1, o2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Object o1;</span><br><span class="line">    Object o2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread1</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.o1 = o1;</span><br><span class="line">        <span class="keyword">this</span>.o2 = o2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(o1) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(InterruptedException) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span>(o2) &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Object o1;</span><br><span class="line">    Object o2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread1</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.o1 = o1;</span><br><span class="line">        <span class="keyword">this</span>.o2 = o2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(o2) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(InterruptedException) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span>(o1) &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【9】实际开发中怎么解决线程安全问题："><a href="#【9】实际开发中怎么解决线程安全问题：" class="headerlink" title="【9】实际开发中怎么解决线程安全问题："></a>【9】实际开发中怎么解决线程安全问题：</h3><ul>
<li>是一上来就选择线程同步吗？<ul>
<li>不是，synchronized会使得程序的执行效率降低，用户体验不好，用户吞吐量低。在不得已的情况下使用线程同步机制。</li>
</ul>
</li>
<li>第一种方案：尽量使用<strong>局部变量</strong>代替使用实例变量和静态变量。</li>
<li>第二种方案：如果必须是实例变量，那么可以考虑<strong>创建多个对象</strong>，这样实例变量的内存就不共享了。</li>
<li>第三种方案：如果不能使用局部变量和创建多个对象，这时就只能选择synchronized。</li>
</ul>
<h2 id="VII-守护线程"><a href="#VII-守护线程" class="headerlink" title="VII. 守护线程"></a>VII. 守护线程</h2><h3 id="【1】守护线程概述："><a href="#【1】守护线程概述：" class="headerlink" title="【1】守护线程概述："></a>【1】守护线程概述：</h3><ul>
<li>java语言中线程分成两类：<ul>
<li>一类是：用户线程</li>
<li>另一类是：守护线程</li>
<li>其中具有代表性的就是：垃圾回收线程（守护线程）</li>
<li>注意：主线程main是一个用户线程</li>
</ul>
</li>
<li>守护线程特点：<ul>
<li>一般守护线程是一个死循环，所有的用户线程只要结束，守护线程就会自动结束。</li>
</ul>
</li>
<li>守护线程用在什么地方：<ul>
<li>如每天00:00的时候系统数据自动备份。</li>
<li>这就需要一个定时器，并且我们可以将定时器设置为守护线程，一直在哪里看着，每到00:00的时候就进行一次备份。所用的用户线程如果结束了，守护线程就自动退出。</li>
</ul>
</li>
</ul>
<h3 id="【2】守护线程实现："><a href="#【2】守护线程实现：" class="headerlink" title="【2】守护线程实现："></a>【2】守护线程实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> BakDataThread();</span><br><span class="line">        t.setName(<span class="string">"备份数据的线程"</span>);</span><br><span class="line">        <span class="comment">//启动线程之前将线程设置为守护线程</span></span><br><span class="line">        t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"---&gt;"</span> +i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BakDataThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//即使是死循环，但是守护线程也会随着用户线程的终止而终止</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"---&gt;"</span> + (++i));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="VIII-定时器"><a href="#VIII-定时器" class="headerlink" title="VIII. 定时器"></a>VIII. 定时器</h2><h3 id="【1】定时器概述："><a href="#【1】定时器概述：" class="headerlink" title="【1】定时器概述："></a>【1】定时器概述：</h3><ul>
<li>定时器作用：间隔特定的时间，执行特定的程序。</li>
<li>实现方式：<ul>
<li>可以使用sleep的方式，设置睡眠时间，每到这个时间点醒来，执行任务。这种方式是最原始的定时器（比较low）。</li>
<li>方式二：在java的类库中已经写好了一个定时器：java.util.Timer，可以直接拿来，不过这种方式开发中很少用，很多高级框架都是支持定时任务的。</li>
<li>方式三：实际开发中，目前使用比较多的是Spring的SpringTask框架，这个框架只要进行见到的配置，就可以完成定时器的任务。</li>
</ul>
</li>
</ul>
<h3 id="【2】定时器的实现："><a href="#【2】定时器的实现：" class="headerlink" title="【2】定时器的实现："></a>【2】定时器的实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建定时器对象</span></span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        <span class="comment">//Timer timer = new Timer(true);//守护线程的方式</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//指定定时任务</span></span><br><span class="line">        <span class="comment">//timer.schedule(定时任务，第一次执行时间，间隔多久执行一次);</span></span><br><span class="line">        SimpleDataFormat sdf = <span class="keyword">new</span> SimpleDataFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        Date firstTime = sdf.parse(<span class="string">"2020-03-14 09:30:00"</span>)</span><br><span class="line">        timer.schedule(<span class="keyword">new</span> LogTimerTask(), firstTime, <span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编写你需要执行的任务</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogTimerTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//编写比需要执行的任务</span></span><br><span class="line">        SimpleDataFormat sdf = <span class="keyword">new</span> SimpleDataFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        String strTime = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(strTime + <span class="string">"完成一次数据备份！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IX-生产者和消费者模式"><a href="#IX-生产者和消费者模式" class="headerlink" title="IX. 生产者和消费者模式"></a>IX. 生产者和消费者模式</h2><h3 id="【1】wait和notify方法："><a href="#【1】wait和notify方法：" class="headerlink" title="【1】wait和notify方法："></a>【1】wait和notify方法：</h3><ul>
<li>wait和notify方法不是线程对象的方法，是java中任何一个对象都有的方法，因为这两个方法是<strong>Object类中自带</strong>的。</li>
<li>wait() 方法作用：<ul>
<li>o.wait() 表示让正在<strong>o对象上活动的线程</strong>进入<strong>等待状态</strong>，<strong>无期限等待</strong>，直到被唤醒为止。</li>
</ul>
</li>
<li>notify() 方法作用：<ul>
<li>o.notify() 表示唤醒正在o对象上等待的线程。</li>
<li>还有一个notifyAll() 方法，唤醒o对象上处于等待的所有线程。</li>
</ul>
</li>
</ul>
<img src="/2020/04/21/Node-of-JavaSE-6-多线程、反射、注解/21.png" title="21-0">

<h3 id="【2】生产者和消费者模式："><a href="#【2】生产者和消费者模式：" class="headerlink" title="【2】生产者和消费者模式："></a>【2】生产者和消费者模式：</h3><ul>
<li>理解：</li>
</ul>
<img src="/2020/04/21/Node-of-JavaSE-6-多线程、反射、注解/22.png" title="22-0">

<ul>
<li>实现：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">仓库我们采用List集合</span></span><br><span class="line"><span class="comment">List集合中假设只能存储1个元素</span></span><br><span class="line"><span class="comment">里面含有一个元素表示满了，0个元素表示空了</span></span><br><span class="line"><span class="comment">效果：生产一个消费一个</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        Thread t1= <span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(list));</span><br><span class="line">        Thread t2= <span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer(list));</span><br><span class="line">        t1.setName(<span class="string">"生产者线程"</span>);</span><br><span class="line">        t2.setNmae(<span class="string">"消费者线程"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//仓库</span></span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//一直生产</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(list) &#123; <span class="comment">//给仓库对象list加锁</span></span><br><span class="line">                <span class="keyword">if</span>(list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        list.wait(); <span class="comment">//当前进入等待状态,释放list锁</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//说明可以生产</span></span><br><span class="line">                Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">                list.add(obj);</span><br><span class="line">                <span class="comment">//唤醒消费者消费</span></span><br><span class="line">                list.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//仓库</span></span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		 <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(list) &#123; <span class="comment">//给仓库对象list加锁</span></span><br><span class="line">                <span class="keyword">if</span>(list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        list.wait(); <span class="comment">//当前进入等待状态,释放list锁</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//仓库中有数据进行消费</span></span><br><span class="line">                Object obj = list.remove(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//唤醒生产者生产</span></span><br><span class="line">                list.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八、-反射机制"><a href="#八、-反射机制" class="headerlink" title="八、 反射机制"></a>八、 反射机制</h1><h2 id="I-反射机制概述"><a href="#I-反射机制概述" class="headerlink" title="I. 反射机制概述"></a>I. 反射机制概述</h2><ul>
<li>反射机制有什么用？<ul>
<li>通过java语言中的反射机制可以操作字节码文件。</li>
<li>类似于黑客。（可以修改字节码文件）</li>
<li>通过反射机制可以操作代码片段。（class文件）</li>
<li>作用：让程序更加灵活。</li>
</ul>
</li>
<li>反射机制的相关类在哪个包下？<ul>
<li>java.lang.reflect.*;</li>
</ul>
</li>
<li>反射机制相关的类有哪些？<ul>
<li>java.lang.Class：代表整个字节码，代表整个类。</li>
<li>java.lang.reflect.Method：代表字节码中的方法字节码。代表类中的方法。</li>
<li>java.lang.reflect.Constructor：代表字节码中的构造方法字节码。代表类中的构造方法。</li>
<li>java.lang.reflect.Field：代表字节码中的属性字节码。代表类中的成员变量。</li>
</ul>
</li>
</ul>
<h2 id="II-Class类"><a href="#II-Class类" class="headerlink" title="II. Class类"></a>II. Class类</h2><h3 id="【1】获取Class的三种方式："><a href="#【1】获取Class的三种方式：" class="headerlink" title="【1】获取Class的三种方式："></a>【1】获取Class的三种方式：</h3><ul>
<li>方式一：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//c1代表String.class文件，或者说代表String类型</span></span><br><span class="line">    Class c1 = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">    <span class="comment">//c2代表Data类型</span></span><br><span class="line">    Class c2 = Class.forName(<span class="string">"java.util.Date"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方式二：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java中任何一个对象都有一个方法：getClass()</span></span><br><span class="line">String s = <span class="string">"abc"</span>;</span><br><span class="line">Class x = s.getClass(); <span class="comment">//x代表String.class字节码文件，x代表String类型。</span></span><br><span class="line">System.out.println(c1 == x); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方式三：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java语言中任何一种类型，包括基本数据类型，都有.class属性</span></span><br><span class="line">Class z = String.class; <span class="comment">//z代表String类型</span></span><br><span class="line">Class k = Date.class; <span class="comment">//k代表Date类型</span></span><br></pre></td></tr></table></figure>

<img src="/2020/04/21/Node-of-JavaSE-6-多线程、反射、注解/23.png" title="23-0">

<h3 id="【2】通过反射实例化对象："><a href="#【2】通过反射实例化对象：" class="headerlink" title="【2】通过反射实例化对象："></a>【2】通过反射实例化对象：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：newInstance()方法内部上实际调用无参构造方法，必须保证无参构造存在才行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class c = Class.forName(<span class="string">"com.bjpowernode.java.bean.User"</span>);</span><br><span class="line">            Object obj = c.newInstance(); <span class="comment">//创建User类型对象，并调用无参构造方法</span></span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(ClassNotFounException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.pritnln(<span class="string">"无参数构造方法！"</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【3】验证反射机制的灵活性："><a href="#【3】验证反射机制的灵活性：" class="headerlink" title="【3】验证反射机制的灵活性："></a>【3】验证反射机制的灵活性：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//classinfo.properties配置文件</span></span><br><span class="line">className=com.bjpowernode.java.bean.User</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(Sting[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FileReader reader = <span class="keyword">new</span> FileReader(<span class="string">"chapter25/classinfo.properties"</span>);</span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        pro.load(reader);</span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="comment">//通过key获取value</span></span><br><span class="line">        String className = pro.getProperty(<span class="string">"className"</span>);</span><br><span class="line">        System.out.println(className);</span><br><span class="line">        <span class="comment">//通过反射机制实例化对象</span></span><br><span class="line">        Class c = Class.forName(className);</span><br><span class="line">        Object obj = c.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>此时，若更改classinfo.properties文件为：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">className=java.util.Date</span><br></pre></td></tr></table></figure>

<ul>
<li><p>则创建的obj对象输出的就是形如”sat Mar 14:23:19: CST 2020”的时间。</p>
</li>
<li><p>因此可以看出，newInstance()方法创建的对象，优点是非常灵活：<strong>在不改变代码的基础之上，修改配置文件，可以做到不同对象的实例化</strong>（符合OCP开闭原则；对扩展开放，对修改关闭）。</p>
</li>
<li><p>高层的框架如ssh、ssm都用了java反射机制。学会反射机制有利于剖析框架底层的源代码。</p>
</li>
</ul>
<h3 id="【4】只让静态代码块执行用forName："><a href="#【4】只让静态代码块执行用forName：" class="headerlink" title="【4】只让静态代码块执行用forName："></a>【4】只让静态代码块执行用forName：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重点：如果你只希望一个类的静态代码块执行，其他的代码不执行，用Class.forName("完整类名")</span></span><br><span class="line"><span class="comment">//这样会导致类加载，类加载时，静态代码块执行</span></span><br><span class="line"><span class="comment">//后面jdbc技术会使用到</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//Class.forName()这个方法的执行导致：类加载</span></span><br><span class="line">            Class.forName(<span class="string">"com.bjpowernodes.java.reflect.MyClass"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(ClassNotFoundException) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyClass类的静态代码块执行了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【5】获取类路径下文件的绝对路径："><a href="#【5】获取类路径下文件的绝对路径：" class="headerlink" title="【5】获取类路径下文件的绝对路径："></a>【5】获取类路径下文件的绝对路径：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下这种代码的缺点是：移植性差，在IDEA中默认的当前位置是project的根，这个代码离开了IDEA就换到其他位置，可能当前路径就不是project的根了，此时路径无效</span></span><br><span class="line">FileReader reader = <span class="keyword">new</span> FileReader(<span class="string">"chapter25/classinfo.properties"</span>);</span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一种通用的路径。即是代码换位置了，这样编写仍然通用</span></span><br><span class="line"><span class="comment">//但通用条件是：这个文件必须在类路径下</span></span><br><span class="line"><span class="comment">//类路径：凡是在src下的都是类路径下【记住】</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AboutPath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//Thread.currentThread()当前线程对象</span></span><br><span class="line">        <span class="comment">//getContextClassLoader()是线程对象的方法，可以获取到当前线程类加载器对象</span></span><br><span class="line">        <span class="comment">//getResource() 【获取资源】这是类加载器对象的方法，当前线程的类加载器默认从类的根路径加载资源</span></span><br><span class="line">        String path = Thread.currentThread().getcontextClassLoader().getResource(<span class="string">"classinfo.properties"</span>).getPath();</span><br><span class="line">        System.out.println(path); <span class="comment">//C:/Users/Admin/IdeaProjects/javase/chapter25/classinfo.properties</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【6】以流的形式直接返回："><a href="#【6】以流的形式直接返回：" class="headerlink" title="【6】以流的形式直接返回："></a>【6】以流的形式直接返回：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoPropertiesTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//以流的形式返回</span></span><br><span class="line">        InputStream reader = Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="string">"classinfo.properties"</span>);</span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        pro.load(reader);</span><br><span class="line">        reader.close();</span><br><span class="line">        String className = pro.getProperties(<span class="string">"className"</span>);</span><br><span class="line">        System.out.println(className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【7】资源绑定器："><a href="#【7】资源绑定器：" class="headerlink" title="【7】资源绑定器："></a>【7】资源绑定器：</h3><ul>
<li>以下是拿到一个类名最简单的方式（终极方式）：<ul>
<li>不需要new IO流，不需要创建Properties类。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util包下提供了一个资源绑定器，便于获取属性配置文件中的内容</span></span><br><span class="line"><span class="comment">//使用以下这种方式的时候，属性配置文件xxx.properties必须放到类路径下</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceBundleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//资源绑定器，只能绑定properties文件，必须在类路径下，并且不写扩展名</span></span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"classinfo2"</span>);</span><br><span class="line">        String className = bundle.getString(<span class="string">"className"</span>);</span><br><span class="line">        System.out.println(className); <span class="comment">//java.util.Date</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【8】类加载器："><a href="#【8】类加载器：" class="headerlink" title="【8】类加载器："></a>【8】类加载器：</h3><ul>
<li>什么是类加载器：<ul>
<li>专门负责加载类的命令/工具。</li>
<li>ClassLoader</li>
</ul>
</li>
<li>jdk中自带了3个类加载器：<ul>
<li>启动类加载器、扩展类加载器、应用类加载器。</li>
</ul>
</li>
<li>启动类加载器（父加载器）：<ul>
<li>如一行代码：String s = “123”;开始执行前，会将所需类加载到JVM中。即找到String.class,找到就加载。</li>
<li>注意：启动类加载器专门加载：C:\Program Files\Java\jdk1.8.0_101\jre\lib\rt.jar, 而rt.jar中都是JDK最核心的类库。</li>
</ul>
</li>
<li>扩展类加载器（母加载器）：<ul>
<li>如果通过启动类加载器加载不到的，就会通过扩展类加载器加载。</li>
<li>注意：扩展类加载器专门加载：C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\*.jar。</li>
</ul>
</li>
<li>应用类加载器:<ul>
<li>如果”扩展类加载器”没有加载到，就会通过应用类加载器加载。</li>
<li>注意：应用类加载器专门加载：classpath中的jar包（class文件）</li>
</ul>
</li>
<li>双亲委派机制：java中为了保证类加载安全：使用了双亲委派机制，优先从父加载器加载，再从母加载器加载，如果都加载不到，才会考虑从应用类加载器加载。防止黑客修改如String类等。</li>
</ul>
<h3 id="【9】获取父类和父接口："><a href="#【9】获取父类和父接口：" class="headerlink" title="【9】获取父类和父接口："></a>【9】获取父类和父接口：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class stringClass = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line"><span class="comment">//获取String的父类</span></span><br><span class="line">Class superClass = stringClass.getSuperClass();</span><br><span class="line">System.out.println(superClass.getName()); <span class="comment">//java.lang.Object</span></span><br><span class="line"><span class="comment">//获取String类实现的所有接口（一个类可以多实现）</span></span><br><span class="line">Class[] interfaces = stringClass.getInterfaces();</span><br><span class="line">for(Class interface : interfaces) &#123;</span><br><span class="line">    System.out.println(<span class="class"><span class="keyword">interface</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="III-Field类："><a href="#III-Field类：" class="headerlink" title="III. Field类："></a>III. Field类：</h2><h3 id="【1】基本用法："><a href="#【1】基本用法：" class="headerlink" title="【1】基本用法："></a>【1】基本用法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反射属性Field</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Field翻译为字段，其实就是属性/成员</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> no; <span class="comment">//“public int no;”整个是一个Field对象</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">boolean</span> sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取整个类</span></span><br><span class="line">        Class studentClass = Class.forName(<span class="string">"com.bjpowernode.java.bean.Student"</span>);</span><br><span class="line">        </span><br><span class="line">        String className = studentClass.getName();</span><br><span class="line">        System.out.println(<span class="string">"完整类名"</span>+className);<span class="comment">//com.bjpowernode.java.bean.Student</span></span><br><span class="line">        String simpleName = studentClass.getSimpleName();</span><br><span class="line">        System.out.println(<span class="string">"简类名"</span>+simpleName);<span class="comment">//Student   </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取类中的Field</span></span><br><span class="line">        Fields[] fields = studentClass.getFields();</span><br><span class="line">        System.out.println(fields.length); <span class="comment">//1</span></span><br><span class="line">        <span class="comment">//取出这个Field</span></span><br><span class="line">        Field f = fields[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//获取这个Field的名字</span></span><br><span class="line">        String fieldName = f.getName();</span><br><span class="line">        System.out.println(fieldName); <span class="comment">//no（说明获取的是所有public修饰的Field）</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取所有的Field（包括private、protected、默认修饰的）</span></span><br><span class="line">        Field[] fs = studentClass.getDeclaredFields();</span><br><span class="line">        System.out.println(fs.length); <span class="comment">//4</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历：</span></span><br><span class="line">        <span class="keyword">for</span>(Field field : fs) &#123;</span><br><span class="line">            <span class="comment">//获取属性的修饰符</span></span><br><span class="line">            <span class="keyword">int</span> i = field.getModifiers(); <span class="comment">//返回的数字是每个修饰符的代号</span></span><br><span class="line">            String modifierString = Modifier.toString(i);</span><br><span class="line">            System.out.println(modifierString); <span class="comment">//如public</span></span><br><span class="line">            <span class="comment">//获取属性的类型</span></span><br><span class="line">            Class fieldType = field.getType();</span><br><span class="line">            String fName = fieldType.getName();</span><br><span class="line">            String sfName = fieldType.getSimpleName();</span><br><span class="line">            System.out.println(fName+<span class="string">" "</span>+sfName); <span class="comment">//如：java.lang.String String</span></span><br><span class="line">            <span class="comment">//获取属性订单名字</span></span><br><span class="line">            System.out.println(field.getName());<span class="comment">//no name age sex</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【2】反编译Field："><a href="#【2】反编译Field：" class="headerlink" title="【2】反编译Field："></a>【2】反编译Field：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//了解一下，以后不会用</span></span><br><span class="line">StringBuilder s = <span class="keyword">new</span>  <span class="function">String <span class="title">Builder</span><span class="params">()</span></span>;</span><br><span class="line">Class studentClass = Class.forName(<span class="string">"com.bjpowernode.java.bean.Student"</span>);</span><br><span class="line">s.append(Modifier.toString(studentClass.getModifiers()) + <span class="string">" class "</span> + studentClass.getSimpleName + <span class="string">"&#123;\n"</span>);</span><br><span class="line"></span><br><span class="line">Field[] fields = studentClass.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span>(Field field : fields) &#123;</span><br><span class="line">    s.append(<span class="string">"\t"</span>);</span><br><span class="line">    s.append(Modifier.toString(field.getModifier()));</span><br><span class="line">    s.append(<span class="string">" "</span>);</span><br><span class="line">    s.append(field.getType().getSimpleName());</span><br><span class="line">    s.append(<span class="string">" "</span>);</span><br><span class="line">    s.append(field.getName());</span><br><span class="line">    s.append(<span class="string">";\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.append(<span class="string">"&#125;"</span>);</span><br><span class="line">System.out.println(s); </span><br><span class="line"><span class="comment">/*public class Student &#123;</span></span><br><span class="line"><span class="comment">    public int no; </span></span><br><span class="line"><span class="comment">    private String name;</span></span><br><span class="line"><span class="comment">    protected int age;</span></span><br><span class="line"><span class="comment">    boolean sex;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【3】重点：通过反射机制访问对象属性："><a href="#【3】重点：通过反射机制访问对象属性：" class="headerlink" title="【3】重点：通过反射机制访问对象属性："></a>【3】重点：通过反射机制访问对象属性：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过反射机制，访问对象的属性（get set）</span></span><br><span class="line">Class studentClass = Class.forName(<span class="string">"com.bjpowernode.java.bean.Student"</span>);</span><br><span class="line">Object obj = studentClass.newInstance(); <span class="comment">//Student对象，底层调用无参构造方法</span></span><br><span class="line"><span class="comment">//获取no属性(根据属性的名称获取Field)</span></span><br><span class="line"> Field noField = studentClass.getDeclareField(<span class="string">"no"</span>);</span><br><span class="line"><span class="comment">//给obj对象（Student对象）的no属性赋值</span></span><br><span class="line">noField.set(obj,<span class="number">2222</span>); <span class="comment">//给obj的no属性赋值2222</span></span><br><span class="line"><span class="comment">//读取属性的值</span></span><br><span class="line">System.out.println(noField.get(obj)); <span class="comment">//2222</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以访问私有的属性吗？可以</span></span><br><span class="line">Field nameField = studetClass.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">nameField.setAccessible(<span class="keyword">true</span>); <span class="comment">//打破封装（反射机制的缺点，打破封装，可能会给不法分子留下机会）</span></span><br><span class="line">nameField.set(obj,<span class="string">"jackson"</span>);</span><br><span class="line">System.out.println(nameField.get(obj)); <span class="comment">//jackson</span></span><br></pre></td></tr></table></figure>

<ul>
<li>反射机制让代码复杂了，但是更灵活了。</li>
</ul>
<h2 id="IV-重点：Method类"><a href="#IV-重点：Method类" class="headerlink" title="IV. 重点：Method类"></a>IV. 重点：Method类</h2><h3 id="【1】可变长度参数："><a href="#【1】可变长度参数：" class="headerlink" title="【1】可变长度参数："></a>【1】可变长度参数：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可变长参数</span></span><br><span class="line"><span class="comment">	int... args 这就是可变长参数</span></span><br><span class="line"><span class="comment">	语法是：类型...(注意：一定是三个点)</span></span><br><span class="line"><span class="comment">	1、可变长的参数要求的个数是0-N个。</span></span><br><span class="line"><span class="comment">	2、可变长度参数必须在参数列表最后一个位置上，而且可变长度参数只能有一个。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        m();</span><br><span class="line">        m(<span class="number">10</span>);</span><br><span class="line">        m(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//m("abc");这样不行，编译报错</span></span><br><span class="line">        m2(<span class="number">100</span>);</span><br><span class="line">        m2(<span class="number">100</span>,<span class="string">"abc"</span>);</span><br><span class="line">        m2(<span class="number">200</span>,<span class="string">"abc"</span>,<span class="string">"dfg"</span>);</span><br><span class="line">        </span><br><span class="line">        m3(<span class="string">"dfa"</span>,<span class="string">"sf"</span>,<span class="string">"er"</span>);</span><br><span class="line">        String[] strs = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line">        <span class="comment">//也可以传一个数组</span></span><br><span class="line">        m3(strs); <span class="comment">//a b c</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span>... args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"m方法执行了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//必须在最后，且只能有一个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">(<span class="keyword">int</span> a, String... args1)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"m2方法执行了！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//有length属性，说明args是一个数组！</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【2】反射Method："><a href="#【2】反射Method：" class="headerlink" title="【2】反射Method："></a>【2】反射Method：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class userServiceClass = Class.forName(<span class="string">"com.bjpowernode.java.service.UserService"</span>);</span><br><span class="line">        Method[] methods = userServiceClass.getDeclaredMethods();</span><br><span class="line">        System.out.println(methods.length); <span class="comment">//2</span></span><br><span class="line">        <span class="comment">//遍历Method</span></span><br><span class="line">        <span class="keyword">for</span>(Method method : methods) &#123;</span><br><span class="line">            <span class="comment">//获取修饰符列表</span></span><br><span class="line">            Modifier.toString(method.getModifiers());</span><br><span class="line">            <span class="comment">//获取返回值类型</span></span><br><span class="line">            method.getReturnType().getSimpleName();</span><br><span class="line">            <span class="comment">//获取方法名</span></span><br><span class="line">            method.getName();</span><br><span class="line">            <span class="comment">//方法的参数列表（可能多个）</span></span><br><span class="line">            Class[] parameterTypes = method.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span>(Class parameterType : parameterTypes) &#123;</span><br><span class="line">                parameterType.getSimpleName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flase;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"系统已经安全退出！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【3】反编译Method："><a href="#【3】反编译Method：" class="headerlink" title="【3】反编译Method："></a>【3】反编译Method：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> throw Exception </span>&#123;</span><br><span class="line">        StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Class userServiceClass = Class.forName(<span class="string">"com.bjpowernode.java.service.UserService"</span>);</span><br><span class="line">        s.append(Modifier.toString(userServiceClass.getModifiers()) + <span class="string">" class "</span> + userServiceClass.getSimpleName());</span><br><span class="line">        </span><br><span class="line">        Method[] method = userServiceClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method : methods) &#123;</span><br><span class="line">            s.append(<span class="string">"\t"</span>);</span><br><span class="line">            s.append(Modifier.toString(mothod.getModifiers()));</span><br><span class="line">            s.append(<span class="string">" "</span>);</span><br><span class="line">            s.append(method.getReturnType().getSimpleName());</span><br><span class="line">            s.append(<span class="string">" "</span>);</span><br><span class="line">            s.append(method.getName());</span><br><span class="line">            s.append(<span class="string">"("</span>);</span><br><span class="line">            Class[] parameterTypes = method.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span>(Class parameterType : parameterTypes) &#123;</span><br><span class="line">                s.append(parameterType.getSimpleName());</span><br><span class="line">                s.append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(parameterTypes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                s.deleteCharAt(s.length() -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            s.append(<span class="string">")&#123;&#125;\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        s.append(<span class="string">"&#125;"</span>);</span><br><span class="line">        System.out.println(s); <span class="comment">//public class UserService &#123; ... &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【4】重点：反射机制调用方法："><a href="#【4】重点：反射机制调用方法：" class="headerlink" title="【4】重点：反射机制调用方法："></a>【4】重点：反射机制调用方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Class userServiceClass = Class.forName(<span class="string">"com.bjpowernode.java.service.UserService"</span>);</span><br><span class="line">Object obj = userServiceClass.newInstance();</span><br><span class="line"><span class="comment">//拿到名字是login，参数是String，String的方法</span></span><br><span class="line">Method loginMethod = userServiceClass.getDeclareMethod(<span class="string">"login"</span>,<span class="string">"String.class"</span>,<span class="string">"String.class"</span>);</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"><span class="comment">//反射机制中最最最重要的方法，必须记住</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">四要素：</span></span><br><span class="line"><span class="comment">方法、obj对象、实参、返回值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Object retValue = loginMethod.invoke(obj,<span class="string">"admin"</span>,<span class="string">"123"</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h2 id="V-Constructor类"><a href="#V-Constructor类" class="headerlink" title="V. Constructor类"></a>V. Constructor类</h2><h3 id="【1】反编译构造方法："><a href="#【1】反编译构造方法：" class="headerlink" title="【1】反编译构造方法："></a>【1】反编译构造方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vip</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> no;</span><br><span class="line">    String name;</span><br><span class="line">    String birth;</span><br><span class="line">    <span class="keyword">boolean</span> sex;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vip</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vip</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vip</span><span class="params">(<span class="keyword">int</span> no, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vip</span><span class="params">(<span class="keyword">int</span> no, String name, String birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vip</span><span class="params">(<span class="keyword">int</span> no, String name, String birth, <span class="keyword">boolean</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflecTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StringBuffer s = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        Class vipClass = Class.forName(<span class="string">"com.bjpowernode.java.bean.Vip"</span>);</span><br><span class="line">        s.append(Modifier.toString(vipClass.modifiers()));</span><br><span class="line">        s.append(<span class="string">" class "</span>);</span><br><span class="line">        s.append(vipClass.getSimpleName());</span><br><span class="line">        s.append(<span class="string">"&#123;\n"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//拼接构造方法</span></span><br><span class="line">        Constructor[] constructors = vipClass.getDeclaredConstructor();</span><br><span class="line">        <span class="keyword">for</span>(Constructor constructor ： constructors) &#123;</span><br><span class="line">            s.append(<span class="string">"\t"</span>);</span><br><span class="line">            s.append(Modifier.toString(constructor.getModifiers()));</span><br><span class="line">            s.append(<span class="string">" "</span>);</span><br><span class="line">            s.append(constructor.getSimpleName());</span><br><span class="line">            s.append(<span class="string">"("</span>);</span><br><span class="line">            <span class="comment">//拼接参数</span></span><br><span class="line">            Class[] parameterTypes = constructor.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span>(Class parameterType : parameterTypes) &#123;</span><br><span class="line">                s.append(parameterType.getSimpleName());</span><br><span class="line">                s.append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(parameterTypes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                s.deleteCharAt(s.length() -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            s.append(<span class="string">")&#123;&#125;\n"</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        s.append(<span class="string">"&#125;"</span>);</span><br><span class="line">        System.out.println(s); <span class="comment">//public class Vip&#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【2】反射机制调构造方法："><a href="#【2】反射机制调构造方法：" class="headerlink" title="【2】反射机制调构造方法："></a>【2】反射机制调构造方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class c = Class.forName(<span class="string">"com.bjpowernode.java.bean.Vip"</span>);</span><br><span class="line"> <span class="comment">//调用无参构造方法一:</span></span><br><span class="line">Object obj = c.newInstance(); <span class="comment">//jdk9后过时</span></span><br><span class="line"> <span class="comment">//调用无参构造方法二:</span></span><br><span class="line">Constructor con2 = c.getDeclaredConstrutor();</span><br><span class="line">Object newObj2 = con2.newInstance();</span><br><span class="line"> <span class="comment">//调用有参构造:</span></span><br><span class="line">Constructor con = c.getDclaredConstructor(<span class="keyword">int</span>.class,String.class,String.class,<span class="keyword">boolean</span>.class);</span><br><span class="line">Object newObj = con.newInstance(<span class="number">110</span>,<span class="string">"jackson"</span>,<span class="string">"1990-10-11"</span>,<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<h1 id="九、注解"><a href="#九、注解" class="headerlink" title="九、注解"></a>九、注解</h1><h2 id="I-注解概述："><a href="#I-注解概述：" class="headerlink" title="I. 注解概述："></a>I. 注解概述：</h2><ul>
<li>注解或称注释类型，英文单词是：Annotation。</li>
<li>注解Annotation是一种引用数据类型。编译后生成xxx.class文件。</li>
<li>怎么自定义注解呢？语法格式？<ul>
<li>[修饰符列表] @interface 注解类型名 { … }</li>
</ul>
</li>
<li>注解怎么使用？<ul>
<li>第一：注解使用的语法格式是：@注解类型名</li>
<li>第二：直接可以出现在类上、属性上、方法上、变量上等… 注解还可以出现在直接类型上。默认情况下，注解可以出现在任意位置上。</li>
</ul>
</li>
</ul>
<h2 id="II-JDK内置注解："><a href="#II-JDK内置注解：" class="headerlink" title="II. JDK内置注解："></a>II. JDK内置注解：</h2><ul>
<li>Deprecated 用@Deprecated注释的程序元素。不鼓励程序员使用这样的元素，通常是因为存在风险或有更好的选择。</li>
<li>Override 表示一个方法声明打算重写超类中的另一个方法声明。</li>
<li>SuppressWarnings 指示应该在注释元素（包含在改注释元素中的所有程序元素）中取消显示指定的编译器警告。</li>
</ul>
<h3 id="【1】-Override注解："><a href="#【1】-Override注解：" class="headerlink" title="【1】@Override注解："></a>【1】@Override注解：</h3><ul>
<li>@Override注解只能注解方法。</li>
<li>@Override是<strong>给编译器参考的，和运行阶段没有关系</strong>。</li>
<li>凡是java中的方法带有这个注解的，编译器都会进行编译检查，如果这个方法不是重写父类的方法，编译器报错。</li>
<li>作用：<ul>
<li>标识性注解，给编译器作参考的。</li>
<li>编译器看到方法上有这个注解的时候，编译器会<strong>自动检查方法是否重写了父类的方法</strong>。如果没有重写，报错。</li>
</ul>
</li>
</ul>
<h3 id="【2】-Deprecated注解："><a href="#【2】-Deprecated注解：" class="headerlink" title="【2】@Deprecated注解："></a>【2】@Deprecated注解：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">//这个注解标记元素已过时，向程序员传递信息，有更好的方法存在</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doOther</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.pritnln(<span class="string">"doOther"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Class T &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnocationTest at = <span class="keyword">new</span> AnnocationTest();</span><br><span class="line">        at.doSome(); <span class="comment">//此处doSome方法会有横线划掉</span></span><br><span class="line">        AnnocationTest.doOther(); <span class="comment">//此处doOther方法会有横线划掉</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="III-元注解"><a href="#III-元注解" class="headerlink" title="III. 元注解"></a>III. 元注解</h2><ul>
<li>什么是元注解：用来<strong>标注“注解类型”的注解，称为元注解</strong>。</li>
<li>常见的元注解：<ul>
<li>@Target ：用来标注“被标注的注解”可以出现在哪些位置上。<ul>
<li>@Target(ElementType.METHOD) : 表示“被标注的注解”只能出现在方法上。</li>
<li>@Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE}) :表示：被标注的注解“可以出现在构造方法上，字段上，局部变量上，方法上，类上等等。</li>
</ul>
</li>
<li>@Retention ：用来标注“被标注的注解”最终保存在什么位置上。<ul>
<li>@Retention(RetentionPolicy.SOURCE) : 表示“被标注的注解“只能被保留在java源文件当中。</li>
<li>@Retention(RetentionPolicy.CLASS) : 表示“被标注的注解“被保存在class文件中。</li>
<li>@Retention(RetentionPolicy.RUNTIME) : 表示“被标注的注解“被保存在class文件中，并且可以被反射机制所读取。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如下面代码表示Override注解只能出现在方法上，并且只能被保留在java源文件中</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interfce</span> Override &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IV-关于注解的操作"><a href="#IV-关于注解的操作" class="headerlink" title="IV. 关于注解的操作"></a>IV. 关于注解的操作</h2><h3 id="【1】注解中定义属性："><a href="#【1】注解中定义属性：" class="headerlink" title="【1】注解中定义属性："></a>【1】注解中定义属性：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    我们通常在注解中可以定义属性，以下这个是MyAnnotation的name属性</span></span><br><span class="line"><span class="comment">    看着像一个方法，实际上是属性name。</span></span><br><span class="line"><span class="comment">    @return</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">color</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 25</span>; <span class="comment">//默认年龄25</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnnotationTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果一个注解中有属性，必须给属性赋值，否则报错，除非给定默认值</span></span><br><span class="line">    <span class="meta">@MyAnnotation</span>(name=<span class="string">"zhangsan"</span>,color=<span class="string">"红色"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【2】属性名是value时属性名可以省略："><a href="#【2】属性名是value时属性名可以省略：" class="headerlink" title="【2】属性名是value时属性名可以省略："></a>【2】属性名是value时属性名可以省略：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OtherAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherAnnotationTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性名是value，并且只有一个属性的时候，属性名可以省略</span></span><br><span class="line">    <span class="meta">@OtherAnnotation</span>(<span class="string">"hehe"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【3】注解当中的属性可以是哪一种类型："><a href="#【3】注解当中的属性可以是哪一种类型：" class="headerlink" title="【3】注解当中的属性可以是哪一种类型："></a>【3】注解当中的属性可以是哪一种类型：</h3><ul>
<li>可以是：byte short int long float double boolean char String Class 枚举类型 以及以上每一种的数组形式。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Season &#123;</span><br><span class="line">    SPRING, SUMMER, AUTUMN, WINTER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OtherAnnotation &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">    String[] email();</span><br><span class="line">    Season[] seasonArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@OtherAnnotation</span>(age=<span class="number">25</span>,email=&#123;<span class="string">"zhangsan@123.com"</span>,<span class="string">"lisi@123.com"</span>&#125;,seasonArray=&#123;Season.SPRING,Season.SUMMER&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//数组中只有一个元素时：大括号可以省略</span></span><br><span class="line">    <span class="meta">@OtherAnnotation</span>(age=<span class="number">25</span>,email=<span class="string">"zhangsan@123.com"</span>,seasonArray=Season.WINTER)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doOther</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【4】反射注解："><a href="#【4】反射注解：" class="headerlink" title="【4】反射注解："></a>【4】反射注解：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYpe,ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "北京大兴区"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation</span>(<span class="string">"上海浦东区"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnnotationTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAnnotationTest</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectAnnotationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class c = Class.forName(<span class="string">"com.bjpowernode.java.annotation5.MyAnnotationTest"</span>);</span><br><span class="line">        <span class="comment">//判断上面的类是否有@MyAnnotation</span></span><br><span class="line">        System.out.println(c.isAnnotationPresent(MyAnnotation.class)); <span class="comment">//true</span></span><br><span class="line">        <span class="keyword">if</span>(c.isAnnotationPresent(MyAnnotation.class)) &#123;</span><br><span class="line">            <span class="comment">//获取注解对象</span></span><br><span class="line">            MyAnnotation myAnnotation = (MyAnnotation)c.getAnnotation(MyAnnotation.class);</span><br><span class="line">            System.out.println(myAnnotation); <span class="comment">//@com.bjpowernode.java.annotation5.MyAnnotation()</span></span><br><span class="line">            <span class="comment">//获取对象属性</span></span><br><span class="line">            String value = myAnnotation.value();</span><br><span class="line">            System.out.println(value); <span class="comment">//上海浦东区</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【5】通过反射获取注解对象属性值："><a href="#【5】通过反射获取注解对象属性值：" class="headerlink" title="【5】通过反射获取注解对象属性值："></a>【5】通过反射获取注解对象属性值：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">username</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">passname</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnnotationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnnotation</span>(username=<span class="string">"admin"</span>,password=<span class="string">"123"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class c = Class.forName(<span class="string">"com.bjpowernode.java.annotation6.MyAnnotationTest"</span>);</span><br><span class="line">        <span class="comment">//获取doSome()方法</span></span><br><span class="line">        Method doSomeMethod = c.getDeclaredMethod(<span class="string">"doSome"</span>);</span><br><span class="line">        <span class="comment">//判断该方法是否存在这个注解</span></span><br><span class="line">        <span class="keyword">if</span>(doSomeMethod.osAnnotationPresent(MyAnnotation.class)) &#123;</span><br><span class="line">            MyAnnotation myAnnotation = doSomeMethod.getAnnotation(MyAnnotation.class);</span><br><span class="line">            System.out.println(myAnnotation.username()); <span class="comment">//admin</span></span><br><span class="line">            System.out.println(myAnnotation.password()); <span class="comment">//123</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="V-注解在实际开发中的作用"><a href="#V-注解在实际开发中的作用" class="headerlink" title="V. 注解在实际开发中的作用"></a>V. 注解在实际开发中的作用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class userClass = Class.forName(<span class="string">"com.bjpowernode.java.annotation7.User"</span>);</span><br><span class="line">        <span class="keyword">if</span>(userClass.isAnnotationPresent(MustHasIdPropertyAnnotation.class)) &#123;</span><br><span class="line">            Field[] fields = userClass.getDeclaredFields();</span><br><span class="line">            <span class="keyword">boolean</span> isOK = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(Field field : fields) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"id"</span>.equals(field.getName()) &amp;&amp; <span class="string">"int"</span>.equals(field.getType().getSimpleName())) &#123;</span><br><span class="line">                    isOK = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!isOK) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HasNotIdPropertyException(<span class="string">"被注解标注的类中必须要有一个int类型的id属性！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HasNotPropertyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HasNotIdPropertyException</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HasNotIdPropertyException</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用了自定义注解的类</span></span><br><span class="line"><span class="meta">@MustHasIdPropertyAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义注解</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MustHasIdPropertyAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>总结：注解有什么用？<ul>
<li>注解在程序中等同于一种标记。</li>
<li><strong>提供信息给编译器</strong>： 编译器可以利用注解来探测错误和警告信息。<br>比如 @Override提示子类要复写父类中被修饰的方法。</li>
<li>编译阶段时的处理： 软件工具可以用来利用注解信息来<strong>生成代码、Html文档</strong>或者做其它相应处理。</li>
<li>运行时的处理： 某些注解可以在程序运行的时候接受代码的提取。</li>
</ul>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Note-of-JavaSE_5_集合、IO流]]></title>
      <url>/2020/04/21/Node-of-JavaSE-5-%E9%9B%86%E5%90%88%E3%80%81IO%E6%B5%81/</url>
      <content type="html"><![CDATA[<h1 id="五、集合"><a href="#五、集合" class="headerlink" title="五、集合"></a>五、集合</h1><a id="more"></a>

<h2 id="I-集合概述"><a href="#I-集合概述" class="headerlink" title="I. 集合概述"></a>I. 集合概述</h2><h3 id="【1】什么是集合？有什么用？"><a href="#【1】什么是集合？有什么用？" class="headerlink" title="【1】什么是集合？有什么用？"></a>【1】什么是集合？有什么用？</h3><ul>
<li>数组就是一个集合，集合实际上是一个容器。可以来容纳其他类型的数据。</li>
</ul>
<h3 id="【2】集合中存放的是什么？"><a href="#【2】集合中存放的是什么？" class="headerlink" title="【2】集合中存放的是什么？"></a>【2】集合中存放的是什么？</h3><ul>
<li>不能存放基本数据类型，也不能存放java对象，<strong>集合当中存储的是java对象的内存地址（存储的是引用）</strong>。</li>
</ul>


<h3 id="【3】不同集合对应不同是数据结构："><a href="#【3】不同集合对应不同是数据结构：" class="headerlink" title="【3】不同集合对应不同是数据结构："></a>【3】不同集合对应不同是数据结构：</h3><ul>
<li><p>如数组、二叉树、链表、哈希表。</p>
</li>
<li><p>new ArrayList(); 创建一个集合，底层是数组。</p>
</li>
<li><p>new LinkedList(); 创建一个集合对象，底层是链表。</p>
</li>
<li><p>new TreeSet(); 创建一个集合对象，底层是二叉树。</p>
</li>
</ul>
<h3 id="【4】集合在java-JDK的哪个包下？"><a href="#【4】集合在java-JDK的哪个包下？" class="headerlink" title="【4】集合在java-JDK的哪个包下？"></a>【4】集合在java-JDK的哪个包下？</h3><ul>
<li>所有集合类以及集合接口都在java.util包下。</li>
</ul>
<h3 id="【5】java中集合两大类："><a href="#【5】java中集合两大类：" class="headerlink" title="【5】java中集合两大类："></a>【5】java中集合两大类：</h3><ul>
<li><p>一类是以<strong>单个</strong>方式存储元素。</p>
<ul>
<li>这类集合超级父接口：java.util.Collection;</li>
</ul>
</li>
<li><p>一类是以<strong>键值对</strong>的方式存储元素。</p>
<ul>
<li>这类集合超级父接口：java.util.Map;</li>
</ul>
</li>
</ul>
<h3 id="【6】集合的继承结构图："><a href="#【6】集合的继承结构图：" class="headerlink" title="【6】集合的继承结构图："></a>【6】集合的继承结构图：</h3><ul>
<li>虚线空心三角表实现，虚线箭头表关联(has a)，实线空心三角表继承(泛化、is a)。</li>
</ul>
<img src="/2020/04/21/Node-of-JavaSE-5-集合、IO流/7.png" title="7-0">

<ul>
<li><p>补充：</p>
<ul>
<li><p>List：有序是因为List集合都有下标，从0开始，以1递增。</p>
</li>
<li><p>Set：此集合中元素没有下标。</p>
</li>
<li><p>HashSet：在HashSet中存储元素，实际上是存到了HashMap中去了，HashMap是一个哈希表数据结构。</p>
</li>
<li><p>TreeSet：底层实际上是TreeMap，采用了二叉树存储结构。</p>
</li>
</ul>
</li>
</ul>
<img src="/2020/04/21/Node-of-JavaSE-5-集合、IO流/8.png" title="8-0">

<ul>
<li>补充：<ul>
<li>Map：key和value指向的都是存储java对象的<strong>内存地址</strong>。所有Map集合的key特点：不可重复。</li>
<li>HashMap：底层是哈希表数据结构，是非线程安全的。</li>
<li>TreeMap：TreeMap集合底层的数据结构是一个<strong>二叉树</strong>。</li>
<li>Propeties：被称为属性类，<strong>线程安全</strong>，因为继承HashTable。</li>
</ul>
</li>
</ul>
<h3 id="【7】所有的实现类："><a href="#【7】所有的实现类：" class="headerlink" title="【7】所有的实现类："></a>【7】所有的实现类：</h3><ul>
<li>ArrayList：底层是数组。</li>
<li>LinkedList：底层是双向链表。</li>
<li>Vector：底层是数组，线程安全，效率低，使用少。</li>
<li>HashSet：底层是HashMap，放到HashSet集合中的元素等同于放到HashMap集合key部分。</li>
<li>TreeSet：底层是TreeMap，放到TreeSet集合中的元素等同于放到TreeMap集合key部分。</li>
<li>HashMap：底层是哈希表。</li>
<li>HashTable：底层也是哈希表，线程安全，效率低，使用少。</li>
<li>Properties：线程安全，并且key和value只能存储字符串String。</li>
<li>TreeMap：底层是二叉树。TreeMap集合的key可以自动按照大小顺序排列。</li>
</ul>
<h3 id="【8】其他注意点："><a href="#【8】其他注意点：" class="headerlink" title="【8】其他注意点："></a>【8】其他注意点：</h3><ul>
<li>往Set中放数据，实际上是放到了Map中的key部分去了。</li>
</ul>
<h2 id="II-Collection接口"><a href="#II-Collection接口" class="headerlink" title="II. Collection接口"></a>II. Collection接口</h2><h3 id="【1】Collection中存放的类型："><a href="#【1】Collection中存放的类型：" class="headerlink" title="【1】Collection中存放的类型："></a>【1】Collection中存放的类型：</h3><ul>
<li>没有”泛型“，可以存储Object的所有子类型。</li>
<li>使用了”泛型“后，Collection中只能存储某个具体类型。</li>
<li><strong>集合中不能存基本数据类型，也不能存java对象，只能存java对象的内存地址。</strong></li>
</ul>
<h3 id="【2】Collection中的常用方法："><a href="#【2】Collection中的常用方法：" class="headerlink" title="【2】Collection中的常用方法："></a>【2】Collection中的常用方法：</h3><ol>
<li><strong>boolean add(Object e)</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Collection c = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c.add(<span class="number">1233</span>); <span class="comment">//自动装箱，存进去的是Integer对象的内存地址</span></span><br><span class="line">c.add(<span class="keyword">new</span> Object);</span><br><span class="line">c.add(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>int size()</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取集合中元素的个数</span></span><br><span class="line">System.out.println(<span class="string">"集合中元素的个数是："</span>,c.size()); <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>void clear()</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清空集合中的元素</span></span><br><span class="line">c.clear();</span><br><span class="line">System.out.println(<span class="string">"集合中元素的个数是："</span>,c.size()); <span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>boolean contains(Object o)</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断当前集合是否包含元素o，包含返回true，否则false</span></span><br><span class="line">c.add(<span class="string">"hello"</span>);</span><br><span class="line">c.add(<span class="string">"绿巨人"</span>);</span><br><span class="line"><span class="keyword">boolean</span> flag = c.contains(<span class="string">"绿巨人"</span>); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">boolean</span> flag = c.contains(<span class="string">"绿巨人1"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>boolean remove(Object o)</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除集合里的某个元素</span></span><br><span class="line">c.remove(<span class="string">"hello"</span>);</span><br><span class="line">System.out.println(<span class="string">"集合中元素的个数是："</span>,c.size()); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><strong>boolean isEmpty()</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断集合是否为空</span></span><br><span class="line">System.out.println(c.isEmpty()); <span class="comment">//false</span></span><br><span class="line">c.clear();</span><br><span class="line">System.out.println(c.isEmpty()); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>[了解]Objext[] toArray()：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将集合转化为数组</span></span><br><span class="line">c.add(<span class="string">"abc"</span>);</span><br><span class="line">c.add(<span class="string">"def"</span>);</span><br><span class="line">c.add(<span class="number">199</span>);</span><br><span class="line">Object[] objs = c.toArray();</span><br></pre></td></tr></table></figure>

<h3 id="【3】集合迭代-遍历："><a href="#【3】集合迭代-遍历：" class="headerlink" title="【3】集合迭代/遍历："></a>【3】集合迭代/遍历：</h3><ol>
<li>原理：</li>
</ol>
<img src="/2020/04/21/Node-of-JavaSE-5-集合、IO流/9.png" title="9-0">

<ol start="2">
<li>实践：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Collection c = <span class="keyword">new</span> HashSet();</span><br><span class="line">c.add(<span class="string">"abc"</span>);</span><br><span class="line">c.add(<span class="string">"def"</span>);</span><br><span class="line">c.add(<span class="number">100</span>);</span><br><span class="line">c.add(<span class="keyword">new</span> Object());</span><br><span class="line">Iterator it = c.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">    Object obj = it.next();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125; <span class="comment">//遍历打印c中的对象</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>注意：<strong>当集合结构发生了改变，迭代器必须重新获取</strong>，否则出现如下异常。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例1：</span></span><br><span class="line">Collection c = <span class="keyword">new</span> ArrayList();</span><br><span class="line">Iterator it = c.iterator();</span><br><span class="line">c.add(<span class="number">1</span>);</span><br><span class="line">c.add(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">    Object obj = it.next();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125; <span class="comment">//java.util.ConcurrentModificationException</span></span><br><span class="line"><span class="comment">//示例2：</span></span><br><span class="line">Collection c2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c2.add(<span class="number">1</span>);</span><br><span class="line">c2.add(<span class="number">2</span>);</span><br><span class="line">Iterator it2 = c2.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">    Object obj = it.next();</span><br><span class="line">    c2.remove(obj); <span class="comment">//直接通过集合删除元素，导致迭代器的快照和源集合状态不符</span></span><br><span class="line">    System.out.println(obj); </span><br><span class="line">&#125; <span class="comment">//java.util.ConcurrentModificationException</span></span><br></pre></td></tr></table></figure>

<ul>
<li>示例二改进：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Collection c2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c2.add(<span class="number">1</span>);</span><br><span class="line">c2.add(<span class="number">2</span>);</span><br><span class="line">Iterator it2 = c2.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">    Object obj = it.next();</span><br><span class="line">    it2.remove(); <span class="comment">//改为调用iterator中的remove(),it2指向当前元素</span></span><br><span class="line">    System.out.println(obj); </span><br><span class="line">&#125; </span><br><span class="line">System.out.println(c2.size()); <span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<h3 id="【4】contains分析："><a href="#【4】contains分析：" class="headerlink" title="【4】contains分析："></a>【4】contains分析：</h3><ol>
<li>实践：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Collection c = <span class="keyword">new</span> ArrayList();</span><br><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">c.add(s1);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"def"</span>);</span><br><span class="line">c.add(s2);</span><br><span class="line">System.out.println(<span class="string">"元素的个数是："</span> + c.size()); <span class="comment">//2</span></span><br><span class="line">String x = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">System.out.println(c.contains(x)); <span class="comment">//true （判断集合中是否存在"abc"）</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>原理：</li>
</ol>
<img src="/2020/04/21/Node-of-JavaSE-5-集合、IO流/10.png" title="10-0">

<ul>
<li>contains方法是用来判断集合中是否包含某个元素的方法：<strong>通过调用了equals方法进行比对</strong>。</li>
<li><strong>放在集合中的类型需要重写equals方法</strong>，便于使用contains进行比较，只有重写了才能进行内容上的比对。</li>
<li>String不需要重写equals方法是因为String自身已经写好了equals。</li>
</ul>
<h3 id="【4】remove分析："><a href="#【4】remove分析：" class="headerlink" title="【4】remove分析："></a>【4】remove分析：</h3><ol>
<li>实践：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collection cc = <span class="keyword">new</span> ArrayList();</span><br><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">cc.add(s1);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">cc.remove(s2);</span><br><span class="line">System.out.println(cc.size()); <span class="comment">//0 （java认为s1和s2是一样的，删s2就是删除s1</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>分析：</li>
</ol>
<ul>
<li><p>remove()也调用了目标对象的equals()方法。</p>
</li>
<li><p>因此，<strong>放进集合中的对象需要重写equals()方法</strong>。</p>
</li>
</ul>
<h2 id="III-List接口"><a href="#III-List接口" class="headerlink" title="III. List接口"></a>III. List接口</h2><h3 id="【1】List概述："><a href="#【1】List概述：" class="headerlink" title="【1】List概述："></a>【1】List概述：</h3><ul>
<li>有序可重复</li>
</ul>
<h3 id="【2】List常用方法："><a href="#【2】List常用方法：" class="headerlink" title="【2】List常用方法："></a>【2】List常用方法：</h3><ol>
<li><strong>void add(int index, Object element)</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List myList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">myList.add(<span class="string">"A"</span>);</span><br><span class="line">myList.add(<span class="string">"B"</span>);</span><br><span class="line">myList.add(<span class="string">"C"</span>);</span><br><span class="line">myList.add(<span class="number">1</span>, <span class="string">"KING"</span>); <span class="comment">//在列表指定位置插入指定元素（第一个元素是下标）</span></span><br><span class="line">Iterator it = myList.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">    Object obj = it.next();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125; <span class="comment">//A KING B C</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>Object get(int index)</strong>:</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据下标获取元素</span></span><br><span class="line">Object firstObj = myList.get(<span class="number">0</span>);</span><br><span class="line">System.out.println(firstObj);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>int indexOf(Object o)</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取指定对象第一次出现处的索引。</span></span><br><span class="line">System.out.println(myList.indexOf(<span class="string">"KING"</span>)); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>int lastIndexOf(Object o)</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取指定对象最后一次出现处的索引。</span></span><br><span class="line">System.out.println(myList.lastIndexOf(<span class="string">"C"</span>)); <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>Object remove(int index)</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除指定下标的元素</span></span><br><span class="line">myList.remove(<span class="number">0</span>);</span><br><span class="line">System.out.println(myList.size()); <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><strong>Object set(int index, Object element)</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改掉在指定位置的元素</span></span><br><span class="line">myList.set(<span class="number">2</span>,<span class="string">"soft"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; myList.size();i++) &#123;</span><br><span class="line">    Object obj = myList.get(i);</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125; <span class="comment">//KING B Soft</span></span><br></pre></td></tr></table></figure>

<h2 id="IV-ArrayList类"><a href="#IV-ArrayList类" class="headerlink" title="IV. ArrayList类"></a>IV. ArrayList类</h2><h3 id="【1】概述："><a href="#【1】概述：" class="headerlink" title="【1】概述："></a>【1】概述：</h3><ol>
<li>ArrayList底层是Object[]类型的的数组。</li>
<li>ArrayList集合的初始化容量是10。（底层先创建一个长度是0的数组，当添加第一个元素的时候，初始化容量10）</li>
</ol>
<h3 id="【2】构造方法："><a href="#【2】构造方法：" class="headerlink" title="【2】构造方法："></a>【2】构造方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一：</span></span><br><span class="line">List list1 = <span class="keyword">new</span> ArrayList(); <span class="comment">//默认初始化10，数组长度10</span></span><br><span class="line">System.out.println(list1.size()); <span class="comment">//0 size方法只是获取当前元素的个数，不是容量</span></span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line">List list2 = <span class="keyword">new</span> ArrayList(<span class="number">20</span>); <span class="comment">//指定初始化20</span></span><br><span class="line">System.out.println(list1.size()); <span class="comment">//0</span></span><br><span class="line"><span class="comment">//方法三：</span></span><br><span class="line">Collection c = <span class="keyword">new</span> HashSet();</span><br><span class="line">c.add(<span class="number">100</span>);</span><br><span class="line">c.add(<span class="number">200</span>);</span><br><span class="line">c.add(<span class="number">900</span>);</span><br><span class="line">c.add(<span class="number">50</span>);</span><br><span class="line"><span class="comment">//将hashSort集合转换成List集合</span></span><br><span class="line">List myListy3 = <span class="keyword">new</span> ArrayList(c);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myList3.size(); i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">"myList3.get(i)"</span>);</span><br><span class="line">&#125; <span class="comment">//50 100 900 200</span></span><br></pre></td></tr></table></figure>

<h3 id="【3】ArrayList的扩容："><a href="#【3】ArrayList的扩容：" class="headerlink" title="【3】ArrayList的扩容："></a>【3】ArrayList的扩容：</h3><ul>
<li>扩容到原容量的1.5倍。</li>
<li>ArrayList底层是数组，怎么优化？尽可能少的扩容。</li>
</ul>
<h3 id="【4】常见面试题，平时用的最多的集合是什么？"><a href="#【4】常见面试题，平时用的最多的集合是什么？" class="headerlink" title="【4】常见面试题，平时用的最多的集合是什么？"></a>【4】常见面试题，平时用的最多的集合是什么？</h3><ul>
<li>ArrayList，因为往末尾添加元素，效率不受影响；并且我们检索/查找某个元素的操作比较多。</li>
</ul>
<h2 id="V-LinkedList类"><a href="#V-LinkedList类" class="headerlink" title="V. LinkedList类"></a>V. LinkedList类</h2><h3 id="【1】单向链表的数据结构："><a href="#【1】单向链表的数据结构：" class="headerlink" title="【1】单向链表的数据结构："></a>【1】单向链表的数据结构：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    Object element;</span><br><span class="line">    Node next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object element, Node next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Link</span> </span>&#123;  </span><br><span class="line">    Node Header;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(header == <span class="keyword">null</span>) &#123; <span class="comment">//头空</span></span><br><span class="line">            header = <span class="keyword">new</span> Node(data, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//头不是空  </span></span><br><span class="line">            Node currentLastNode = findLast(header);</span><br><span class="line">            currentLastNode.next = <span class="keyword">new</span> Node(data, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">findLsat</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> findLsat(node.next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(Object new Obj)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Link link = <span class="keyword">new</span> Link();</span><br><span class="line">        link.add(<span class="string">"abc"</span>);</span><br><span class="line">        link.add(<span class="string">"def"</span>);</span><br><span class="line">        link.add(<span class="string">"xyz"</span>);</span><br><span class="line">        System.out.println(link.size()); <span class="comment">//3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【2】双向链表的数据结构："><a href="#【2】双向链表的数据结构：" class="headerlink" title="【2】双向链表的数据结构："></a>【2】双向链表的数据结构：</h3><img src="/2020/04/21/Node-of-JavaSE-5-集合、IO流/11.png" title="11-0">

<h3 id="【3】LinkedList的特性："><a href="#【3】LinkedList的特性：" class="headerlink" title="【3】LinkedList的特性："></a>【3】LinkedList的特性：</h3><ul>
<li><p>LinkedList也有下标，也可以调用Object get(int index)方法。</p>
</li>
<li><p>LinkedList没有初始化容量。</p>
</li>
<li><p>最初这个链表里没有任何元素。first和last都是null。</p>
</li>
<li><p>以后不管是LinkedList还是ArrayList，不需要关心是哪一个集合，因为我们是<strong>面向接口编程</strong>，调用的都是接口中的方法。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List list1 = <span class="keyword">new</span> LinkedList(); <span class="comment">//这样写表示底层使用双向链表</span></span><br><span class="line">List list2 = <span class="keyword">new</span> ArrayList(); <span class="comment">//这样写表示底层用的是数组</span></span><br></pre></td></tr></table></figure>

<h2 id="VI-Vector类"><a href="#VI-Vector类" class="headerlink" title="VI. Vector类"></a>VI. Vector类</h2><h3 id="【1】Vector概述："><a href="#【1】Vector概述：" class="headerlink" title="【1】Vector概述："></a>【1】Vector概述：</h3><ul>
<li>底层也是数组，初始化容量是10。</li>
<li>扩容之后是原来容量的<strong>2倍</strong>，不同于ArrayList（1.5倍）。</li>
<li>所有方法都是线程同步的，使用synchronized修饰，线程安全。效率比较低。</li>
</ul>
<h3 id="【2】ArrayList线程不安全转成安全的："><a href="#【2】ArrayList线程不安全转成安全的：" class="headerlink" title="【2】ArrayList线程不安全转成安全的："></a>【2】ArrayList线程不安全转成安全的：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List myList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">Collections.synchronizedList(myList);</span><br></pre></td></tr></table></figure>

<h2 id="VII-泛型机制"><a href="#VII-泛型机制" class="headerlink" title="VII. 泛型机制"></a>VII. 泛型机制</h2><h3 id="【1】泛型概述："><a href="#【1】泛型概述：" class="headerlink" title="【1】泛型概述："></a>【1】泛型概述：</h3><ul>
<li>泛型优点：统一类型；不用大量的向下强转。</li>
<li>泛型不足：集合中存储的元素缺乏多样性。</li>
<li>大多数业务中，集合中的类型还是统一的，泛型机制得到了广泛的认可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用泛型后，只能向List集合中存储Animal对象，集合中的元素数据类型就统一了</span></span><br><span class="line">    List&lt;Animal&gt; myList = <span class="keyword">new</span> ArrayList&lt;Animal&gt;();</span><br><span class="line">    Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">    Bird b = <span class="keyword">new</span> Bird();</span><br><span class="line">    myList.add(c);</span><br><span class="line">    myList.add(b);</span><br><span class="line">    <span class="comment">//表示迭代器迭代的是Animal类型</span></span><br><span class="line">    Iterator&lt;Animal&gt; it = myList.iterator();</span><br><span class="line">    <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">        <span class="comment">//不需要强制类型转换，直接调用</span></span><br><span class="line">        Animal a = it.next();</span><br><span class="line">        a.move();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"动物在奔跑！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫捉老鼠"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Aniaml</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【2】钻石表达式："><a href="#【2】钻石表达式：" class="headerlink" title="【2】钻石表达式："></a>【2】钻石表达式：</h3><ul>
<li>JDK8之后引入了自动推断机制，又成为钻石表达式。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Animal&gt; myList = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">//ArrayList后面的尖括号不需要写类型，会自动推断为Animal，因长得像钻石，因此得名</span></span><br><span class="line">myList.add(<span class="keyword">new</span> Animal());</span><br><span class="line">myList.add(<span class="keyword">new</span> Cat());</span><br><span class="line">myList.add(<span class="keyword">new</span> Bird());</span><br><span class="line">Iterator&lt;Animal&gt; it = myList.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">    Animal a = it.next();</span><br><span class="line">    a.move();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【3】自定义泛型："><a href="#【3】自定义泛型：" class="headerlink" title="【3】自定义泛型："></a>【3】自定义泛型：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span>&lt;<span class="title">E</span>&gt; </span>&#123; <span class="comment">//标志服E可以用任意符号表示</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">(E o)</span> </span>&#123; <span class="comment">//E也可以放在void的位置，表示返回类型是E</span></span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericTest&lt;String&gt; gt = <span class="keyword">new</span> GenericTest&lt;&gt;();</span><br><span class="line">        <span class="comment">//gt.doSome(100);类型不匹配</span></span><br><span class="line">        gt.doSome(<span class="string">"abc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="VIII-foreach语句"><a href="#VIII-foreach语句" class="headerlink" title="VIII. foreach语句"></a>VIII. foreach语句</h2><h3 id="【1】foreach概述："><a href="#【1】foreach概述：" class="headerlink" title="【1】foreach概述："></a>【1】foreach概述：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> data : arr) &#123; <span class="comment">//新的遍历形式</span></span><br><span class="line">    System.out.println(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在需要使用<strong>下标</strong>的循环中，不建议使用foreach</li>
</ul>
<h3 id="【2】集合中的foreach："><a href="#【2】集合中的foreach：" class="headerlink" title="【2】集合中的foreach："></a>【2】集合中的foreach：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">strList.add(<span class="string">"hello"</span>);</span><br><span class="line">strList.add(<span class="string">"world"</span>);</span><br><span class="line">strList.add(<span class="string">"kitty!"</span>);</span><br><span class="line"><span class="comment">//三种遍历方式：</span></span><br><span class="line"><span class="comment">//使用迭代器方式：</span></span><br><span class="line">Iterator&lt;String&gt; it = strList.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">    String s = it.next();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用下标方式：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strList.size(); i++) &#123;</span><br><span class="line">    System.out.println(strList.get(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用foreach：</span></span><br><span class="line"><span class="keyword">for</span>(String s : strList) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IX-Map接口"><a href="#IX-Map接口" class="headerlink" title="IX. Map接口"></a>IX. Map接口</h2><h3 id="【1】Map概述："><a href="#【1】Map概述：" class="headerlink" title="【1】Map概述："></a>【1】Map概述：</h3><ul>
<li>key和value都是引用数据类型，存储的都是对象的内存地址。</li>
</ul>
<h3 id="【2】Map接口常用方法："><a href="#【2】Map接口常用方法：" class="headerlink" title="【2】Map接口常用方法："></a>【2】Map接口常用方法：</h3><ol>
<li><strong>V put(K key, V value)</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向Map中添加键值对</span></span><br><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">"lisi"</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">"wangwu"</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>V get(Object key)</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过Key获取value</span></span><br><span class="line">String value = map.get(<span class="number">2</span>);</span><br><span class="line">System.out.println(value); <span class="comment">//lisi</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>V remove(Object key)</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过key删除键值对</span></span><br><span class="line">map.remove(<span class="number">2</span>);</span><br><span class="line">System.out.println(map.size()); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>boolean containsKey(Objext key)</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断Map中是否包括某个key</span></span><br><span class="line">map.containsKey(<span class="number">3</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>boolean containsValue(Objext value)</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断Map中是否包含某个value</span></span><br><span class="line">map.containsValue(<span class="string">"wangwu"</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><strong>boolean isEmpty()</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断Map中的元素个数是否是0</span></span><br><span class="line">map.isEmpty(); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>int size()</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Map中的键值对个数</span></span><br><span class="line">map.size(); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li><strong>Collection<v>  values()</v></strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Map集合中所有的value，返回一个Collection</span></span><br><span class="line">Collection&lt;String&gt; values = map.values();</span><br><span class="line"><span class="keyword">for</span>(String s: values) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125; <span class="comment">//zhangsan wangwu</span></span><br></pre></td></tr></table></figure>

<ol start="9">
<li><strong>void clear()</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清空Map集合</span></span><br><span class="line">map.clear(); <span class="comment">//map中的元素全清空了</span></span><br></pre></td></tr></table></figure>

<ol start="10">
<li><strong>Set<k>  keySet()</k></strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Map集合所有的key</span></span><br><span class="line">Map&lt;Integer, String&gt; map2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map2.put(<span class="number">1</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">map2.put(<span class="number">2</span>, <span class="string">"lisi"</span>);</span><br><span class="line">map2.put(<span class="number">3</span>, <span class="string">"wangwu"</span>);</span><br><span class="line">Set&lt;Integer&gt; keys = map2.keySet();</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">Iterator&lt;Integer&gt; it = keys.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">    Integer key = it.next();</span><br><span class="line">    String value = map2.get(key);</span><br><span class="line">    System.out.println(key + <span class="string">"="</span> + value);</span><br><span class="line">&#125; <span class="comment">//1=zhangsan 2=lisi 3=wangwu</span></span><br><span class="line"><span class="comment">//另一种遍历方法</span></span><br><span class="line"><span class="keyword">for</span>(Integer key : keys) &#123;</span><br><span class="line">    System.out.println(key + <span class="string">"="</span> + map2.get(key));</span><br><span class="line">&#125; <span class="comment">//结果同上</span></span><br></pre></td></tr></table></figure>

<ol start="11">
<li><strong>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将Map集合转化为Set集合，其中Set中的元素包含键和值，两者通过"="连接，如"1=zhangsan","2=lisi"</span></span><br><span class="line"><span class="comment">//其中，转化后Set集合的元素类型是【Map.Entry&lt;K,V&gt;】，是一种静态内部类</span></span><br><span class="line">Set&lt;Map.Entry&lt;Integer,String&gt;&gt; set = map.entrySet();</span><br><span class="line"><span class="comment">//第一种遍历</span></span><br><span class="line">Iterator&lt;Map.Entry&lt;Integer,String&gt;&gt; it2 = set.iterator();</span><br><span class="line"><span class="keyword">while</span>(it2.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;Integer,String&gt; node = it2.next();</span><br><span class="line">    Integer key = node.getKey();</span><br><span class="line">    String value = node.getValue();</span><br><span class="line">    System.out.println(key + <span class="string">"="</span> +value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//另一种遍历（这种效率最高，因为获取key和value都是直接从node对象中获取的属性值，适合于大数据量！！！）</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Integer,String&gt;&gt; node : set) &#123;</span><br><span class="line">    System.out.println(node.getKey() + <span class="string">"="</span> + node.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2020/04/21/Node-of-JavaSE-5-集合、IO流/12.png" title="12-0">

<h2 id="X-哈希表数据结构"><a href="#X-哈希表数据结构" class="headerlink" title="X. 哈希表数据结构"></a>X. 哈希表数据结构</h2><h3 id="【1】哈希表概述："><a href="#【1】哈希表概述：" class="headerlink" title="【1】哈希表概述："></a>【1】哈希表概述：</h3><ul>
<li>哈希表，又称散列表，底层是<strong>数组和单向链表</strong>的结合体，将两者的优点加在一起。</li>
</ul>
<h3 id="【2】HashMap集合底层的源码："><a href="#【2】HashMap集合底层的源码：" class="headerlink" title="【2】HashMap集合底层的源码："></a>【2】HashMap集合底层的源码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span> </span>&#123;</span><br><span class="line">    <span class="comment">//底层实际上是一个数组（一维数组）</span></span><br><span class="line">    Node&lt;K,V&gt;[] table;</span><br><span class="line">    <span class="comment">//静态内部类HashMap.Node</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123; </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash; <span class="comment">//哈希值(是key的hashCode()方法的执行结果。hash值通过哈希算法/函数得到，可以转换为数组的下标)</span></span><br><span class="line">        <span class="keyword">final</span> K key; <span class="comment">//存到map集合中的key</span></span><br><span class="line">        V value; <span class="comment">//存到map集合中的value</span></span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【3】map-put-k-v-和v-map-get-k-的底层原理："><a href="#【3】map-put-k-v-和v-map-get-k-的底层原理：" class="headerlink" title="【3】map.put(k,v)和v=map.get(k)的底层原理："></a>【3】map.put(k,v)和v=map.get(k)的底层原理：</h3><img src="/2020/04/21/Node-of-JavaSE-5-集合、IO流/13.png" title="13-9">

<h3 id="【4】HashMap的key的特点及原因："><a href="#【4】HashMap的key的特点及原因：" class="headerlink" title="【4】HashMap的key的特点及原因："></a>【4】HashMap的key的特点及原因：</h3><ul>
<li>无序，不可重复</li>
<li>无序？是因为不一定挂到哪个单向链表上。</li>
<li>不可重复？使用equals方法来保证，如果key重复了，会将对应的value值覆盖。</li>
<li>放在HashMap中的key部分其实就是放到HashSet集合中了。因此HashSet集合中的元素也要同时<strong>重写hasCode()以及equals方法</strong>。</li>
</ul>
<h3 id="【5】注意：hasCode-重写不当："><a href="#【5】注意：hasCode-重写不当：" class="headerlink" title="【5】注意：hasCode()重写不当："></a>【5】注意：hasCode()重写不当：</h3><ul>
<li>比如将其重写成一个固定的值，变成一个单向链表。</li>
<li>这种情况称其为<strong>散列分布不均匀</strong>。</li>
<li>若hasCode()返回的值都是不一样的，可以吗？</li>
<li>也不行，变成了一维数组，也是<strong>散列分布不均匀</strong>。</li>
</ul>
<h3 id="【6】HashMap的扩容："><a href="#【6】HashMap的扩容：" class="headerlink" title="【6】HashMap的扩容："></a>【6】HashMap的扩容：</h3><ul>
<li><p><strong>初始化容量16，默认加载因子：0.75</strong>。</p>
</li>
<li><p>默认加载因子0.75指的是一维数组达到75%的容量后，开始扩容，扩容的容量必须是原容量的2倍。</p>
</li>
<li><p>注意：初始化容量必须是2的倍数，这也是官方推荐的，这是为了达到散列均匀，太高HashMap存储效率必须的。</p>
</li>
</ul>
<h3 id="【7】-equals-和hashCode-："><a href="#【7】-equals-和hashCode-：" class="headerlink" title="【7】 equals()和hashCode()："></a>【7】 equals()和hashCode()：</h3><ul>
<li><p>向Map集合中存和取都是<strong>先调用key的hasCode方法</strong>，然后再调用equals方法，equals方法可能调用，也可能不调用。</p>
</li>
<li><p>注意：如果一个类的equals方法重写了，那么hashCode方法必须重写。并且equals方法返回如果是true，那么hashCode返回的值必须一样。</p>
</li>
<li><p>hashCode()和equals()方法不用研究了，<strong>直接用IDEA工具生成，但是这两个方法要同时生成</strong>。</p>
</li>
</ul>
<h3 id="【8】Java8之后对HashMap做的改进："><a href="#【8】Java8之后对HashMap做的改进：" class="headerlink" title="【8】Java8之后对HashMap做的改进："></a>【8】Java8之后对HashMap做的改进：</h3><ul>
<li>单向链表中的元素<strong>超过8以后</strong>，单向链表会变成<strong>红黑树</strong>的结构。当红黑树上的节点数量<strong>小于6</strong>的时候，会重新将红黑树变成<strong>单向链表</strong>数据结构。这是为了提高检索效率，二叉树的存在减小了查找范围。</li>
</ul>
<h3 id="【9】哈希碰撞："><a href="#【9】哈希碰撞：" class="headerlink" title="【9】哈希碰撞："></a>【9】哈希碰撞：</h3><ul>
<li>如果o1和o2的哈希值相同，一定放到同一个单向链表上。</li>
<li>如果o1和o2的哈希值不同，但由于哈希算法执行结束之后转换的数组下标可能相同，此时发生“哈希碰撞”。</li>
</ul>
<h3 id="【10】HashMap的key和value可以是空："><a href="#【10】HashMap的key和value可以是空：" class="headerlink" title="【10】HashMap的key和value可以是空："></a>【10】HashMap的key和value可以是空：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">System.out.println(map.size()); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：key为null在map中只能有一个。</li>
</ul>
<h3 id="【11】HashTable的特点："><a href="#【11】HashTable的特点：" class="headerlink" title="【11】HashTable的特点："></a>【11】HashTable的特点：</h3><ul>
<li>初始容量：11</li>
<li>扩容：原容量乘以2倍加1。</li>
<li>HashTable：key与value都不是空的：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map map = <span class="keyword">new</span> HashTable();</span><br><span class="line">map.put(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">System.out.println(map.size()); <span class="comment">//空指针异常</span></span><br></pre></td></tr></table></figure>

<h2 id="XI-Properties属性类："><a href="#XI-Properties属性类：" class="headerlink" title="XI. Properties属性类："></a>XI. Properties属性类：</h2><h3 id="【1】Properties类概述："><a href="#【1】Properties类概述：" class="headerlink" title="【1】Properties类概述："></a>【1】Properties类概述：</h3><ul>
<li>线程安全，以键值对的形式存在，只能存字符串。</li>
</ul>
<h3 id="【2】setProperties-和getProperties-："><a href="#【2】setProperties-和getProperties-：" class="headerlink" title="【2】setProperties()和getProperties()："></a>【2】setProperties()和getProperties()：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">pro.setProperties(<span class="string">"url"</span>, <span class="string">"jdbc:mysql://localhost:3306/bjpowernode"</span>);</span><br><span class="line">pro.setProperty(<span class="string">"driver"</span>, <span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">pro.setProperty(<span class="string">"username"</span>, <span class="string">"root"</span>);</span><br><span class="line">pro.setProperty(<span class="string">"password"</span>, <span class="string">"123"</span>);</span><br><span class="line"><span class="comment">//通过key获取value</span></span><br><span class="line">String url = pro.getProperties(<span class="string">"url"</span>);</span><br><span class="line">String driver = pro.getProperties(<span class="string">"driver"</span>);</span><br><span class="line">String username = pro.getProperties(<span class="string">"username"</span>);</span><br><span class="line">String password = pro.getProperties(<span class="string">"password"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="XII-TreeSet类"><a href="#XII-TreeSet类" class="headerlink" title="XII.  TreeSet类"></a>XII.  TreeSet类</h2><h3 id="【1】TreeSet类概述："><a href="#【1】TreeSet类概述：" class="headerlink" title="【1】TreeSet类概述："></a>【1】TreeSet类概述：</h3><ul>
<li>底层实际上是一个TreeMap。</li>
<li>TreeMap底层是一个二叉树。</li>
<li>放到TreeSet集合中的元素，相当于放到TreeMap集合的key部分。</li>
<li>无序不可重复，但是可以按照元素的大小顺序自动排列。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;Integer&gt; ts = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">ts.add(<span class="number">100</span>);</span><br><span class="line">ts.add(<span class="number">900</span>);</span><br><span class="line">ts.add(<span class="number">50</span>);</span><br><span class="line"><span class="keyword">for</span>(Integer elt : ts) &#123;</span><br><span class="line">    System.out.println(elt);</span><br><span class="line">&#125; <span class="comment">//50 100 900 (升序)</span></span><br></pre></td></tr></table></figure>

<h3 id="【2】TreeSet自定义类型排序："><a href="#【2】TreeSet自定义类型排序：" class="headerlink" title="【2】TreeSet自定义类型排序："></a>【2】TreeSet自定义类型排序：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="number">32</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="number">20</span>);</span><br><span class="line">        TreeSet&lt;Person&gt; persons = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        persons.add(p1);</span><br><span class="line">        <span class="comment">/*运行时出现这个异常：</span></span><br><span class="line"><span class="comment">        java.lang.ClassCastException</span></span><br><span class="line"><span class="comment">        出现异常原因，Person没有实现java.lang.Comparable接口</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        persons.add(p2); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    Person &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【3】第一种比较方式：自定义类实现Comparable接口："><a href="#【3】第一种比较方式：自定义类实现Comparable接口：" class="headerlink" title="【3】第一种比较方式：自定义类实现Comparable接口："></a>【3】第一种比较方式：自定义类实现Comparable接口：</h3><ul>
<li>像String、Integer之中已经实现了定义类实现Comparable接口，无需再自定义，而自创的类如Person必须实现Comparable接口。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Customer c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//比较规则由程序员决定</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age - c.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Customer[age="</span>+age+<span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【4】自平衡二叉树："><a href="#【4】自平衡二叉树：" class="headerlink" title="【4】自平衡二叉树："></a>【4】自平衡二叉树：</h3><ul>
<li><p>遵循左小右大原则。</p>
</li>
<li><p>三种遍历方式：</p>
<ul>
<li>前序遍历：根左右</li>
<li>中序遍历：左根右</li>
<li>后序遍历：左右根</li>
</ul>
</li>
<li><p>TreeSet和TreeMap采用的是中序遍历方式。Iterator迭代器采用的是中序的遍历方式。</p>
</li>
</ul>
<h3 id="【5】第二种比较方式：实现比较器接口："><a href="#【5】第二种比较方式：实现比较器接口：" class="headerlink" title="【5】第二种比较方式：实现比较器接口："></a>【5】第二种比较方式：实现比较器接口：</h3><ul>
<li>比较器实现java.util.Comparator接口。（Comparable是java.lang包下的。Comparator是java.util包下的。）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//需要给构造方法传递一个比较器</span></span><br><span class="line">        TreeSet&lt;Customer&gt; customer = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> CustomerComparator());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Customer c1, Customer c2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c1.age - c2.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>另一种写法：匿名内部类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;Customer&gt; customer = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Customer&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Customer o1, Customer o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.age - o2.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="【6】两种比较器的选择："><a href="#【6】两种比较器的选择：" class="headerlink" title="【6】两种比较器的选择："></a>【6】两种比较器的选择：</h3><ul>
<li>当比较规则不会发生改变的时候，或者说比较规则只有一个的时候，建议使用Comparator接口。</li>
<li>当比较规则有多个，比较规则之间频繁切换的时候，建议使用Comparator接口（符合OCP规则）。</li>
</ul>
<h2 id="XIII-Collections工具类"><a href="#XIII-Collections工具类" class="headerlink" title="XIII. Collections工具类"></a>XIII. Collections工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变成线程安全的</span></span><br><span class="line">Collections.synchronizedList(list);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将集合元素进行排序（这种方法自定义类要重写Comparable方法）</span></span><br><span class="line">Collection.sort(list);</span><br><span class="line"><span class="comment">//另一种：sort中跟一个比较器对象</span></span><br><span class="line">Collection.sort(list, comparator)</span><br></pre></td></tr></table></figure>

<h1 id="六、-IO流"><a href="#六、-IO流" class="headerlink" title="六、 IO流"></a>六、 IO流</h1><h2 id="I-IO流概述"><a href="#I-IO流概述" class="headerlink" title="I. IO流概述"></a>I. IO流概述</h2><ul>
<li>无论是读还是写都是对内存而言的。读入内存叫输入，写到磁盘叫输出。</li>
<li>所有的流都在java.io下。</li>
</ul>
<img src="/2020/04/21/Node-of-JavaSE-5-集合、IO流/14.png" title="14-0">

<h2 id="II-IO流的分类"><a href="#II-IO流的分类" class="headerlink" title="II. IO流的分类"></a>II. IO流的分类</h2><h3 id="【1】按照流的方向进行分类："><a href="#【1】按照流的方向进行分类：" class="headerlink" title="【1】按照流的方向进行分类："></a>【1】按照流的方向进行分类：</h3><ul>
<li>往内存中去，叫做输入（Input）。或者叫做读（Read）。</li>
<li>从内存中出来，叫做输出（Output）。或者叫做写（Write）。</li>
</ul>
<h3 id="【2】按照读取数据方式不同进行分类："><a href="#【2】按照读取数据方式不同进行分类：" class="headerlink" title="【2】按照读取数据方式不同进行分类："></a>【2】按照读取数据方式不同进行分类：</h3><ul>
<li><p>有的流是按照<strong>字节</strong>的方式读取数据，一次读取1个byte，这种流是<strong>万能</strong>的，什么类型的文件都可以读取，如;图片，文本文件，声音文件，视频文件。</p>
<ul>
<li>如读取“a中国bc张三fe”</li>
<li>第一次读取‘a’，第二次读取‘中’的一半，……</li>
</ul>
</li>
<li><p>有的是按照<strong>字符</strong>的方式进行读取数据的，一次一个字符。这种流不能读取图片、视频、声音等，只能读取<strong>纯文本</strong>，连word文件都无法读取。</p>
<ul>
<li>如读取“a中国bc张三fe”</li>
<li>第一次读取‘a’（windows中占一个字节），第二次读取‘中’（windows中占两个字节），……</li>
</ul>
</li>
<li><p>注意：java中char类型占用两个字节，即‘a’占用两个字节，和windows系统不一样。</p>
</li>
</ul>
<h3 id="【3】IO流的分类小结："><a href="#【3】IO流的分类小结：" class="headerlink" title="【3】IO流的分类小结："></a>【3】IO流的分类小结：</h3><ul>
<li>综上所述，IO流分为<strong>输入流、输出流、字节流、字符流</strong>。</li>
</ul>
<h2 id="III-IO流四大家族："><a href="#III-IO流四大家族：" class="headerlink" title="III. IO流四大家族："></a>III. IO流四大家族：</h2><h3 id="【1】IO四大家族概述："><a href="#【1】IO四大家族概述：" class="headerlink" title="【1】IO四大家族概述："></a>【1】IO四大家族概述：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.io.InputStream <span class="comment">//字节输入流</span></span><br><span class="line">java.io.OutputStream <span class="comment">//字节舒输出流</span></span><br><span class="line">java.io.Reader <span class="comment">//字符输入流</span></span><br><span class="line">java.io.Writer <span class="comment">//字符输出流</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意：以Stream结尾的都是字节流，以Reader/Writer结尾的都是字符流。</p>
</li>
<li><p>java四大家族都是抽象类。</p>
</li>
<li><p>所有流都实现了：java.io.Closeable接口，都是可关闭的，都有<strong>close()</strong>方法。</p>
<ul>
<li>流毕竟是一个管道，是内存和硬盘之间的通道，用完之后要关闭，不然会耗费很多的资源。</li>
</ul>
</li>
<li><p>所有的输出流都实现了：</p>
<ul>
<li>java.io.Flushable接口，都是可以刷新的，都有<strong>flush()</strong>方法。</li>
<li>养成一个习惯，输出流在最终输出之后，一定要记得flush()刷新一下，这个刷新表示的是将管道当中的剩余未输出的数据强行输出完（清空管道！）。</li>
<li>注意：没有flush()可能导致丢失数据。</li>
</ul>
</li>
</ul>
<h3 id="【2】java-io包下的需要掌握的流16个："><a href="#【2】java-io包下的需要掌握的流16个：" class="headerlink" title="【2】java.io包下的需要掌握的流16个："></a>【2】java.io包下的需要掌握的流16个：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件专属</span></span><br><span class="line">java.io.FileInputStream（掌握）</span><br><span class="line">java.io.FileOutputStream（掌握）</span><br><span class="line">java.io.FileReader</span><br><span class="line">java.io.FileWriter</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换流：（将字节流转化成字符流）</span></span><br><span class="line">java.io.InputStraemReader</span><br><span class="line">java.io.OutputStreamWriter</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲流专属</span></span><br><span class="line">java.io.BufferedReader</span><br><span class="line">java.io.BufferedWriter</span><br><span class="line">java.io.BufferedInputStream</span><br><span class="line">java.io.BufferedOutputStream</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据流专属</span></span><br><span class="line">java.io.DataInputStream</span><br><span class="line">java.io.DataOutputStream</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象专属流</span></span><br><span class="line">java.io.ObjectInputStream（掌握）</span><br><span class="line">java.io.ObjectOutputStream（掌握）</span><br><span class="line"></span><br><span class="line"><span class="comment">//标准输出流</span></span><br><span class="line">java.io.PrintWriter</span><br><span class="line">java.io.PrintStream（掌握）</span><br></pre></td></tr></table></figure>

<h2 id="IV-FileInputStream"><a href="#IV-FileInputStream" class="headerlink" title="IV. FileInputStream"></a>IV. FileInputStream</h2><h3 id="【1】概述：-1"><a href="#【1】概述：-1" class="headerlink" title="【1】概述："></a>【1】概述：</h3><ol>
<li>文件字节输入流，万能的，任何类型的文件都可以采用这个流来读。</li>
<li>字节的方式，完成输入的操作，完成读的操作。（硬盘–&gt;内存）</li>
</ol>
<h3 id="【2】基本用法："><a href="#【2】基本用法：" class="headerlink" title="【2】基本用法："></a>【2】基本用法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下这种方式硬盘和内存交互太频繁，一个字节一个字节读取，效率不高，因此不用</span></span><br><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fis = <span class="keyword">new</span> FileInputStream(<span class="string">"D:/course/javase/temp"</span>);</span><br><span class="line">    <span class="keyword">int</span> readData = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((readData = fis.read()) != -<span class="number">1</span>) &#123; <span class="comment">//返回读取到的字节本身，如a为97，当读到最后时，返回-1</span></span><br><span class="line">        System.out.println(readData);</span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(fis != <span class="keyword">null</span>) &#123; <span class="comment">//避免空指针异常</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【3】改进后，使用数组方式读："><a href="#【3】改进后，使用数组方式读：" class="headerlink" title="【3】改进后，使用数组方式读："></a>【3】改进后，使用数组方式读：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*int read(byte[] b)</span></span><br><span class="line"><span class="comment">	一次最多读取b.length个字节</span></span><br><span class="line"><span class="comment">	减少内存和硬盘的交互，提高程序的执行效率</span></span><br><span class="line"><span class="comment">	往byte[]数组中读</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//IDEA默认的当前路径，就是工程Project的根路径</span></span><br><span class="line">    fis = <span class="keyword">new</span> FileInputStream(<span class="string">"ideaproject/temp"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>]; <span class="comment">//准备一个长度是4的byte数组，一次4个字节</span></span><br><span class="line">    <span class="keyword">int</span> readCount = <span class="number">0</span>；</span><br><span class="line">        <span class="keyword">while</span>((readCount = fis.read(bytes)) != -<span class="number">1</span>) &#123; <span class="comment">//返回的数读取到的字节数量，不是字节本身,读到几个返回几个，没读到的话返回-1</span></span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, readCount));</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(fis != <span class="keyword">null</span>) &#123; <span class="comment">//避免空指针异常</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【4】其他常用方法："><a href="#【4】其他常用方法：" class="headerlink" title="【4】其他常用方法："></a>【4】其他常用方法：</h3><ol>
<li><strong>int available()</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回流当中剩余的没有读到的字节数量</span></span><br><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fis = <span class="keyword">new</span> FileInputStream(<span class="string">"tempfile"</span>); <span class="comment">//里面存有"abcdef"</span></span><br><span class="line">    <span class="keyword">int</span> readByte = fis.read(); <span class="comment">//读完一个还剩五个</span></span><br><span class="line">    System.out.println(fis.available()); <span class="comment">//5</span></span><br><span class="line">    <span class="comment">//用处：一次读完文件全部字节,但不适合大文件，因为byte[]数组不能太大</span></span><br><span class="line">    <span class="comment">//byte [] bytes = new byte[fis.available()];</span></span><br><span class="line">    <span class="comment">//int readCount = fis.read(bytes);//6</span></span><br><span class="line">    <span class="comment">//System.out.println(new String(bytes));</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>long skip(long n)</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳过几个字节不读</span></span><br><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fis = <span class="keyword">new</span> FileInputStream(<span class="string">"tempfile"</span>); <span class="comment">//里面存有"abcdef"</span></span><br><span class="line">    fis.skip(<span class="number">3</span>); <span class="comment">//跳过3个</span></span><br><span class="line">    System.out.println(fis.read()); <span class="comment">//100</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="V-FileOutputStream"><a href="#V-FileOutputStream" class="headerlink" title="V. FileOutputStream"></a>V. FileOutputStream</h2><h3 id="【1】基本用法："><a href="#【1】基本用法：" class="headerlink" title="【1】基本用法："></a>【1】基本用法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//下面这种方式谨慎使用，因为会把文件清空再写入</span></span><br><span class="line">    <span class="comment">//fos = new FileOutputStream("myfile"); //将里面的内容清空再写入</span></span><br><span class="line">    fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"myfile"</span>,<span class="keyword">true</span>); <span class="comment">//加上true表示追加到文件末尾 </span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>&#125;;</span><br><span class="line">    <span class="comment">//将byte数组全部写出！</span></span><br><span class="line">    fos.write(bytes); <span class="comment">//abcd</span></span><br><span class="line">    fos.write(bytes, <span class="number">0</span>, <span class="number">2</span>); <span class="comment">//abcdab</span></span><br><span class="line">    fos.flush();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="VI-FileReader和FileWriter"><a href="#VI-FileReader和FileWriter" class="headerlink" title="VI. FileReader和FileWriter"></a>VI. FileReader和FileWriter</h2><h3 id="【1】FileReader："><a href="#【1】FileReader：" class="headerlink" title="【1】FileReader："></a>【1】FileReader：</h3><ul>
<li>文件字符输入，只能读取普通文本。</li>
<li>读取文本内容时，比较方便，快捷。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">FileReader reader = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    reader = <span class="keyword">new</span> FileReader(<span class="string">"tempfile"</span>);</span><br><span class="line">    <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> readCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((readerCount = reader.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.print(<span class="keyword">new</span> String(chars,<span class="number">0</span>,readCount));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【2】FileWriter："><a href="#【2】FileWriter：" class="headerlink" title="【2】FileWriter："></a>【2】FileWriter：</h3><ul>
<li>文件字符输出流。写。只能输出普通文本。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FileWriter out = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    out = <span class="keyword">new</span> FileWriter(<span class="string">"tempfile"</span>); <span class="comment">//存有“我是中国人”,若追加，则带上参数true</span></span><br><span class="line">    <span class="keyword">char</span>[] chars = &#123;<span class="string">'我'</span>,<span class="string">'是'</span>,<span class="string">'中'</span>,<span class="string">'国'</span>,<span class="string">'人'</span>&#125;;</span><br><span class="line">    out.writer(chars);</span><br><span class="line">    out.writer(chars,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    out.writer(<span class="string">"\n"</span>);</span><br><span class="line">    out.writer(<span class="string">"我是一名java软件工程师"</span>); <span class="comment">//可以直接写字符串</span></span><br><span class="line">    out.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="VII-文件复制"><a href="#VII-文件复制" class="headerlink" title="VII. 文件复制"></a>VII. 文件复制</h2><h3 id="【1】文件复制概述："><a href="#【1】文件复制概述：" class="headerlink" title="【1】文件复制概述："></a>【1】文件复制概述：</h3><ul>
<li>使用FileInputStream + FileOutputStream完成文件的拷贝。</li>
<li>拷贝的过程是一边读一边写。</li>
<li>使用以上字节流拷贝文件的时候，文件类型随意，是万能的。</li>
</ul>
<h3 id="【2】基本用法：-1"><a href="#【2】基本用法：-1" class="headerlink" title="【2】基本用法："></a>【2】基本用法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	fis = <span class="keyword">new</span> FileInputStream(<span class="string">"D:/1.avi"</span>);</span><br><span class="line">    fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"C:/1.avi"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>]; <span class="comment">//1MB</span></span><br><span class="line">    <span class="keyword">int</span> readCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((readCount = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        fos.write(bytes, <span class="number">0</span>, readCount);</span><br><span class="line">    &#125;</span><br><span class="line">    fos.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//分开try，不要一起try</span></span><br><span class="line">    <span class="comment">//一起try，其中一个异常会影响到另一个流的关闭</span></span><br><span class="line">    <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【3】用字符流完成文件复制："><a href="#【3】用字符流完成文件复制：" class="headerlink" title="【3】用字符流完成文件复制："></a>【3】用字符流完成文件复制：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">FileReader in = <span class="keyword">null</span>;</span><br><span class="line">FileWriter out = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	in = <span class="keyword">new</span> FileReader(<span class="string">"copy1.java"</span>);</span><br><span class="line">    out = <span class="keyword">new</span> FileWriter(<span class="string">"copr2.java"</span>);</span><br><span class="line">	<span class="keyword">char</span>[] chars = <span class="keyword">new</span> cahr[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> readerCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((readerCount = in.read(chars) != -<span class="number">1</span>) &#123;</span><br><span class="line">        out.write(chars, <span class="number">0</span>, readCount);</span><br><span class="line">    &#125;</span><br><span class="line">    out.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="VIII-缓冲流"><a href="#VIII-缓冲流" class="headerlink" title="VIII. 缓冲流"></a>VIII. 缓冲流</h2><h3 id="【1】BufferedReader："><a href="#【1】BufferedReader：" class="headerlink" title="【1】BufferedReader："></a>【1】BufferedReader：</h3><ul>
<li>带有缓冲区的字符输入流。</li>
<li>使用这个流的时候<strong>不需要自定义char[]数组，byte[]数组</strong>。自带缓冲。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    FileReader reader = <span class="keyword">new</span> FileReader(<span class="string">"copy02.java"</span>);</span><br><span class="line">    <span class="comment">//当一个流的构造方法中需要一个流的时候，这个被传进来的流叫做：节点流</span></span><br><span class="line">    <span class="comment">//外部负责包装的叫做：包装流，或者叫做处理流</span></span><br><span class="line">    <span class="comment">//当前的话，FileReader是一个节点流，BufferedReader叫做包装流</span></span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(reader); <span class="comment">//只能传字符流</span></span><br><span class="line">    String s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>((s = br.readLine()) != <span class="keyword">null</span>) &#123; <span class="comment">//不带最后的换行符</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    br.close(); <span class="comment">//里面的流自动会关</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【2】转换流：将字节流—-gt-字符流："><a href="#【2】转换流：将字节流—-gt-字符流：" class="headerlink" title="【2】转换流：将字节流—&gt;字符流："></a>【2】转换流：将字节流—&gt;字符流：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//字节流</span></span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"copy02.java"</span>);</span><br><span class="line">  	<span class="comment">//通过转换流转换,节点流：in，包装流：reader</span></span><br><span class="line">    InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(in); </span><br><span class="line">    <span class="comment">//节点流：reader，包装流：br</span></span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">    String s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>((s = br.readLine()) != <span class="keyword">null</span>) &#123; <span class="comment">//不带最后的换行符</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    br.close(); <span class="comment">//里面的流自动会关</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【3】BufferedWriter："><a href="#【3】BufferedWriter：" class="headerlink" title="【3】BufferedWriter："></a>【3】BufferedWriter：</h3><ul>
<li>带有缓冲的字符输出流。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"copy"</span>));</span><br><span class="line">    out.write(<span class="string">"hello world!"</span>);</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IX-数据流"><a href="#IX-数据流" class="headerlink" title="IX. 数据流"></a>IX. 数据流</h2><h3 id="【1】DataOutputStream："><a href="#【1】DataOutputStream：" class="headerlink" title="【1】DataOutputStream："></a>【1】DataOutputStream：</h3><ul>
<li>数据字节输出流。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数据专属的字节输出流</span></span><br><span class="line">DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"data"</span>));</span><br><span class="line"><span class="comment">//写数据，同时把类型也写进去</span></span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">100</span>；</span><br><span class="line"><span class="keyword">short</span> s = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">long</span> l = <span class="number">400L</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">4.14</span>;</span><br><span class="line"><span class="keyword">float</span> f = <span class="number">3.0F</span>;</span><br><span class="line"><span class="keyword">boolean</span> sex = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line"><span class="comment">//写</span></span><br><span class="line">dos.writeByte(b);</span><br><span class="line">dos.writeShort(s);</span><br><span class="line">dos.writeInt(i);</span><br><span class="line">dos.writeLong(l);</span><br><span class="line">dos.writeFloat(f);</span><br><span class="line">dos.writeDouble(d);</span><br><span class="line">dos.writeBoolean(sex);</span><br><span class="line">dos.writeChar(c);</span><br><span class="line"><span class="comment">//dos文件打不开，打开是乱码</span></span><br><span class="line">dos.lush();</span><br></pre></td></tr></table></figure>

<h3 id="【2】DataInputStream："><a href="#【2】DataInputStream：" class="headerlink" title="【2】DataInputStream："></a>【2】DataInputStream：</h3><ul>
<li>数据字节输入流：</li>
<li>DataOutputStream写的文件只能通过DataInputStream去读。</li>
<li>读的时候需要提前知道写入的顺序。读的顺序要和写的顺序一样才能正常取出。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"data"</span>));</span><br><span class="line"><span class="keyword">byte</span> b = dis.readByte()；</span><br><span class="line"><span class="keyword">short</span> s = dis.readShort();</span><br><span class="line"><span class="keyword">int</span> i = dis.readInt();</span><br><span class="line"><span class="keyword">long</span> l = dis.readLong();</span><br><span class="line"><span class="keyword">double</span> d = dis.readDouble();</span><br><span class="line"><span class="keyword">float</span> f = dis.readFloat();</span><br><span class="line"><span class="keyword">boolean</span> sex = dis.readBoolean();</span><br><span class="line"><span class="keyword">char</span> c = dis.readChar();</span><br></pre></td></tr></table></figure>

<h2 id="X-标准输出流PrintStream"><a href="#X-标准输出流PrintStream" class="headerlink" title="X. 标准输出流PrintStream"></a>X. 标准输出流PrintStream</h2><h3 id="【1】概述：-2"><a href="#【1】概述：-2" class="headerlink" title="【1】概述："></a>【1】概述：</h3><ul>
<li>java.io.PrintStream: 标准的字节输出流。默认输出到控制台。</li>
</ul>
<h3 id="【2】基本用法：-2"><a href="#【2】基本用法：-2" class="headerlink" title="【2】基本用法："></a>【2】基本用法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分开写</span></span><br><span class="line">PrintStream ps = System.out;</span><br><span class="line">ps.println(<span class="string">"hello zhangsan"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="【3】标准输出流指向log文件："><a href="#【3】标准输出流指向log文件：" class="headerlink" title="【3】标准输出流指向log文件："></a>【3】标准输出流指向log文件：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PrintStream printStream = <span class="keyword">new</span> PrintStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"log"</span>));</span><br><span class="line"><span class="comment">//修改输出方向，将输出方向修改到“log”文件</span></span><br><span class="line">System.setOut(printStream);</span><br><span class="line">System.out.println(<span class="string">"hello"</span>); <span class="comment">//这句话将输出到log文件，不是控制台</span></span><br></pre></td></tr></table></figure>

<h2 id="XI-java-io-File类"><a href="#XI-java-io-File类" class="headerlink" title="XI. java.io.File类"></a>XI. java.io.File类</h2><h3 id="【1】基本概念："><a href="#【1】基本概念：" class="headerlink" title="【1】基本概念："></a>【1】基本概念：</h3><ul>
<li>File继承自Object类，和四大家族没有关系，不能完成文件的读和写。</li>
<li>一个File对象，可能是一个目录，也可能是一个文件。File知识一个路径名的抽象表示形式。</li>
</ul>
<h3 id="【2】常用方法："><a href="#【2】常用方法：" class="headerlink" title="【2】常用方法："></a>【2】常用方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">File f1 = <span class="keyword">new</span> File(<span class="string">"D:\\file"</span>);</span><br><span class="line"><span class="comment">//判断文件是否存在</span></span><br><span class="line">System.out.println(fi.exists());</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">if</span>.exists()) &#123;</span><br><span class="line">    <span class="comment">//文件不存在，则以文件形式创建出来</span></span><br><span class="line">    f1.creatNewFile();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">if</span>.exists()) &#123;</span><br><span class="line">    <span class="comment">//文件不存在，则以目录形式创建出来</span></span><br><span class="line">    f1.mkdir();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">File f2 = <span class="keyword">new</span> File(<span class="string">"D:/a/b/c/d/e"</span>);</span><br><span class="line"><span class="keyword">if</span>(!f2.exists()) &#123;</span><br><span class="line">    <span class="comment">//文件不存在，则以多重目录形式创建出来</span></span><br><span class="line">    f2.mkdirs();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">File f3 = <span class="keyword">new</span> File(<span class="string">"D:\\course\\haha"</span>);</span><br><span class="line"><span class="comment">//获取父路径</span></span><br><span class="line">String parentPath = f3.getParent();</span><br><span class="line">System.out.println(parentPath);<span class="comment">//D:\course</span></span><br><span class="line"><span class="comment">//获曲f3指向的文件</span></span><br><span class="line">File parentFile = f3.getParentFile();</span><br><span class="line"><span class="comment">//获取绝对路径</span></span><br><span class="line">System.out.println(parentFile.getAbsolutePath();<span class="comment">//D:\course\haha</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">File f1 = <span class="keyword">new</span> File(<span class="string">"D:\\course\\lala.txt"</span>)；</span><br><span class="line"><span class="comment">//获取文件名</span></span><br><span class="line">System.out.println(f1.getName());</span><br><span class="line"><span class="comment">//判断是否是一个目录</span></span><br><span class="line">System.out.println(f1.isDirectory());<span class="comment">//false</span></span><br><span class="line"><span class="comment">//判断是否是一个文件</span></span><br><span class="line">System.out.println(f1.isFile());<span class="comment">//true</span></span><br><span class="line"><span class="comment">//获取最后一次修改时间</span></span><br><span class="line"><span class="keyword">long</span> haoMiao = f1.lastModified();<span class="comment">//从1970年到现在的总毫秒数</span></span><br><span class="line">Date time = newDate(haoMiao);</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss SSS"</span>);</span><br><span class="line">String strTime = sdf.format(time);</span><br><span class="line">System.out.println(strTime);<span class="comment">//2020-4-16 20:28 233</span></span><br><span class="line"><span class="comment">//获取文件大小</span></span><br><span class="line">System.out.println(f1.length());<span class="comment">//216064</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"D:\\course\\java"</span>);</span><br><span class="line"><span class="comment">//获取当前目录下的所有子文件</span></span><br><span class="line">File[] files = f.listFiles();</span><br><span class="line"><span class="keyword">for</span>(File file : files) &#123;</span><br><span class="line">    System.out.println(file.getAbsolutePath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="XII-序列化和反序列化"><a href="#XII-序列化和反序列化" class="headerlink" title="XII. 序列化和反序列化"></a>XII. 序列化和反序列化</h2><h3 id="【1】基本概念：-1"><a href="#【1】基本概念：-1" class="headerlink" title="【1】基本概念："></a>【1】基本概念：</h3><img src="/2020/04/21/Node-of-JavaSE-5-集合、IO流/15.png" title="15-0">

<h3 id="【2】基本操作："><a href="#【2】基本操作：" class="headerlink" title="【2】基本操作："></a>【2】基本操作：</h3><ol>
<li>序列化：</li>
</ol>
<ul>
<li>以下程序报错：<strong>java.io.NotSerializableException</strong>:Student不支持序列化。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Student s = <span class="keyword">new</span> Student(<span class="number">111</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line"><span class="comment">//序列化</span></span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"students"</span>));</span><br><span class="line"><span class="comment">//序列化对象</span></span><br><span class="line">oos.writeObject(s); <span class="comment">//到此会生成一个student文件并写入</span></span><br><span class="line"><span class="comment">//刷新</span></span><br><span class="line">oos.flush();</span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure>

<ul>
<li>解决方法：无论序列化和反序列化，让Student类实现<strong>Serializable接口</strong>。</li>
<li>注意：通过源代码发现：Serializable接口只是一个标志接口，里面什么都没有。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>作用：标志作用，java虚拟机看到Student这个类实现了这个接口，会为该类自动生成一个<strong>序列化版本号</strong>。</li>
</ul>
<ol start="2">
<li>反序列化：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"students"</span>));</span><br><span class="line">Object obj = ois.readObject();</span><br><span class="line">System.out.println(obj); <span class="comment">//111zhangsan</span></span><br></pre></td></tr></table></figure>

<h3 id="【3】序列化多个对象："><a href="#【3】序列化多个对象：" class="headerlink" title="【3】序列化多个对象："></a>【3】序列化多个对象：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用集合序列化多个对象</span></span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"zhangsan"</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">"lisi"</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">"wangwu"</span>));</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputaStream(<span class="keyword">new</span> FileOutPutStream(<span class="string">"users"</span>));</span><br><span class="line">oos.writeObject(userList);</span><br><span class="line">oos.flush();</span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"users"</span>));</span><br><span class="line">List&lt;User&gt; userList = (List&lt;User&gt;)ois.readObject();</span><br><span class="line">ois.close();</span><br></pre></td></tr></table></figure>

<h3 id="【4】transient关键字："><a href="#【4】transient关键字：" class="headerlink" title="【4】transient关键字："></a>【4】transient关键字：</h3><ul>
<li>表示游离的，不参加序列化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String name;<span class="comment">//表示name不参与序列化</span></span><br><span class="line">    <span class="keyword">public</span> User &#123;&#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【5】序列化版本号："><a href="#【5】序列化版本号：" class="headerlink" title="【5】序列化版本号："></a>【5】序列化版本号：</h3><ul>
<li>如十年之后，对User类做如下改动：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">//十年后添加</span></span><br><span class="line">    <span class="keyword">public</span> User &#123;&#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>若此时再进行序列化和反序列化，会出现<strong>java.io.InvalidClassException</strong>异常，因为虚拟机生成的新的序列化版本号和老的不一致。</p>
</li>
<li><p>java虚拟机中是根据什么来区分类的？</p>
<ul>
<li>靠类名进行区分。</li>
<li>若类名不同，靠序列化区分。</li>
</ul>
</li>
<li><p>缺陷：一旦代码确定之后，不能进行后续的更改，因为只要修改，必然会重新编译，此时会生成全新的序列化版本号，这时java虚拟机会认为这是一个新的类。</p>
</li>
<li><p>结论：凡是一个类实现了Serializable接口，建议提供一个固定不变的版本号，这样以后这个类即使代码改变，但是版本号不变，java虚拟机会认为是同一个类。建议将序列号手动写出来，不要自动生成。如：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>; <span class="comment">//手动生成序列化版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">//十年后添加</span></span><br><span class="line">    <span class="keyword">public</span> User &#123;&#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="XIII-IO和properties联合使用"><a href="#XIII-IO和properties联合使用" class="headerlink" title="XIII. IO和properties联合使用"></a>XIII. IO和properties联合使用</h2><ul>
<li>一个普通的userinfo.txt文件中有这样的信息：</li>
</ul>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=admin</span><br><span class="line">password=123</span><br></pre></td></tr></table></figure>

<ul>
<li>获取文件中的数据：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FileReader reader = <span class="keyword">new</span> FileReader(<span class="string">"userinfo"</span>);</span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">pro.load(reader); <span class="comment">//文件顺着管道加载到Map集合中</span></span><br><span class="line">String username = pro.getProperty(<span class="string">"username"</span>);</span><br><span class="line">System.out.println(username); <span class="comment">//admin</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>这样做的好处：将来经常要改动的数据，可以将它存储到文件中，java代码不需要改动，服务器也不需要重启，就可以拿到动态的信息。</p>
</li>
<li><p>类似于以上机制的文件叫做<strong>配置文件</strong>。当配置文件的格式是key=value的时候叫做<strong>属性配置文件</strong>，建议以<strong>.properties</strong>结尾，但是不是必须的。</p>
</li>
<li><p>ps：属性配置文件中key重复的话，value自动覆盖！配置文件中以井号“#”表示注释。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Note-of-JavaSE_4_OO补充、数组、常用类、异常]]></title>
      <url>/2020/04/21/Node-of-JavaSE-4/</url>
      <content type="html"><![CDATA[<h1 id="一、面向对象补充"><a href="#一、面向对象补充" class="headerlink" title="一、面向对象补充"></a>一、面向对象补充</h1><a id="more"></a>

<h2 id="I-Object类"><a href="#I-Object类" class="headerlink" title="I. Object类"></a>I. Object类</h2><h3 id="【1】Object类中的toString-方法"><a href="#【1】Object类中的toString-方法" class="headerlink" title="【1】Object类中的toString()方法:"></a>【1】Object类中的toString()方法:</h3><ul>
<li><p>默认实现：类名@对象的内存地址转换成16进制的形式。</p>
</li>
<li><p>目的：将一个 “java对象” 转 换成字符串表现形式。</p>
</li>
<li><p>因为默认实现不易阅读，需要重写toString()方法。如：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.year+ <span class="string">"年"</span> + <span class="keyword">this</span>.month + <span class="string">"月"</span> + <span class="keyword">this</span>.day + <span class="string">"日"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>注意：输出引用的时候，会自动调用该引用的toString()方法</strong>。比如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(t1);</span><br></pre></td></tr></table></figure>

<h3 id="【2】Object类中的equals-方法"><a href="#【2】Object类中的equals-方法" class="headerlink" title="【2】Object类中的equals()方法:"></a>【2】Object类中的equals()方法:</h3><ul>
<li>源代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>目的：以后编程的过程当中，要通过equals方法来判断两个对象是否相等。</li>
<li>判断两个java对象是否相等，不能使用”==”，因为判断的是地址是否相等；默认的equals()也是用的”==”。因此需要子类重写equals();重写如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//双目运算符：instanceof测试一个对象是否是一个类的实例</span></span><br><span class="line">    <span class="comment">//注意传进来的obj可能本身就是MyType类型的</span></span><br><span class="line">    <span class="keyword">if</span>(obj == <span class="keyword">null</span> || !(obj <span class="keyword">instanceof</span> MyTime)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    MyTime t = (MyTime)obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.year == t.year &amp;&amp; <span class="keyword">this</span>.month == t.month &amp;&amp; <span class="keyword">this</span>.day == t.day;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【3】String类已经重写了toString-以及equals-方法"><a href="#【3】String类已经重写了toString-以及equals-方法" class="headerlink" title="【3】String类已经重写了toString()以及equals()方法:"></a>【3】String类已经重写了toString()以及equals()方法:</h3><ul>
<li>比较字符串应该调用是 s1.equals(s2) 方法。</li>
<li>输出字符串用 s1.toString();</li>
<li><strong>注意：java中基本数据类型判断相等用”==”，判断引用数据类型是否相等用equals()</strong>。</li>
</ul>
<h3 id="【4】Object中的finalize-方法：（非重点）"><a href="#【4】Object中的finalize-方法：（非重点）" class="headerlink" title="【4】Object中的finalize()方法：（非重点）"></a>【4】Object中的finalize()方法：（非重点）</h3><ul>
<li>finalize()实际上是sun公司为程序员准备的一个时机，<strong>垃圾销毁时机</strong>，如果希望在对象销毁时执行一端代码的话(比如记录时间)，这段代码要写到finalize()方法中。就比如人临终前要做的事情。</li>
<li>finalize()不需要手动调用，<strong>只需要重写</strong>就行了。重写完GC会自动调用此方法。</li>
<li>finalize()自从java9后就不再用了。</li>
<li>重写的样式类似下面：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwaable </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"即将被销毁！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>怎么把对象变成垃圾？用如下代码。但变成垃圾不一定会执行finalize()只有垃圾太多时才会执行。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj = <span class="keyword">null</span>；</span><br></pre></td></tr></table></figure>

<ul>
<li>加上如下代码，则建议启动垃圾回收器，启动的概率高了一点。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.gc()；</span><br></pre></td></tr></table></figure>

<h3 id="【4】Object中的hashCode-方法：（非重点）"><a href="#【4】Object中的hashCode-方法：（非重点）" class="headerlink" title="【4】Object中的hashCode()方法：（非重点）"></a>【4】Object中的hashCode()方法：（非重点）</h3><ul>
<li>Object中的hashCode方法是什么样的？</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;<span class="comment">//native调用底层c++程序</span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回哈希码，就是一个java对象的内存地址经hash算法得出的值。</li>
</ul>
<h2 id="II-内部类"><a href="#II-内部类" class="headerlink" title="II. 内部类"></a>II. 内部类</h2><h3 id="【1】内部类的分类："><a href="#【1】内部类的分类：" class="headerlink" title="【1】内部类的分类："></a>【1】内部类的分类：</h3><ul>
<li>内部类：可读性差，尽量不用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner1</span></span>&#123; <span class="comment">//静态内部类：类似于静态变量   </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner2</span></span>&#123; <span class="comment">//实例内部类：类似于实例变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner3</span></span>&#123; <span class="comment">//局部内部类：类似于局部变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doOther</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//doSome()方法中的局部内部类，在doOther()中不能用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【2】匿名内部类："><a href="#【2】匿名内部类：" class="headerlink" title="【2】匿名内部类："></a>【2】匿名内部类：</h3><ul>
<li>不建议用，可读性差。</li>
<li>虽然可以new接口+方法体，但不代表可以new接口。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test02</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyMath mm = <span class="keyword">new</span> MyMath();</span><br><span class="line">        mm.mySum(<span class="keyword">new</span> Computer()&#123; <span class="comment">//匿名内部类，1、太复杂太乱 2、无名没法复用。</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a+b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Compute</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMath</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mySum</span><span class="params">(Compute c,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> retValue = c.sum(x,y);</span><br><span class="line">        System.out.println(retValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h1><h3 id="【1】数组特性："><a href="#【1】数组特性：" class="headerlink" title="【1】数组特性："></a>【1】数组特性：</h3><ul>
<li>数组是引用类型，存储在堆内存中。</li>
<li>数组若存储的是<strong>java对象</strong>的话，实际上存储的是对象的引用（内存地址）。</li>
<li>数组为什么查询效率高？</li>
<li>1、内存空间连续。</li>
<li>2、每个元素类型相同，占用空间一样。</li>
<li>3、通过<strong>首元素地址+单元占用空间*待查下标号就可以定位目标地址的元素</strong>。</li>
</ul>
<img src="/2020/04/21/Node-of-JavaSE-4/1.png" title="1-1">

<h3 id="【2】main方法的String数组："><a href="#【2】main方法的String数组：" class="headerlink" title="【2】main方法的String数组："></a>【2】main方法的String数组：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> 	System.out.println(<span class="string">"args.length"</span>); <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>args数组长度是0，但不是null；</li>
<li>可以通过用户控制台传参，或<strong>idea中Run -&gt; Edit Configuration -&gt; 选中相应的项目 -&gt;Program arguments传参</strong>。</li>
<li>用途：可以模拟用户登录。</li>
</ul>
<h3 id="【3】数组扩容："><a href="#【3】数组扩容：" class="headerlink" title="【3】数组扩容："></a>【3】数组扩容：</h3><ul>
<li>数组扩容：只能通过新建一个大一点的数组，然后一个一个拷贝到大数组中去。但是效率低，不建议。</li>
<li>拷贝方式：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(src原数组，srcPos原数组起始位，dest目标数组，destPos目标数组起始点，length拷贝长度)</span><br></pre></td></tr></table></figure>

<h3 id="【4】数组模拟栈："><a href="#【4】数组模拟栈：" class="headerlink" title="【4】数组模拟栈："></a>【4】数组模拟栈：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] objs;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line">    MyStack()&#123;</span><br><span class="line">        <span class="keyword">private</span> Object[] objs  = <span class="keyword">new</span> Object[<span class="number">3</span>];</span><br><span class="line">        index = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="keyword">this</span>.objs.length - <span class="number">1</span>)&#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">this</span>.objs[index] = obj;</span><br><span class="line">            System.out.println(<span class="string">"push success"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"push failed"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>)</span><br><span class="line">            System.out.println(<span class="string">"pop failed"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.objs[index] = <span class="keyword">null</span>;</span><br><span class="line">            index--;</span><br><span class="line">            System.out.println(<span class="string">"pop success"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.objs.length &amp;&amp; <span class="keyword">this</span>.objs[i] != <span class="keyword">null</span>; i++) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">this</span>.objs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【5】Arrays工具类："><a href="#【5】Arrays工具类：" class="headerlink" title="【5】Arrays工具类："></a>【5】Arrays工具类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.Arrays</span><br></pre></td></tr></table></figure>

<ul>
<li>其中里面有sort()方法。可以进行排序，静态方法，直接类名调用就行。</li>
<li>里面有binarySearch(arr, key)方法。可以进行查找关键字。</li>
</ul>
<h3 id="【6】冒泡排序："><a href="#【6】冒泡排序：" class="headerlink" title="【6】冒泡排序："></a>【6】冒泡排序：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubble</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> temp, flag;</span><br><span class="line">    <span class="keyword">for</span>(i=o; i&lt;arr.length; i++) &#123;</span><br><span class="line">        flag = flase;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;arr.length-i-<span class="number">1</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                falg = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==flase)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【7】选择排序："><a href="#【7】选择排序：" class="headerlink" title="【7】选择排序："></a>【7】选择排序：</h3><ul>
<li>比冒泡效率高，选择排序交换位置是有意义的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> min,temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        min=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>; j&lt;arr.length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[min])&#123;</span><br><span class="line">                min = j; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[min];</span><br><span class="line">        arr[min] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【8】二分法查找："><a href="#【8】二分法查找：" class="headerlink" title="【8】二分法查找："></a>【8】二分法查找：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>, high = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &lt; key) &#123;</span><br><span class="line">            low = mid +<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &gt; key) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、常用类"><a href="#三、常用类" class="headerlink" title="三、常用类"></a>三、常用类</h1><h2 id="I-String类"><a href="#I-String类" class="headerlink" title="I. String类"></a>I. String类</h2><h3 id="【1】String特性："><a href="#【1】String特性：" class="headerlink" title="【1】String特性："></a>【1】String特性：</h3><ul>
<li>String对象（用双引号””括起来的）都是不可变的，也就是说”abc”从出生到死亡，不可变。</li>
<li>双引号括起来的字符串，例如”abc”都是直接存放在<strong>方法区</strong>的<strong>字符串常量池</strong>中的。</li>
<li>String已经<strong>重写了toString()和equals()方法</strong>。</li>
<li>这两行代码表示底层创建了三个字符串对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"abcdef"</span>;</span><br><span class="line">String s2 = <span class="string">"abcdef"</span> + <span class="string">"xy"</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>这行代码表示的是new的对象在堆中，存放着指向方法区”xy”的内存地址。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"xy"</span>);</span><br></pre></td></tr></table></figure>

<img src="/2020/04/21/Node-of-JavaSE-4/2.png" title="2-0">

<img src="/2020/04/21/Node-of-JavaSE-4/3.png" title="3-0">

<h3 id="【2】String的构造方法："><a href="#【2】String的构造方法：" class="headerlink" title="【2】String的构造方法："></a>【2】String的构造方法：</h3><ul>
<li>将byte数组中的部分传递进去(可以不写offset、length参数，就是传递bytes全部)：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bytes = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;; <span class="comment">//97是a，98是b，99是c</span></span><br><span class="line">String s3 = <span class="keyword">new</span> String(bytes, offset:<span class="number">1</span>, length:<span class="number">2</span>);</span><br><span class="line">System.out.println(s3); <span class="comment">//bc</span></span><br></pre></td></tr></table></figure>

<ul>
<li>将char数组中的部分传递进去(可以不写offset、length参数，就是传递chars全部)：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] chars = &#123;<span class="string">'h'</span>，<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>&#125;;</span><br><span class="line">String s4 = <span class="keyword">new</span> String(chars, offset:<span class="number">2</span>, length:<span class="number">3</span>);</span><br><span class="line">System.out.pringln(s4); <span class="comment">//llo</span></span><br></pre></td></tr></table></figure>

<h3 id="【3】String的常用方法："><a href="#【3】String的常用方法：" class="headerlink" title="【3】String的常用方法："></a>【3】String的常用方法：</h3><ol>
<li><strong>char charAt(int index) ：</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">"hello"</span>.charAt(<span class="number">1</span>);</span><br><span class="line">System.out.println(c); <span class="comment">//e</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>(了解) int compareTo(String anotherString)</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串之间比较大小不能直接用&lt; &gt;,需要使用此方法</span></span><br><span class="line">System.out.println(<span class="string">"abc"</span>.compareTo(<span class="string">"abc"</span>));<span class="comment">//0 前后一致</span></span><br><span class="line">System.out.println(<span class="string">"abcd"</span>.compareTo(<span class="string">"abce"</span>));<span class="comment">//-1 前小后大</span></span><br><span class="line">System.out.println(<span class="string">"abce"</span>.compareTo(<span class="string">"abcd"</span>));<span class="comment">//0 前大后小</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>boolean contains（CharSequence s)</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判端前面的字符串是否包含后边的</span></span><br><span class="line">System.out.println(<span class="string">"helloworld.java"</span>.contains(<span class="string">".java"</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>boolean endWith(String suffix)</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判端当前字符串是否以某个字符串结尾</span></span><br><span class="line">System.out.println(<span class="string">"text.txt"</span>.endWith(<span class="string">".java"</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>boolean equalsIgnoreCase(String anotherString)</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//忽略大小写，比较是否相等</span></span><br><span class="line">System.out.println(<span class="string">"ABC"</span>.equalsIgnoreCase(<span class="string">"abc"</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><strong>byte[] getBytes()</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bytes = <span class="string">"abcdef"</span>.getBytes();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">    System.out.println(bytes[i]);</span><br><span class="line">&#125;<span class="comment">//97 98 99 100 101 102</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>int indexOf(String str)</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判端某个子字符串在当前字符串第一次出现的索引(下标)</span></span><br><span class="line">System.out.println(<span class="string">"adfagd"</span>.indexOf(<span class="string">"ag"</span>)); <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li><strong>boolean isEmpty()</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判端某个字符串是否为空</span></span><br><span class="line">String s = <span class="string">""</span>;</span><br><span class="line">System.out.println(s.isEmpty()); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ol start="9">
<li><strong>int length()</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判端数组长度是length属性，判端字符串长度是length方法</span></span><br><span class="line">System.out.println(<span class="string">"abc"</span>.length()) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<ol start="10">
<li><strong>int lastIndexOf(String str)</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判端某个子字符串中最后一次出现的索引（下标）</span></span><br><span class="line">System.out.println(<span class="string">"asgasdgaf"</span>.lastIndexOf(<span class="string">"a"</span>)); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>

<ol start="11">
<li><strong>String replace(charSequence target,  charSequence replacement)</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String newString = <span class="string">"http://www.baidu.com"</span>.replace(<span class="string">"http://"</span>,<span class="string">"https://"</span>);</span><br><span class="line">System.out.println(newString);<span class="comment">//https://www.baidu.com</span></span><br></pre></td></tr></table></figure>

<ol start="12">
<li><strong>String[] split(String regex)</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拆分字符串</span></span><br><span class="line">String[] ymd = <span class="string">"1990-10-12"</span>.split(<span class="string">"-"</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ymd.length; i++) &#123;</span><br><span class="line">        System.out.println(ymd[i]);</span><br><span class="line">    &#125;<span class="comment">//1990 10 12</span></span><br></pre></td></tr></table></figure>

<ol start="13">
<li><strong>boolean startsWith(String prefix)</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判端字符串是否以某字符串开始</span></span><br><span class="line">System.out.println(<span class="string">"http://www.baidu.com"</span>.startWith(<span class="string">"http"</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ol start="14">
<li><strong>String substring(int beginIndex)</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//截取字符串</span></span><br><span class="line">System.out.println(<span class="string">"http://www.baidu.com"</span>.substring(<span class="number">7</span>));</span><br><span class="line"><span class="comment">//www.baidu.com (从下标7开始截取)</span></span><br></pre></td></tr></table></figure>

<ol start="15">
<li><strong>String substring(int beginIndex, int endIndex)</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//截取下标 7 开始，到 10 的前一位（9）</span></span><br><span class="line"><span class="comment">//字符串长度：endIndex - beginIndex</span></span><br><span class="line">System.out.println(<span class="string">"http://www.baidu.com"</span>.substring(<span class="number">7</span>,<span class="number">10</span>)); <span class="comment">//www</span></span><br></pre></td></tr></table></figure>

<ol start="16">
<li><strong>char[] toCharArray()</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] chars = <span class="string">"sadfg"</span>.toCharArray();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">    System.out.println(chars[i]);</span><br><span class="line">&#125;<span class="comment">// s a d f g</span></span><br></pre></td></tr></table></figure>

<ol start="17">
<li><strong>String toLowerCase(); String toUpperCase()</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转化为小写</span></span><br><span class="line">System.out.println(<span class="string">"ABCDefKXyz"</span>.toLowerCase());<span class="comment">//abcdefkxyz</span></span><br><span class="line"><span class="comment">//转化为大写</span></span><br><span class="line">System.out.println(<span class="string">"ABCDefKXyz"</span>.toUpperCase());<span class="comment">//ABCDEFKXYZ</span></span><br></pre></td></tr></table></figure>

<ol start="18">
<li><strong>String trim()</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去除字符串前后空白,中间的不会去除</span></span><br><span class="line">System,out.println(<span class="string">"   hello  world  "</span>.trim());<span class="comment">//hello  world</span></span><br></pre></td></tr></table></figure>

<ol start="19">
<li><strong>String.valueOf()</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String中只有一个方法是静态的，不需要new对象：valueOf</span></span><br><span class="line"><span class="comment">//作用：把“非字符串”转化为“字符串”</span></span><br><span class="line">String s1 = String.valueOf(<span class="number">123</span>);</span><br><span class="line">System.out.println(s1);</span><br><span class="line"><span class="comment">//参数是一个对象的时候，会自动调用该对象的toString()方法</span></span><br><span class="line">String s1 = String.valueOf(<span class="keyword">new</span> Customer());</span><br><span class="line">System.out.println(s1); <span class="comment">//没有重写toString(),会输出new的Customer的内存地址</span></span><br></pre></td></tr></table></figure>

<ol start="20">
<li>为什么用println()的时候会自动调用toString()方法？</li>
</ol>
<ul>
<li>本质上，System.out.pringln()方法先调用valueOf(),再通过valueOf()调用toString()方法。</li>
</ul>
<h2 id="II-StringBuffer、StringBuilder类"><a href="#II-StringBuffer、StringBuilder类" class="headerlink" title="II. StringBuffer、StringBuilder类"></a>II. StringBuffer、StringBuilder类</h2><h3 id="【1】思考：如果频繁的进行字符串拼接，会出现什么问题？"><a href="#【1】思考：如果频繁的进行字符串拼接，会出现什么问题？" class="headerlink" title="【1】思考：如果频繁的进行字符串拼接，会出现什么问题？"></a>【1】思考：如果频繁的进行字符串拼接，会出现什么问题？</h3><ul>
<li>因为java的字符串是不可变的，每一次进行拼接都会产生新的字符串。造成内存空间的浪费。</li>
</ul>
<h3 id="【2】StringBuffer特性："><a href="#【2】StringBuffer特性：" class="headerlink" title="【2】StringBuffer特性："></a>【2】StringBuffer特性：</h3><ul>
<li>StringBuffer底层实际上是一个byte[] 数组。</li>
<li>往StringBuffer中放字符串，实际上是放到了byte[] 数组中去了。</li>
<li>StringBuffer的初始化容量是16。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();<span class="comment">//创建一个初始化容量是16的byte[]数组。（字符串缓冲区对象）</span></span><br><span class="line">stringBuffer.append(<span class="string">"a"</span>);</span><br><span class="line">stringBuffer.append(<span class="number">3.14</span>);</span><br><span class="line">stringBuffer.append(<span class="keyword">true</span>);</span><br><span class="line">stringBuffer.append(<span class="number">100L</span>);<span class="comment">//如果byte数组满了会自动扩容,旧的数组会自动释放掉，详见数组扩容章节</span></span><br><span class="line">System.out.println(stringBuffer.toString());<span class="comment">//a3.14true100</span></span><br></pre></td></tr></table></figure>

<h3 id="【3】如何优化StringBuffer的性能？"><a href="#【3】如何优化StringBuffer的性能？" class="headerlink" title="【3】如何优化StringBuffer的性能？"></a>【3】如何优化StringBuffer的性能？</h3><ul>
<li>在创建StringBuffer的时候尽可能给定一个初始化容量。减少扩容次数。</li>
</ul>
<h3 id="【4】StringBuffer和StringBuilder的区别："><a href="#【4】StringBuffer和StringBuilder的区别：" class="headerlink" title="【4】StringBuffer和StringBuilder的区别："></a>【4】StringBuffer和StringBuilder的区别：</h3><ul>
<li>Stringbuilder也是16容量，也可以完成字串的拼接，用法和StringBuffer相同。</li>
<li>StringBuffer中的方法都有<strong>synchronized关键字修饰</strong>，表示StringBuffer在多线程环境下是<strong>线程安全</strong>的。而StringBuilder<strong>没有synchronized修饰</strong>，在多线程环境下是<strong>线程不安全</strong>的。</li>
<li>如果使用局部变量的话，建议使用StringBuilder，因为局部变量不存在线程安全问题。StringBuffer效率较低。</li>
</ul>
<h2 id="III-八种包装类"><a href="#III-八种包装类" class="headerlink" title="III. 八种包装类"></a>III. 八种包装类</h2><h3 id="【1】包装类存在的意义："><a href="#【1】包装类存在的意义：" class="headerlink" title="【1】包装类存在的意义："></a>【1】包装类存在的意义：</h3><ul>
<li>一种需求：调用doSome()的方法的时候需要传递一个数字进去。</li>
<li>但是数字的是基本类型，而doSome()方法参数类型是Object。因此八种数据类型不够用，所以sun公司提供八种包装类型。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【2】八种基本类型对应的包装类型："><a href="#【2】八种基本类型对应的包装类型：" class="headerlink" title="【2】八种基本类型对应的包装类型："></a>【2】八种基本类型对应的包装类型：</h3><table>
<thead>
<tr>
<th align="left">基本数据类型</th>
<th>包装类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">byte</td>
<td>java.lang.Byte（父类Number）</td>
</tr>
<tr>
<td align="left">short</td>
<td>java.lang.Short（父类Number）</td>
</tr>
<tr>
<td align="left">int</td>
<td>java.lang.Integer（父类Number）</td>
</tr>
<tr>
<td align="left">long</td>
<td>java.lang.Long（父类Number）</td>
</tr>
<tr>
<td align="left">float</td>
<td>java.lang.Float（父类Number）</td>
</tr>
<tr>
<td align="left">double</td>
<td>java.long.Double（父类Number）</td>
</tr>
<tr>
<td align="left">boolean</td>
<td>java.long.Boolean（父类Object）</td>
</tr>
<tr>
<td align="left">char</td>
<td>java.lang.Character（父类Object）</td>
</tr>
</tbody></table>
<h3 id="【3】装箱和拆箱："><a href="#【3】装箱和拆箱：" class="headerlink" title="【3】装箱和拆箱："></a>【3】装箱和拆箱：</h3><ul>
<li><strong>装箱：基本数据类型 –（转化为）–&gt; 引用数据类型</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>拆箱：引用数据类型 –（转化为）–&gt; 基本数据类型</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f = i.floatValue();</span><br><span class="line">System.out.println(f); <span class="comment">//123.0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Number类中有这样的方法，是用于<strong>拆箱</strong>的：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">byte</span> <span class="title">byteValue</span><span class="params">()</span></span>; <span class="comment">//以byte形式返回指定的数值</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">doubleValue</span><span class="params">()</span></span>; <span class="comment">//以double形式返回指定的数值</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">floatValue</span><span class="params">()</span></span>; <span class="comment">//以float形式返回指定的数值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span></span>; <span class="comment">//以int形式返回指定的数值</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">longValue</span><span class="params">()</span></span>; <span class="comment">//以long形式返回指定的数值</span></span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="title">shortValue</span><span class="params">()</span></span>; <span class="comment">//以short形式返回指定的数值</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>自动装箱（JDK1.5之后）：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer x = <span class="number">100</span>; <span class="comment">//int ---&gt; Integer</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>自动拆箱（JDK1.5之后）：</strong></li>
<li>只有+ - * /才可能触发自动拆箱机制</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> y = x; <span class="comment">//Integer ---&gt; int</span></span><br><span class="line">System.out.println(x + <span class="number">1</span>); <span class="comment">//Integer(x) ---&gt; int(x), java5之前会报错</span></span><br></pre></td></tr></table></figure>

<ul>
<li>特殊规律：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java中为了提高程序的执行效率，将（-128，127）之间的所有包装对象提前创建好，放到方法区的常量池中了，目的是只要用这个区间的数据不需要再进行new了，直接从整数型常量池中取出来</span></span><br><span class="line">Integer a = <span class="number">128</span>;</span><br><span class="line">Integer b = <span class="number">128</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">//false</span></span><br><span class="line">Integer a = <span class="number">127</span>;</span><br><span class="line">Integer b = <span class="number">127</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="【4】包装类构造方法："><a href="#【4】包装类构造方法：" class="headerlink" title="【4】包装类构造方法："></a>【4】包装类构造方法：</h3><ul>
<li>Integer两种构造方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int ---&gt; Integer</span></span><br><span class="line">Integer x = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line"><span class="comment">//String ---&gt; Integer</span></span><br><span class="line">Integer y = <span class="keyword">new</span> Integer(<span class="string">"123"</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>Double两种构造方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//double ---&gt; Double</span></span><br><span class="line">Double x = <span class="keyword">new</span> Double(<span class="number">123.1</span>);</span><br><span class="line"><span class="comment">//String ---&gt; Double</span></span><br><span class="line">Double y = <span class="keyword">new</span> Double(<span class="string">"123.1"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="【5】获取最大值最小值："><a href="#【5】获取最大值最小值：" class="headerlink" title="【5】获取最大值最小值："></a>【5】获取最大值最小值：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer.MAX_VALUE <span class="comment">//int最大值</span></span><br><span class="line">Integer.MIN_VALUE <span class="comment">//int最小值</span></span><br><span class="line">Byte.MAX_VALUE <span class="comment">//byte最大值：127</span></span><br><span class="line">Byte.MIN_VALUE <span class="comment">//byte最小值：-128</span></span><br></pre></td></tr></table></figure>

<h3 id="【6】包装类常用方法："><a href="#【6】包装类常用方法：" class="headerlink" title="【6】包装类常用方法："></a>【6】包装类常用方法：</h3><ol>
<li><strong>static int parseInt(String s)</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法，传参String，返回int</span></span><br><span class="line"><span class="keyword">int</span> retValue = Integer.parseInt(<span class="string">"123"</span>); <span class="comment">//String ---&gt; int</span></span><br><span class="line"><span class="keyword">double</span> retValue = Double.parseDouble(<span class="string">"3.14"</span>); <span class="comment">//String ---&gt; double</span></span><br><span class="line"><span class="comment">//float 类似</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>[了解]static String toBinaryString(int i)</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将十进制转换成二进制字符串</span></span><br><span class="line">String binaryString = Integer.toBinaryString(<span class="number">3</span>);<span class="comment">// 11</span></span><br><span class="line"><span class="comment">//同理Integer.toHexString(int i)转化为16进制；Integer.toOctalString(int i)转为八进制；</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>[了解]static Integer valueOf(int i)</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 = Integer.valueOf(<span class="number">100</span>);</span><br><span class="line">System.out.println(i1);<span class="comment">//int---&gt;Integer</span></span><br><span class="line">Integer i2 = Integer.valueOf(<span class="string">"100"</span>);</span><br><span class="line">System.out.println(i2);<span class="comment">//String---&gt;Integer</span></span><br></pre></td></tr></table></figure>

<h3 id="【7】NumberFormatException异常："><a href="#【7】NumberFormatException异常：" class="headerlink" title="【7】NumberFormatException异常："></a>【7】NumberFormatException异常：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> retValue = Integer.parseInt(<span class="string">"中文"</span>); <span class="comment">//NumberFormatException</span></span><br></pre></td></tr></table></figure>

<h3 id="【8】String、int、Integer类型的转化："><a href="#【8】String、int、Integer类型的转化：" class="headerlink" title="【8】String、int、Integer类型的转化："></a>【8】String、int、Integer类型的转化：</h3><img src="/2020/04/21/Node-of-JavaSE-4/4.png" title="4-0">

<h2 id="IV-Date日期类"><a href="#IV-Date日期类" class="headerlink" title="IV. Date日期类"></a>IV. Date日期类</h2><h3 id="【1】基本用法："><a href="#【1】基本用法：" class="headerlink" title="【1】基本用法："></a>【1】基本用法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date nowTime = <span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(nowTime);<span class="comment">//Thu Mar 05 10:51:33 CST 2020</span></span><br><span class="line">Date time = <span class="keyword">new</span> Date(<span class="number">12</span>); <span class="comment">//表示1970-01-01 08:00:00 012 （北京是东八区，早八个小时）</span></span><br></pre></td></tr></table></figure>

<h3 id="【2】日期格式化："><a href="#【2】日期格式化：" class="headerlink" title="【2】日期格式化："></a>【2】日期格式化：</h3><ul>
<li>SimpleDateFormat类：java.text包下的，负责日期格式化。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">yyyy 年</span></span><br><span class="line"><span class="comment">MM 月</span></span><br><span class="line"><span class="comment">dd 日</span></span><br><span class="line"><span class="comment">HH 时</span></span><br><span class="line"><span class="comment">mm 分</span></span><br><span class="line"><span class="comment">ss 秒</span></span><br><span class="line"><span class="comment">SSS 毫秒</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss SSS"</span>);</span><br><span class="line">String mowTime = sdf.format(nowTime);</span><br><span class="line">System.out.println(nowTimeStr); <span class="comment">//2020-03-05 11:00:57 887</span></span><br></pre></td></tr></table></figure>

<h3 id="【3】字符串转化为日期："><a href="#【3】字符串转化为日期：" class="headerlink" title="【3】字符串转化为日期："></a>【3】字符串转化为日期：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String time = <span class="string">"2008-08-08 08:08:08 888"</span>;</span><br><span class="line">        SimpleDateFormat sdf2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss SSS"</span>);</span><br><span class="line">        Date dateTime = sdf2.parse(time);</span><br><span class="line">        System.out.println(dateTime);<span class="comment">//Fri Aug 08 08:08:08 CST 2008</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【4】获取当前日期到1970年的总毫秒数："><a href="#【4】获取当前日期到1970年的总毫秒数：" class="headerlink" title="【4】获取当前日期到1970年的总毫秒数："></a>【4】获取当前日期到1970年的总毫秒数：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取自1970年1月1日 00:00:00 000到当前系统时间的总毫秒数。</span></span><br><span class="line">Long nowTimeMills = System.currentTimeMillis();</span><br><span class="line">System.out.println(nowTimeMills); <span class="comment">//1583377892146</span></span><br></pre></td></tr></table></figure>

<ul>
<li>用途：统计一个方法执行的时长：结束和开始各声明一个计数，两数作差。</li>
</ul>
<h3 id="【5】小结：System类的相关属性和方法："><a href="#【5】小结：System类的相关属性和方法：" class="headerlink" title="【5】小结：System类的相关属性和方法："></a>【5】小结：System类的相关属性和方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out <span class="comment">//out是System类的静态变量</span></span><br><span class="line">System.out.println() <span class="comment">//println()方法不是System类的是PrintStream的方法</span></span><br><span class="line">System.gc() <span class="comment">//建议启动垃圾回收机制</span></span><br><span class="line">System.currentTimeMillis() <span class="comment">//获取获取当前日期到1970年的总毫秒数</span></span><br><span class="line">System.exit(<span class="number">0</span>); <span class="comment">//退出JVM</span></span><br></pre></td></tr></table></figure>

<h2 id="V-数字类"><a href="#V-数字类" class="headerlink" title="V. 数字类"></a>V. 数字类</h2><h3 id="【1】数字格式化：-了解"><a href="#【1】数字格式化：-了解" class="headerlink" title="【1】数字格式化：(了解)"></a>【1】数字格式化：(了解)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># 表示任意数字</span></span><br><span class="line"><span class="comment">, 表示千分位</span></span><br><span class="line"><span class="comment">. 表示小数点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">"###,###.##"</span>);</span><br><span class="line">String s = df.format(<span class="number">1234.563251</span>);</span><br><span class="line">System.out.println(s); <span class="comment">//1,234.56</span></span><br></pre></td></tr></table></figure>

<h3 id="【2】BigDecimal属于大数据："><a href="#【2】BigDecimal属于大数据：" class="headerlink" title="【2】BigDecimal属于大数据："></a>【2】BigDecimal属于大数据：</h3><ul>
<li>精度极高，属于java对象，位于在java.math.BigDecimal，财务软件中用到,面试中财务软件数据类型就说BigDecimal。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal v1 = <span class="keyword">new</span> BigDecimal(<span class="number">100</span>); <span class="comment">//精度极高的100</span></span><br><span class="line">BigDecimal v2 = <span class="keyword">new</span> BigDecimal(<span class="number">200</span>); <span class="comment">//精度极高的200</span></span><br><span class="line">BigDecimal v3 = v1.add(v2); <span class="comment">//精度极高的300</span></span><br></pre></td></tr></table></figure>

<h3 id="【3】随机数："><a href="#【3】随机数：" class="headerlink" title="【3】随机数："></a>【3】随机数：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> num1 = random.nextInt(); <span class="comment">//产生int类型取值范围内的数字</span></span><br><span class="line"><span class="keyword">int</span> num2 = random.nextInt(<span class="number">101</span>)； <span class="comment">// 0~100随机数,不包括101</span></span><br></pre></td></tr></table></figure>

<h2 id="VI-枚举类"><a href="#VI-枚举类" class="headerlink" title="VI. 枚举类"></a>VI. 枚举类</h2><h3 id="【1】一种设计缺陷："><a href="#【1】一种设计缺陷：" class="headerlink" title="【1】一种设计缺陷："></a>【1】一种设计缺陷：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：执行成功返回1，不成功返回0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> c = a / b;</span><br><span class="line">     	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>缺陷：可能程序员会打错代码，如误把return 1; 打成return 10; 编译器也检查不出错误。</li>
</ul>
<h3 id="【2】枚举类型："><a href="#【2】枚举类型：" class="headerlink" title="【2】枚举类型："></a>【2】枚举类型：</h3><ul>
<li>编译后也是生成class文件。</li>
<li>枚举也是引用数据类型，枚举中的每个值可以看成常量。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">divide</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> c = a / b;</span><br><span class="line">     	<span class="keyword">return</span> Result.SUCCESS;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">		<span class="keyword">return</span> Result.FAIL;     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> Result &#123;</span><br><span class="line">    SUCCESS, FAIL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、异常处理"><a href="#四、异常处理" class="headerlink" title="四、异常处理"></a>四、异常处理</h1><h2 id="I-异常的基本特征"><a href="#I-异常的基本特征" class="headerlink" title="I. 异常的基本特征"></a>I. 异常的基本特征</h2><h3 id="【1】异常的作用："><a href="#【1】异常的作用：" class="headerlink" title="【1】异常的作用："></a>【1】异常的作用：</h3><ul>
<li>增强查程序的健壮性</li>
</ul>
<h3 id="【2】每个异常类都可以创建异常对象："><a href="#【2】每个异常类都可以创建异常对象：" class="headerlink" title="【2】每个异常类都可以创建异常对象："></a>【2】每个异常类都可以创建异常对象：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NumberFormatException nfe = <span class="keyword">new</span> NumberFormatException(<span class="string">"数字格式化异常！"</span>);</span><br><span class="line">System.out.println(nfe); <span class="comment">// java.lang.NumberFormatException; 数字格式化异常！</span></span><br></pre></td></tr></table></figure>

<h3 id="【3】JVM在发现错误的时候会自动new异常："><a href="#【3】JVM在发现错误的时候会自动new异常：" class="headerlink" title="【3】JVM在发现错误的时候会自动new异常："></a>【3】JVM在发现错误的时候会自动new异常：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c = a / b; <span class="comment">//JVM执行到这里的时候，自动new异常对象</span></span><br></pre></td></tr></table></figure>

<h2 id="II-异常处理机制"><a href="#II-异常处理机制" class="headerlink" title="II. 异常处理机制"></a>II. 异常处理机制</h2><h3 id="【1】-如何描绘异常的继承结构？"><a href="#【1】-如何描绘异常的继承结构？" class="headerlink" title="【1】 如何描绘异常的继承结构？"></a>【1】 如何描绘异常的继承结构？</h3><ul>
<li>可以使用UML图来描述继承结构，UML工具：Rational Rose(收费)、starUML。</li>
</ul>
<h3 id="【2】异常的继承结构："><a href="#【2】异常的继承结构：" class="headerlink" title="【2】异常的继承结构："></a>【2】异常的继承结构：</h3>

<ul>
<li>编译时异常（也叫受检异常、受控异常）和运行时异常（也叫未受检异常、非受控异常），<strong>都发生在运行阶段</strong>。编译阶段是不会发生的。</li>
<li>所有异常都是在运行阶段发生的，因为只有运行阶段才能new异常对象。</li>
<li>编译时异常得名原因：因为必须在编译阶段预先处理，如果不处理编译器报错，因此得名。</li>
</ul>
<h3 id="【3】编译时异常、运行时异常区别："><a href="#【3】编译时异常、运行时异常区别：" class="headerlink" title="【3】编译时异常、运行时异常区别："></a>【3】编译时异常、运行时异常区别：</h3><ol>
<li><strong>编译时异常发生的概率比较高。运行时异常发生的概率比较低</strong>。</li>
</ol>
<ul>
<li>编译时异常举个例子：外面下大雨，如果不打伞我们会生病（生病是一种异常），这个异常发生的概率较高，所以出门带一把伞，“拿一把伞”就是对“生病异常”发生之前的处理方式。</li>
<li>运行时异常举个例子：如走在大街上被天上飞机砸到，出门没必要先处理这种发生概率比较低的异常。</li>
</ul>
<h3 id="【4】异常处理的方式："><a href="#【4】异常处理的方式：" class="headerlink" title="【4】异常处理的方式："></a>【4】异常处理的方式：</h3><ol>
<li>第一种：在方法声明的位置上，使用throws关键字，抛给上一级。（相当于推卸责任）</li>
<li>第二种：使用try…catch语句进行异常的捕捉。（相当于把异常真正地解决了）</li>
</ol>
<h3 id="【5】异常处理的代码分析："><a href="#【5】异常处理的代码分析：" class="headerlink" title="【5】异常处理的代码分析："></a>【5】异常处理的代码分析：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//一般不建议在main方法上抛出异常，因为如果异常发生了，一定会抛给JVM，JVM只有终止，一般建议main中使用try...catch进行捕捉</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1(); <span class="comment">//此处代码异常，直接进入catch语句，不进行下一句</span></span><br><span class="line">            System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123; <span class="comment">//e中保存的内存地址是那个new出来的异常对象的内存地址</span></span><br><span class="line">			System.out.println(<span class="string">"出现异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; <span class="comment">//可以抛出父类Exception</span></span><br><span class="line">        m2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException,ClassCastException </span>&#123; <span class="comment">//可以抛出多个异常</span></span><br><span class="line">        m3();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> FileInputStream(<span class="string">"F:\javase\haha.txt"</span>); <span class="comment">//这个对象源代码自带FileNotFoundException异常，不管路径是否存在都会抛出异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：catch可以写多个，建议catch的时候<strong>精确到一个一个处理</strong>，有利于程序的调试，尽量不要用catch(Exception e)。</li>
<li>catch写多个的时候，从上到下，必须遵守从小到大的原则。</li>
</ul>
<h3 id="【6】java8新特性：可以用“或”的形式catch异常："><a href="#【6】java8新特性：可以用“或”的形式catch异常：" class="headerlink" title="【6】java8新特性：可以用“或”的形式catch异常："></a>【6】java8新特性：可以用“或”的形式catch异常：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">//执行代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(FileNotFoundException | ArithmeticException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"文件不存在?数字异常？"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【7】处理编译时异常使用编译上报还是捕捉？"><a href="#【7】处理编译时异常使用编译上报还是捕捉？" class="headerlink" title="【7】处理编译时异常使用编译上报还是捕捉？"></a>【7】处理编译时异常使用编译上报还是捕捉？</h3><ul>
<li>只有希望异常被上级知道的情况下上报，其余都捕捉。</li>
</ul>
<h3 id="【8】怎么看异常追踪信息？"><a href="#【8】怎么看异常追踪信息？" class="headerlink" title="【8】怎么看异常追踪信息？"></a>【8】怎么看异常追踪信息？</h3><ul>
<li><strong>从上往下看，第一个自己写的哪一行是错误的根源</strong>。后面的错误都是源于第一个自己写的代码。SUN公司的代码异常不用看，因为SUN写的都是对的。</li>
</ul>
<h2 id="III-异常常用方法"><a href="#III-异常常用方法" class="headerlink" title="III. 异常常用方法"></a>III. 异常常用方法</h2><h3 id="【1】getMesage-方法："><a href="#【1】getMesage-方法：" class="headerlink" title="【1】getMesage()方法："></a>【1】getMesage()方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NullPointerException e = <span class="keyword">new</span> NullPointerException(<span class="string">"空指针异常"</span>)；</span><br><span class="line">String msg = e.getMessage();</span><br><span class="line">System.out.println(msg); <span class="comment">//空指针异常</span></span><br></pre></td></tr></table></figure>

<h3 id="【2】printStackTrace-方法："><a href="#【2】printStackTrace-方法：" class="headerlink" title="【2】printStackTrace()方法："></a>【2】printStackTrace()方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印异常堆栈信息</span></span><br><span class="line"><span class="comment">//java后台打印异常堆栈最终信息的时候采用了异步线程的方式打印的</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">//java.lang.NullPointException:空指针异常 at com.bjpowernode.javase.exception.ExceptionTest.main(ExceptionTest.main(ExceptionTest.java:15))</span></span><br></pre></td></tr></table></figure>

<h2 id="IV-有关finally知识点"><a href="#IV-有关finally知识点" class="headerlink" title="IV. 有关finally知识点"></a>IV. 有关finally知识点</h2><h3 id="【1】能使用try…finally…中间没有catch吗？"><a href="#【1】能使用try…finally…中间没有catch吗？" class="headerlink" title="【1】能使用try…finally…中间没有catch吗？"></a>【1】能使用try…finally…中间没有catch吗？</h3><ul>
<li>可以，但是try不能单独使用。</li>
</ul>
<h3 id="【2】try中有return执行顺序："><a href="#【2】try中有return执行顺序：" class="headerlink" title="【2】try中有return执行顺序："></a>【2】try中有return执行顺序：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先执行try.....再执行finally.....最后执行return</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"try....."</span>)；</span><br><span class="line">        <span class="keyword">return</span>；</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"finally....."</span>);</span><br><span class="line">&#125; <span class="comment">//try..... finally.....</span></span><br></pre></td></tr></table></figure>

<h3 id="【3】退出JVM，finally不执行："><a href="#【3】退出JVM，finally不执行：" class="headerlink" title="【3】退出JVM，finally不执行："></a>【3】退出JVM，finally不执行：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"try..."</span>);</span><br><span class="line">    System.exit(<span class="number">0</span>); <span class="comment">//退出Jvm</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"finally..."</span>);</span><br><span class="line">&#125; <span class="comment">// try...</span></span><br></pre></td></tr></table></figure>

<h3 id="【4】一道面试题，求result结果："><a href="#【4】一道面试题，求result结果：" class="headerlink" title="【4】一道面试题，求result结果："></a>【4】一道面试题，求result结果：</h3><ul>
<li>java中亘古不变的规则1：<strong>方法体中的代码必须自上而下顺序逐行执行</strong>。</li>
<li>java中亘古不变的规则2：<strong>return语句执行整个方法必须结束</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = m();</span><br><span class="line">        System.out.println(result); <span class="comment">//100</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//return语句必须保证是最后执行的，一旦执行，整个方法结束</span></span><br><span class="line">            <span class="keyword">return</span> i; <span class="comment">//这行代码在i=100;的下面，结果必须返回100</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上面程序m()反编译之后的结果（底层）：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>oo;</span><br><span class="line">    <span class="keyword">int</span> j = i; <span class="comment">//定义了一个临时变量j</span></span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">return</span> j; <span class="comment">//100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【5】final、finally、finalize-的区别："><a href="#【5】final、finally、finalize-的区别：" class="headerlink" title="【5】final、finally、finalize 的区别："></a>【5】final、finally、finalize 的区别：</h3><ul>
<li>final是<strong>关键字</strong>。表示最终的，不变的。</li>
<li>finally语句块中的代码一定会执行。</li>
<li>finalize() 是<strong>Object类中的一个方法</strong>。作为方法名出现。finalize是<strong>标志符</strong>。</li>
</ul>
<h2 id="V-自定义异常"><a href="#V-自定义异常" class="headerlink" title="V. 自定义异常"></a>V. 自定义异常</h2><ul>
<li><p>两步走：</p>
</li>
<li><ol>
<li>编写一个类继承Exception或者RuntimeException。</li>
<li>提供两个构造方法，一个没参数，一个有参数。</li>
</ol>
</li>
<li><p>举例：入栈操作：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略类中其他成员...........</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object obj)</span> throw MyStackOperationException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="keyword">this</span>.objs.length - <span class="number">1</span>)&#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">this</span>.objs[index] = obj;</span><br><span class="line">            System.out.println(<span class="string">"push success"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyStackOperaException(<span class="string">"压栈失败，栈已满！"</span>);<span class="comment">//手动抛异常</span></span><br><span class="line">            System.out.println(<span class="string">"push failed"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStackOperationException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStackOperationException</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStackOperationException</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS下使用docker创建tomcat容器并添加端口映射，访问时出现404的解决方案]]></title>
      <url>/2020/04/16/CentOS%E4%B8%8B%E4%BD%BF%E7%94%A8docker%E5%88%9B%E5%BB%BAtomcat%E5%AE%B9%E5%99%A8%E5%B9%B6%E6%B7%BB%E5%8A%A0%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%EF%BC%8C%E8%AE%BF%E9%97%AE%E6%97%B6%E5%87%BA%E7%8E%B0404%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<ul>
<li>分析：CentOS下使用docker创建tomcat容器并添加端口映射，访问时出现404，极大可能是tomcat版本过高，webapps下没有tomcat的首页的页面。</li>
</ul>
<a id="more"></a>

<ul>
<li><p>解决方法1：移除原tomcat镜像，下载一个低版本的tmocat，如8.0.35版，或更低。</p>
</li>
<li><p>解决方法2：移除webapps文件夹，并且把webapps.dist文件名字修改为webapps。</p>
</li>
<li><p>方法2的具体步骤：</p>
<ol>
<li>启动添加端口映射的容器：使用 <strong>docker ps -a</strong> 查看所有容器名单，再使用 <strong>docker start 容器的id</strong> 命令启动容器。</li>
</ol>
<img src="/2020/04/16/CentOS下使用docker创建tomcat容器并添加端口映射，访问时出现404的解决方案/1.png" title="docker1">

<ol start="2">
<li>使用 <strong>docker exec -it 容器id /bin/bash</strong> 命令进入容器内部。</li>
<li>使用 <strong>rmdir webapps</strong> 移除webapps文件。</li>
<li>使用 <strong>mv webapps.dist webapps</strong> 将webapps.dist文件重命名为webapps。</li>
<li>使用 <strong>exit</strong> 退出容器内部。</li>
</ol>
<img src="/2020/04/16/CentOS下使用docker创建tomcat容器并添加端口映射，访问时出现404的解决方案/2.png" title="docker2">

<ol start="6">
<li>测试：使用 <strong>ip地址:端口号</strong> 在浏览器内进行测试，如输入<a href="http://192.168.3.11:8888/" target="_blank" rel="noopener">http://192.168.3.11:8888/</a> ,若出现tomcat首页，则成功解决。</li>
</ol>
<img src="/2020/04/16/CentOS下使用docker创建tomcat容器并添加端口映射，访问时出现404的解决方案/3.png" title="docker3"></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> debug </tag>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VMware中CentOS7.0桥接网络配置流程]]></title>
      <url>/2020/04/14/VMware%E4%B8%ADCentOS7-0%E6%A1%A5%E6%8E%A5%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="一、桥接模式概述"><a href="#一、桥接模式概述" class="headerlink" title="一、桥接模式概述"></a>一、桥接模式概述</h3><p>什么是桥接模式？桥接模式就是将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致。其网络结构如下图所示：</p>
<a id="more"></a>

<img src="/2020/04/14/VMware中CentOS7-0桥接网络配置流程/1.png" title="Bridged">

<p>了解完成后，就开始配置吧：</p>
<h3 id="二、查看本机的ip地址、网关、DNS等信息"><a href="#二、查看本机的ip地址、网关、DNS等信息" class="headerlink" title="二、查看本机的ip地址、网关、DNS等信息"></a>二、查看本机的ip地址、网关、DNS等信息</h3><ul>
<li>win10系统以此进入<strong>控制面板\所有控制面板项\网络和共享中心</strong>，点击已连接的网络，在新窗口下点击详细信息，即可查看本机的ip地址、网关、DNS等信息。</li>
<li>或者也可以在cmd命令行下输入ipconfig进行查看。</li>
</ul>
<img src="/2020/04/14/VMware中CentOS7-0桥接网络配置流程/2.png" title="ipconfig">

<h3 id="三、CentOS系统下配置网络相关信息"><a href="#三、CentOS系统下配置网络相关信息" class="headerlink" title="三、CentOS系统下配置网络相关信息"></a>三、CentOS系统下配置网络相关信息</h3><ul>
<li>进入系统编辑网卡配置文件，进入地址/etc/sysconfig/network-scripts。</li>
<li>使用vi ifcfg-ens33，配置ifcfg-ens33文件（不同的虚拟机此配置文件的名称不同）</li>
</ul>
<img src="/2020/04/14/VMware中CentOS7-0桥接网络配置流程/3.png" title="ipvi">

<ul>
<li>进入配置文件后，键入 i 键进行编辑，配置好后按Esc再键入”:wq!”保存退出，配置信息如下图红框：</li>
</ul>
<img src="/2020/04/14/VMware中CentOS7-0桥接网络配置流程/4.png" title="ipconfig2">

<ul>
<li>说明：<ul>
<li>IPADDR表示虚拟机的ip地址，网段和主机一样（即最后一个数字与主机不同）</li>
<li>NETMASK表示子网掩码。</li>
<li>GATEWAY表示虚拟网关，和主机相同。</li>
<li>DNS1表示虚拟机的DNS，和主机相同。</li>
<li>注意：要将ONBOOT设置为yes，不然不能激活网卡无法连网。</li>
</ul>
</li>
</ul>
<h3 id="四、测试外网连接状况"><a href="#四、测试外网连接状况" class="headerlink" title="四、测试外网连接状况"></a>四、测试外网连接状况</h3><ul>
<li>输入红框中的代码，用来进行重启虚拟机网卡，然后ping一下百度，若是有进行数据传输，则说明外网连接成功。</li>
</ul>
<img src="/2020/04/14/VMware中CentOS7-0桥接网络配置流程/5.png" title="ipcgtest2">

<h3 id="五、测试内网连接状况"><a href="#五、测试内网连接状况" class="headerlink" title="五、测试内网连接状况"></a>五、测试内网连接状况</h3><ul>
<li>可以使用Xshell工具对虚拟机进行连接，若出现如下Connection established表示连接成功！</li>
</ul>
<img src="/2020/04/14/VMware中CentOS7-0桥接网络配置流程/6.png" title="ipcgtest3">

]]></content>
      
        
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springboot项目测试时出现resolving maven dependencies...下载缓慢的现象]]></title>
      <url>/2020/04/02/springboot%E9%A1%B9%E7%9B%AE%E6%B5%8B%E8%AF%95%E6%97%B6%E5%87%BA%E7%8E%B0resolving-maven-dependencies-%E4%B8%8B%E8%BD%BD%E7%BC%93%E6%85%A2%E7%9A%84%E7%8E%B0%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>今天用idea在学习springboot日志的时候使用测试类测试日志的输出：</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot03LoggingApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录器</span></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//日志的级别：由低到高</span></span><br><span class="line">        logger.trace(<span class="string">"这是trace日志..."</span>);</span><br><span class="line">        logger.debug(<span class="string">"这是debug日志..."</span>);</span><br><span class="line">        logger.info(<span class="string">"这是info日志..."</span>);</span><br><span class="line">        logger.warn(<span class="string">"这是warn日志..."</span>);</span><br><span class="line">        logger.error(<span class="string">"这是error日志..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果卡死在maven下载相关资源时候的状态，类似下图：</p>
<img src="/2020/04/02/springboot项目测试时出现resolving-maven-dependencies-下载缓慢的现象/1.png" title="idealoading">

<p>当时用的版本是：</p>
<ul>
<li><p>idea_2019.3.4</p>
</li>
<li><p>maven_1.5.9</p>
</li>
</ul>
<p>经过网上查询，可能是资源直接从国外下载，导致缓慢，因此在maven的settings.xml中导入了阿里云镜像：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里云仓库 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 中央仓库1 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 中央仓库2 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并且将idea之中的<strong>settings- &gt; … -&gt; maven -&gt; import 中的VM options for importer</strong>项参数改为：</p>
<ul>
<li>-Xms1024m -Xmx2048m</li>
</ul>
<p>下载速度有所改观，但是还是卡在了相关资某一项的下载。</p>
<p>于是我了解到可能是maven版本过低的问题，因此我从网上下载了<strong>apache-maven-3.6.3</strong>版本的maven，</p>
<p>重新修改了环境变量：</p>
<ul>
<li>MAVEN_HOME</li>
<li>F:\java-SpringBoot\apache-maven-3.6.3</li>
</ul>
<p>接着重新修改了新maven中的settings.xml：</p>
<ul>
<li>修改默认的jdk1.4版本到我的jdk1.8版本：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line"> 	 <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line"> 	 <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>添加上述的阿里云仓库</li>
</ul>
<p>然后在idea环境中配置了新的maven的文件夹、settings.xml、repository所在地址，</p>
<p>最后运行测试类，发现成功输出了日志：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">04</span>-<span class="number">02</span> <span class="number">18</span>:<span class="number">24</span>:<span class="number">21.422</span> TRACE <span class="number">13100</span> --- [           main] .a.s.SpringBoot03LoggingApplicationTests : 这是trace日志...</span><br><span class="line"><span class="number">2020</span>-<span class="number">04</span>-<span class="number">02</span> <span class="number">18</span>:<span class="number">24</span>:<span class="number">21.422</span> DEBUG <span class="number">13100</span> --- [           main] .a.s.SpringBoot03LoggingApplicationTests : 这是debug日志...</span><br><span class="line"><span class="number">2020</span>-<span class="number">04</span>-<span class="number">02</span> <span class="number">18</span>:<span class="number">24</span>:<span class="number">21.422</span>  INFO <span class="number">13100</span> --- [           main] .a.s.SpringBoot03LoggingApplicationTests : 这是info日志...</span><br><span class="line"><span class="number">2020</span>-<span class="number">04</span>-<span class="number">02</span> <span class="number">18</span>:<span class="number">24</span>:<span class="number">21.422</span>  WARN <span class="number">13100</span> --- [           main] .a.s.SpringBoot03LoggingApplicationTests : 这是warn日志...</span><br><span class="line"><span class="number">2020</span>-<span class="number">04</span>-<span class="number">02</span> <span class="number">18</span>:<span class="number">24</span>:<span class="number">21.422</span> ERROR <span class="number">13100</span> --- [           main] .a.s.SpringBoot03LoggingApplicationTests : 这是error日志...</span><br></pre></td></tr></table></figure>

<ul>
<li>总结：主要原因是maven版本太老，换到新的版本即可；同时增加阿里云镜像以及修改VM options for importer参数都可加快下载速度。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> debug </tag>
            
            <tag> springboot </tag>
            
            <tag> maven </tag>
            
            <tag> idea </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java面试必备知识点01]]></title>
      <url>/2020/03/20/Java%E9%9D%A2%E8%AF%95%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86%E7%82%B901/</url>
      <content type="html"><![CDATA[<h2 id="1-变量自增"><a href="#1-变量自增" class="headerlink" title="[1]变量自增"></a>[1]变量自增</h2><ul>
<li>问：求以下代码的输出结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">		i = i++;</span><br><span class="line">		<span class="keyword">int</span> j = i++;</span><br><span class="line">		<span class="keyword">int</span> k = i + ++i * i++;</span><br><span class="line">		System.out.println(<span class="string">"i="</span> + i);</span><br><span class="line">		System.out.println(<span class="string">"j="</span> + j);</span><br><span class="line">		System.out.println(<span class="string">"k="</span> + k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>
<ul>
<li>答案：i=4; j=1; k=11;</li>
<li>解题思路：<img src="/2020/03/20/Java面试必备知识点01/1.jpg" title="java1"></li>
<li>小结：</li>
</ul>
<ol>
<li>赋值=，最后计算</li>
<li>=右边的从左到右加载值依次压入操作数栈</li>
<li>实际先算哪个，看运算符优先级</li>
<li>自增、自减操作都是直接修改变量的值，不经过操作数栈</li>
<li>最后的赋值之前，临时结果也是存储在操作数栈中</li>
</ol>
<h2 id="2-单例设计模式"><a href="#2-单例设计模式" class="headerlink" title="[2]单例设计模式"></a>[2]单例设计模式</h2><ul>
<li>编程题：写一个Singleton示例。</li>
<li>解题思路：</li>
</ul>
<ol>
<li>单例设计模式，即某个类在整个系统中只能有一个实例对象可被获取和使用的代码模式。</li>
<li>某个类只能有一个实例：构造器私有化。</li>
<li>它必须自行创建这个实例；含有一个该类的静态变量来保存这个唯一的实例。</li>
<li>它必须自行向整个系统提供这个实例。对外提供获取该实例对象的方式：（1）直接暴露（2）用静态变量的get方法获取。</li>
<li>类型：</li>
</ol>
<p><strong>一、饿汉式：直接创建对象，不存在线程安全问题:</strong><br>(1)直接实例化饿汉式（简洁直观）<br>(2)枚举式（最简洁）<br>(3)静态代码块饿汉式（适合复杂实例化）<br><strong>二、懒汉式：延迟创建对象:</strong><br>(1)线程不安全（适用于单线程）<br>(2)线程安全（适用于多线程）<br>(3)静态内部类形式（适用于多线程）</p>
<ul>
<li>答案：<br>(1)饿汉式：直接实例化：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 饿汉式：</span></span><br><span class="line"><span class="comment"> * 	在类初始化时直接创建实例对象，不管你是否需要这个对象都会创建</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * （1）private构造器私有化：无法在自身之外的任何类访问它</span></span><br><span class="line"><span class="comment"> * （2）自行创建，并且用静态变量static保存——只初始化一次</span></span><br><span class="line"><span class="comment"> * （3）public向外提供这个实例</span></span><br><span class="line"><span class="comment"> * （4）强调这是一个单例，我们可以用final修改--常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 INSTANCE = <span class="keyword">new</span> Singleton1();</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>(2)饿汉式：枚举式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 枚举类型：表示该类型的对象是有限的几个</span></span><br><span class="line"><span class="comment"> * 我们可以限定为一个，就成了单例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton2 &#123;</span><br><span class="line">	INSTANCE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(3)饿汉式：静态代码块：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton3 INSTANCE;</span><br><span class="line">	<span class="keyword">private</span> String info;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span>&#123;<span class="comment">//创建实例对象</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">			pro.load(Singleton3.class.getClassLoader().getResourceAsStream(<span class="string">"single.properties"</span>));</span><br><span class="line">			INSTANCE = <span class="keyword">new</span> Singleton3(pro.getProperty(<span class="string">"info"</span>));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">(String info)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.info = info;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> info;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.info = info;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Singleton3 [info="</span> + info + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(4)懒汉式：线程不安全(适用于单线程)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 懒汉式：</span></span><br><span class="line"><span class="comment"> * 	延迟创建这个实例对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * (1)构造器私有化</span></span><br><span class="line"><span class="comment"> * (2)用一个静态变量保存这个唯一的实例</span></span><br><span class="line"><span class="comment"> * (3)提供一个静态方法，获取这个实例对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton4 instance;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;<span class="comment">//若两个线程同时进来的话，有可能两者instance都为null，满足if语句，继而产生两个实例对象</span></span><br><span class="line">			</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">100</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			instance = <span class="keyword">new</span> Singleton4();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(5)懒汉式：线程安全（适用于多线程）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 懒汉式：</span></span><br><span class="line"><span class="comment"> * 	延迟创建这个实例对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * (1)构造器私有化</span></span><br><span class="line"><span class="comment"> * (2)用一个静态变量保存这个唯一的实例</span></span><br><span class="line"><span class="comment"> * (3)提供一个静态方法，获取这个实例对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton5</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton5 instance;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton5</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;<span class="comment">//除了第一次外，不需要每次都执行下列代码</span></span><br><span class="line">			<span class="keyword">synchronized</span> (Singleton5.class) &#123;<span class="comment">//线程加锁</span></span><br><span class="line">				<span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">					instance = <span class="keyword">new</span> Singleton5();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(6)懒汉式：静态内部类形式（适用于多线程）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在内部类被加载和初始化时，才创建INSTANCE实例对象</span></span><br><span class="line"><span class="comment"> * 静态内部类不会自动随着外部类的加载和初始化而初始化，它是要单独去加载和初始化的。</span></span><br><span class="line"><span class="comment"> * 因为是在内部类加载和初始化时，创建的，因此是线程安全的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton6</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton6 INSTANCE = <span class="keyword">new</span> Singleton6();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Inner.INSTANCE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-初始化问题"><a href="#3-初始化问题" class="headerlink" title="[3]初始化问题"></a>[3]初始化问题</h2><ul>
<li>问：以下代码的结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 父类的初始化&lt;clinit&gt;：</span></span><br><span class="line"><span class="comment"> * （1）j = method();</span></span><br><span class="line"><span class="comment"> * （2）父类的静态代码块</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  父类的实例化方法：</span></span><br><span class="line"><span class="comment"> * （1）super()（最前）</span></span><br><span class="line"><span class="comment"> * （2）i = test();</span></span><br><span class="line"><span class="comment"> * （3）父类的非静态代码块</span></span><br><span class="line"><span class="comment"> * （4）父类的无参构造（最后）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 非静态方法前面其实有一个默认的对象this</span></span><br><span class="line"><span class="comment"> * this在构造器（或&lt;init&gt;）它表示的是正在创建的对象，因为这里是在创建Son对象，所以</span></span><br><span class="line"><span class="comment"> * test()执行的是子类重写的代码（面向对象多态）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 这里i=test()执行的是子类重写的test()方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> i = test();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> j = method();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"(1)"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	Father()&#123;</span><br><span class="line">		System.out.print(<span class="string">"(2)"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.print(<span class="string">"(3)"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"(4)"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"(5)"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 子类的初始化&lt;clinit&gt;：</span></span><br><span class="line"><span class="comment"> * （1）j = method();</span></span><br><span class="line"><span class="comment"> * （2）子类的静态代码块</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 先初始化父类：(5)(1)</span></span><br><span class="line"><span class="comment"> * 初始化子类：（10）(6)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 子类的实例化方法&lt;init&gt;：</span></span><br><span class="line"><span class="comment"> * （1）super()（最前）      （9）（3）（2）</span></span><br><span class="line"><span class="comment"> * （2）i = test();    （9）</span></span><br><span class="line"><span class="comment"> * （3）子类的非静态代码块    （8）</span></span><br><span class="line"><span class="comment"> * （4）子类的无参构造（最后） （7）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 因为创建了两个Son对象，因此实例化方法&lt;init&gt;执行两次</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * （9）（3）（2）（9）（8）（7）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> i = test();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> j = method();</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"(6)"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	Son()&#123;</span><br><span class="line"><span class="comment">//		super();//写或不写都在，在子类构造器中一定会调用父类的构造器</span></span><br><span class="line">		System.out.print(<span class="string">"(7)"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.print(<span class="string">"(8)"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"(9)"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"(10)"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Son s1 = <span class="keyword">new</span> Son();</span><br><span class="line">		System.out.println();</span><br><span class="line">		Son s2 = <span class="keyword">new</span> Son();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>答：<br>（5）（1）（10）（6）（9）（3）（2）（9）（8）（7）<br>（9）（3）（2）（9）（8）（7）</li>
<li><strong>类初始化过程</strong>：</li>
</ul>
<ol>
<li>一个类要创建实例需要先加载并初始化该类：main方法所在的类需要先加载和初始化</li>
<li>一个子类要初始化需要先初始化父类</li>
<li>一个类初始化就是执行&lt;clinit&gt;()方法：<br>（1）&lt;clinit&gt;()方法由静态类变量显示赋值代码和静态代码块组成<br>（2）类变量显示赋值代码和静态代码块代码从上到下顺序执行<br>（3）&lt;clinit&gt;()方法只执行一次</li>
</ol>
<ul>
<li><strong>实例初始化过程</strong>：</li>
</ul>
<ol>
<li>实例初始化就是执行&lt;init&gt;()方法<br>(1)&lt;init&gt;()方法可能重载有多个，有几个构造器就有几个&lt;init&gt;方法<br>(2)&lt;init&gt;()方法由非静态实例变量显示赋值代码和非静态代码块、对应构造器代码组成<br>(3)非静态实例变量显示赋值代码和非静态代码块代码从上到下顺序执行，而对应构造器的代码最后执行<br>(4)每次创建实例对象，调用对应构造器，执行的就是对应的&lt;init&gt;方法<br>(5)&lt;init&gt;方法的首行是super()或super(实参列表)，即对应父类的&lt;init&gt;方法</li>
</ol>
<ul>
<li><strong>哪些方法不可以被重写</strong>:</li>
</ul>
<ol>
<li>final方法</li>
<li>静态方法</li>
<li>private等子类中不可见方法</li>
</ol>
<ul>
<li><strong>对象的多态性</strong>:<br>(1)子类如果重写了父类的方法，通过子类对象调用的一定是子类重写过的代码<br>(2)非静态方法默认的调用对象是this<br>(3)this对象在构造器或者说<init>方法中就是正在创建的对象</init></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[尚硅谷:SpringBoot学习笔记]]></title>
      <url>/2020/03/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="一、Spring-Boot-入门"><a href="#一、Spring-Boot-入门" class="headerlink" title="一、Spring Boot 入门"></a><strong>一、</strong>Spring Boot 入门</h1><h2 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h2><blockquote>
<p>简化Spring应用开发的一个框架；</p>
<p>整个Spring技术栈的一个大整合；</p>
<p>J2EE开发的一站式解决方案；</p>
</blockquote>
<a id="more"></a>

<h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，martin fowler</p>
<p>微服务：架构风格（服务微化）</p>
<p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p>
<p>单体应用：ALL IN ONE</p>
<p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>
<p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa" target="_blank" rel="noopener">详细参照微服务文档</a></p>
<h2 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h2><p><a href="http://www.gulixueyuan.com/" target="_blank" rel="noopener">http://www.gulixueyuan.com/</a> 谷粒学院</p>
<p>环境约束</p>
<p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p>
<p>–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p>
<p>–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p>
<p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p>
<p>统一环境；</p>
<h3 id="1、MAVEN设置；"><a href="#1、MAVEN设置；" class="headerlink" title="1、MAVEN设置；"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p>整合maven进来；</p>
<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180129151045.png" title="hexo5">

<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180129151112.png" title="hexo5">

<h2 id="4、Spring-Boot-HelloWorld"><a href="#4、Spring-Boot-HelloWorld" class="headerlink" title="4、Spring Boot HelloWorld"></a>4、Spring Boot HelloWorld</h2><p>一个功能：</p>
<p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p>
<h3 id="1、创建一个maven工程；（jar）"><a href="#1、创建一个maven工程；（jar）" class="headerlink" title="1、创建一个maven工程；（jar）"></a>1、创建一个maven工程；（jar）</h3><h3 id="2、导入spring-boot相关的依赖"><a href="#2、导入spring-boot相关的依赖" class="headerlink" title="2、导入spring boot相关的依赖"></a>2、导入spring boot相关的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、编写一个主程序；启动Spring-Boot应用"><a href="#3、编写一个主程序；启动Spring-Boot应用" class="headerlink" title="3、编写一个主程序；启动Spring Boot应用"></a>3、编写一个主程序；启动Spring Boot应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p>
<h2 id="5、Hello-World探究"><a href="#5、Hello-World探究" class="headerlink" title="5、Hello World探究"></a>5、Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目是</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">他来真正管理Spring Boot应用里面的所有依赖版本；</span><br></pre></td></tr></table></figure>

<p>Spring Boot的版本仲裁中心；</p>
<p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p>
<h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>spring-boot-starter</strong>-==web==：</p>
<pre><code>spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</code></pre><p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p>
<h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure>

<p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p>
<pre><code>标注在某个类上，表示这是一个Spring Boot的配置类；

@**Configuration**:配置类上来标注这个注解；

    配置类 -----  配置文件；配置类也是容器中的一个组件；@Component</code></pre><p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p>
<pre><code>以前我们需要配置的东西，Spring Boot帮我们自动配置；@**EnableAutoConfiguration**告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure>

<pre><code>  @**AutoConfigurationPackage**：自动配置包

@**Import**(AutoConfigurationPackages.Registrar.class)：

Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</code></pre><p>==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p>
<pre><code>@**Import**(EnableAutoConfigurationImportSelector.class)；

    给容器中导入组件？

    **EnableAutoConfigurationImportSelector**：导入哪些组件的选择器；

    将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；

    会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        ![自动配置类](images/搜狗截图20180129224104.png)</code></pre><p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p>
<pre><code>SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</code></pre><p>==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；</p>
<p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p>
<p>​        </p>
<p>==Spring注解版（谷粒学院）==</p>
<h2 id="6、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#6、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="6、使用Spring Initializer快速创建Spring Boot项目"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><h3 id="1、IDEA：使用-Spring-Initializer快速创建项目"><a href="#1、IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="1、IDEA：使用 Spring Initializer快速创建项目"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p>
<p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p>
<p>默认生成的Spring Boot项目；</p>
<ul>
<li>主程序已经生成好了，我们只需要我们自己的逻辑</li>
<li>resources文件夹中目录结构<ul>
<li>static：保存所有的静态资源； js css  images；</li>
<li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li>
<li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li>
</ul>
</li>
</ul>
<h3 id="2、STS使用-Spring-Starter-Project快速创建项目"><a href="#2、STS使用-Spring-Starter-Project快速创建项目" class="headerlink" title="2、STS使用 Spring Starter Project快速创建项目"></a>2、STS使用 Spring Starter Project快速创建项目</h3><hr>
<h1 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p>
<p>•application.properties</p>
<p>•application.yml</p>
<p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p>
<p>YAML（YAML Ain’t Markup Language）</p>
<pre><code>YAML  A Markup Language：是一个标记语言

YAML   isn&apos;t Markup Language：不是一个标记语言；</code></pre><p>标记语言：</p>
<pre><code>以前的配置文件；大多都使用的是  **xxxx.xml**文件；

YAML：**以数据为中心**，比json、xml等更适合做配置文件；

YAML：配置例子</code></pre><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<pre><code>XML：</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、YAML语法："><a href="#2、YAML语法：" class="headerlink" title="2、YAML语法："></a>2、YAML语法：</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p>
<p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure>

<p>属性和值也是大小写敏感；</p>
<h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><pre><code>k: v：字面直接来写；

    字符串默认不用加上单引号或者双引号；

    &quot;&quot;：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思

            name:   &quot;zhangsan \n lisi&quot;：输出；zhangsan 换行  lisi

    &apos;&apos;：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据

            name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</code></pre><h4 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h4><pre><code>k: v：在下一行来写对象的属性和值的关系；注意缩进

    对象还是k: v的方式</code></pre><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">		<span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">		<span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure>

<h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><p>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">    lastName:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">    boss:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line"><span class="attr">    maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="number">12</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">    lists:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">lisi</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">zhaoliu</span></span><br><span class="line"><span class="attr">    dog:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">小狗</span></span><br><span class="line"><span class="attr">      age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>javaBean：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<p>我们可以导入配置文件处理器，以后编写配置就有提示了</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p>调整</p>
<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180130161620.png" title="hexo5">

<h4 id="2、-Value获取值和-ConfigurationProperties获取值比较"><a href="#2、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2、@Value获取值和@ConfigurationProperties获取值比较"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定（松散语法）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p>配置文件yml还是properties他们都能获取到值；</p>
<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p>
<p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p>
<h4 id="3、配置文件注入值数据校验"><a href="#3、配置文件注入值数据校验" class="headerlink" title="3、配置文件注入值数据校验"></a>3、配置文件注入值数据校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<h4 id="4、-PropertySource-amp-ImportResource-amp-Bean"><a href="#4、-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="4、@PropertySource&amp;@ImportResource&amp;@Bean"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ConfigurationProperties</span>(prefix = "person")默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br></pre></td></tr></table></figure>

<p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p>
<p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p>
<p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br><span class="line">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure>

<p>不来编写Spring的配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.springboot.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p>
<p>1、配置类<strong>@Configuration</strong>——&gt;Spring配置文件</p>
<p>2、使用<strong>@Bean</strong>给容器中添加组件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类@Bean给容器中添加组件了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##4、配置文件占位符</p>
<h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person.last-name=张三$&#123;random.uuid&#125;</span><br><span class="line">person.age=$&#123;random.int&#125;</span><br><span class="line">person.birth=2017/12/15</span><br><span class="line">person.boss=false</span><br><span class="line">person.maps.k1=v1</span><br><span class="line">person.maps.k2=14</span><br><span class="line">person.lists=a,b,c</span><br><span class="line">person.dog.name=$&#123;person.hello:hello&#125;_dog</span><br><span class="line">person.dog.age=15</span><br></pre></td></tr></table></figure>

<h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p>
<p>默认使用application.properties的配置；</p>
<h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure>

<h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><pre><code>1、在配置文件中指定  spring.profiles.active=dev

2、命令行：

    java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev；

    可以直接在测试的时候，配置传入命令行参数

3、虚拟机参数；

    -Dspring.profiles.active=dev</code></pre><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>
<p>–file:./config/</p>
<p>–file:./</p>
<p>–classpath:/config/</p>
<p>–classpath:/</p>
<p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p>
<p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p>
<p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p>
<p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p>
<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p>
<h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p>
<p><strong>1.命令行参数</strong></p>
<p>所有的配置都可以在命令行上进行指定</p>
<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p>
<p>多个配置用空格分开； –配置项=值</p>
<p>2.来自java:comp/env的JNDI属性</p>
<p>3.Java系统属性（System.getProperties()）</p>
<p>4.操作系统环境变量</p>
<p>5.RandomValuePropertySource配置的random.*属性值</p>
<p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p>
<p>==<strong>优先加载带profile</strong>==</p>
<p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
<p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
<p>==<strong>再来加载不带profile</strong>==</p>
<p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
<p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
<p>10.@Configuration注解类上的@PropertySource</p>
<p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p>
<p>所有支持的配置加载来源；</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p>
<h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">配置文件能配置的属性参照</a></p>
<h3 id="1、自动配置原理："><a href="#1、自动配置原理：" class="headerlink" title="1、自动配置原理："></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p>
<p><strong>2）、@EnableAutoConfiguration 作用：</strong></p>
<ul>
<li>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</li>
</ul>
<ul>
<li><p>可以查看selectImports()方法的内容；</p>
</li>
<li><p>List<string> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</string></p>
<ul>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpringFactoriesLoader.loadFactoryNames()</span><br><span class="line">扫描所有jar包类路径下  META-INF/spring.factories</span><br><span class="line">把扫描到的这些文件的内容包装成properties对象</span><br><span class="line">从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<p><strong>==将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；==</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure>

<p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p>
<p>3）、每一个自动配置类进行自动配置功能；</p>
<p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpEncodingProperties.class)  <span class="comment">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter.class)  <span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)  <span class="comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class="line"><span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span>(CharacterEncodingFilter.class) <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">		filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">		filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">		filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">		<span class="keyword">return</span> filter;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>根据当前不同的条件判断，决定这个配置类是否生效？</p>
<p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p>
<p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.http.encoding"</span>)  <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure>

<p><strong>精髓：</strong></p>
<pre><code>**1）、SpringBoot启动会加载大量的自动配置类**

**2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；**

**3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）**

**4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；**</code></pre><p>xxxxAutoConfigurartion：自动配置类；</p>
<p>给容器中添加组件</p>
<p>xxxxProperties:封装配置文件中相关属性；</p>
<h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>
<table>
<thead>
<tr>
<th>@Conditional扩展注解</th>
<th>作用（判断是否满足当前指定条件）</th>
</tr>
</thead>
<tbody><tr>
<td>@ConditionalOnJava</td>
<td>系统的java版本是否符合要求</td>
</tr>
<tr>
<td>@ConditionalOnBean</td>
<td>容器中存在指定Bean；</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定Bean；</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEL表达式指定</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中指定的属性是否有指定的值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
</tbody></table>
<p><strong>自动配置类必须在一定的条件下才能生效；</strong></p>
<p>我们怎么知道哪些自动配置类生效；</p>
<p><strong>==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==</strong>，这样我们就可以很方便的知道哪些自动配置类生效；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO-CONFIGURATION REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:（自动配置类启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnClass</span> found required <span class="class"><span class="keyword">class</span> '<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>'</span>; <span class="meta">@ConditionalOnMissingClass</span> <span class="function">did not find unwanted <span class="title">class</span> <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function">      - @<span class="title">ConditionalOnWebApplication</span> <span class="params">(required)</span> found <span class="title">StandardServletEnvironment</span> <span class="params">(OnWebApplicationCondition)</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Negative matches:（没有启动，没有匹配成功的自动配置类）</span></span><br><span class="line"><span class="function">-----------------</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   ActiveMQAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   AopAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice' <span class="params">(OnClassCondition)</span></span></span><br></pre></td></tr></table></figure>

<h1 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p> 小张；开发一个大型系统；</p>
<pre><code>1、System.out.println(&quot;&quot;)；将关键数据打印在控制台；去掉？写在一个文件？

2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；

3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？

4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；

5、JDBC---数据库驱动；

    写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；

    给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；</code></pre><p><strong>市面上的日志框架；</strong></p>
<p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p>
<table>
<thead>
<tr>
<th>日志门面  （日志的抽象层）</th>
<th>日志实现</th>
</tr>
</thead>
<tbody><tr>
<td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td>
<td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td>
</tr>
</tbody></table>
<p>左边选一个门面（抽象层）、右边来选一个实现；</p>
<p>日志门面：  SLF4J；</p>
<p>日志实现：Logback；</p>
<p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p>
<pre><code>**==SpringBoot选用 SLF4j和logback；==**</code></pre><h2 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h2><h3 id="1、如何在系统中使用SLF4j-https-www-slf4j-org"><a href="#1、如何在系统中使用SLF4j-https-www-slf4j-org" class="headerlink" title="1、如何在系统中使用SLF4j   https://www.slf4j.org"></a>1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org" target="_blank" rel="noopener">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p>
<p>给系统里面导入slf4j的jar和  logback的实现jar</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图示；</p>
{%asset_img concrete-bindings.png hexo5%}

<p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p>
<h3 id="2、遗留问题"><a href="#2、遗留问题" class="headerlink" title="2、遗留问题"></a>2、遗留问题</h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p>
<p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p>
{%asset_img legacy.png hexo5%}

<p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p>
<p>==1、将系统中其他日志框架先排除出去；==</p>
<p>==2、用中间包来替换原有的日志框架；==</p>
<p>==3、我们导入slf4j其他的实现==</p>
<h2 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot使用它来做日志功能；</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>底层依赖关系</p>
{%asset_img 搜狗截图20180131220946.png hexo5%}

<p>总结：</p>
<pre><code>1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录

2）、SpringBoot也把其他的日志都替换成了slf4j；

3）、中间替换包？</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class="string">"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> LogFactory logFactory = <span class="keyword">new</span> SLF4JLogFactory();</span><br></pre></td></tr></table></figure>

<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180131221411.png" title="hexo5">



<pre><code>4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？

        Spring框架用的是commons-logging；</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==</strong></p>
<h2 id="4、日志使用；"><a href="#4、日志使用；" class="headerlink" title="4、日志使用；"></a>4、日志使用；</h2><h3 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//System.out.println();</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//日志的级别；</span></span><br><span class="line">	<span class="comment">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line">	<span class="comment">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span></span><br><span class="line">	logger.trace(<span class="string">"这是trace日志..."</span>);</span><br><span class="line">	logger.debug(<span class="string">"这是debug日志..."</span>);</span><br><span class="line">	<span class="comment">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span></span><br><span class="line">	logger.info(<span class="string">"这是info日志..."</span>);</span><br><span class="line">	logger.warn(<span class="string">"这是warn日志..."</span>);</span><br><span class="line">	logger.error(<span class="string">"这是error日志..."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>日志输出格式：
    %d表示日期时间，
    %thread表示线程名，
    %-5level：级别从左显示5个字符宽度
    %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 
    %msg：日志消息，
    %n是换行符
--&gt;
%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</code></pre><p>SpringBoot修改日志的默认配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">logging.level.com.atguigu=trace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#logging.path=</span><br><span class="line"># 不指定路径在当前项目下生成springboot.log日志</span><br><span class="line"># 可以指定完整的路径；</span><br><span class="line">#logging.file=G:/springboot.log</span><br><span class="line"></span><br><span class="line"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span><br><span class="line">logging.path=/spring/log</span><br><span class="line"></span><br><span class="line">#  在控制台输出的日志的格式</span><br><span class="line">logging.pattern.console=%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br><span class="line"># 指定文件中日志输出的格式</span><br><span class="line">logging.pattern.file=%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>logging.file</th>
<th>logging.path</th>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>(none)</td>
<td>(none)</td>
<td></td>
<td>只在控制台输出</td>
</tr>
<tr>
<td>指定文件名</td>
<td>(none)</td>
<td>my.log</td>
<td>输出日志到my.log文件</td>
</tr>
<tr>
<td>(none)</td>
<td>指定目录</td>
<td>/var/log</td>
<td>输出到指定目录的 spring.log 文件中</td>
</tr>
</tbody></table>
<h3 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody><tr>
<td>Logback</td>
<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td>
</tr>
<tr>
<td>Log4j2</td>
<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr>
<td>JDK (Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody></table>
<p>logback.xml：直接就被日志框架识别了；</p>
<p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">  	可以指定某段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">			%d表示日期时间，</span></span><br><span class="line"><span class="comment">			%thread表示线程名，</span></span><br><span class="line"><span class="comment">			%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">			%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="comment">			%msg：日志消息，</span></span><br><span class="line"><span class="comment">			%n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p>
<p> <code>no applicable action for [springProfile]</code></p>
<h2 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p>
<p>slf4j+log4j的方式；</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>切换为log4j2</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="四、Web开发"><a href="#四、Web开发" class="headerlink" title="四、Web开发"></a>四、Web开发</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>使用SpringBoot；</p>
<p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p>
<p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p>
<p><strong>3）、自己编写业务代码；</strong></p>
<p><strong>自动配置原理？</strong></p>
<p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxxxAutoConfiguration：帮我们给容器中自动配置组件；</span><br><span class="line">xxxxProperties:配置类来封装配置文件的内容；</span><br></pre></td></tr></table></figure>

<h2 id="2、SpringBoot对静态资源的映射规则；"><a href="#2、SpringBoot对静态资源的映射规则；" class="headerlink" title="2、SpringBoot对静态资源的映射规则；"></a>2、SpringBoot对静态资源的映射规则；</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.resources"</span>, ignoreUnknownFields = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line">  <span class="comment">//可以设置和静态资源有关的参数，缓存时间等</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">WebMvcAuotConfiguration：</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">			logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Integer cachePeriod = <span class="keyword">this</span>.resourceProperties.getCachePeriod();</span><br><span class="line">		<span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">			customizeResourceHandlerRegistration(</span><br><span class="line">					registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">							.addResourceLocations(</span><br><span class="line">									<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">					.setCachePeriod(cachePeriod));</span><br><span class="line">		&#125;</span><br><span class="line">		String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">         	<span class="comment">//静态资源文件夹映射</span></span><br><span class="line">		<span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">			customizeResourceHandlerRegistration(</span><br><span class="line">					registry.addResourceHandler(staticPathPattern)</span><br><span class="line">							.addResourceLocations(</span><br><span class="line">									<span class="keyword">this</span>.resourceProperties.getStaticLocations())</span><br><span class="line">					.setCachePeriod(cachePeriod));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//配置欢迎页映射</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),</span><br><span class="line">				<span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//配置喜欢的图标</span></span><br><span class="line">	<span class="meta">@Configuration</span></span><br><span class="line">	<span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.mvc.favicon.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FaviconConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">FaviconConfiguration</span><span class="params">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title">faviconHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			SimpleUrlHandlerMapping mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line">			mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="number">1</span>);</span><br><span class="line">             	<span class="comment">//所有  **/favicon.ico </span></span><br><span class="line">			mapping.setUrlMap(Collections.singletonMap(<span class="string">"**/favicon.ico"</span>,</span><br><span class="line">					faviconRequestHandler()));</span><br><span class="line">			<span class="keyword">return</span> mapping;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title">faviconRequestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			ResourceHttpRequestHandler requestHandler = <span class="keyword">new</span> ResourceHttpRequestHandler();</span><br><span class="line">			requestHandler</span><br><span class="line">					.setLocations(<span class="keyword">this</span>.resourceProperties.getFaviconLocations());</span><br><span class="line">			<span class="keyword">return</span> requestHandler;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==</p>
<pre><code>webjars：以jar包的方式引入静态资源；</code></pre><p><a href="http://www.webjars.org/" target="_blank" rel="noopener">http://www.webjars.org/</a></p>
{%asset_img 搜狗截图20180203181751.png hexo5%}

<p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jquery-webjar--&gt;</span>在访问的时候只需要写webjars下面资源的名称即可</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>==2）、”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;classpath:/META-INF/resources/&quot;, </span><br><span class="line">&quot;classpath:/resources/&quot;,</span><br><span class="line">&quot;classpath:/static/&quot;, </span><br><span class="line">&quot;classpath:/public/&quot; </span><br><span class="line">&quot;/&quot;：当前项目的根路径</span><br></pre></td></tr></table></figure>

<p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p>
<p>==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；==</p>
<pre><code>localhost:8080/   找index页面</code></pre><p>==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==</p>
<h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p>
<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/template-engine.png" title="hexo5">



<p>SpringBoot推荐的Thymeleaf；</p>
<p>语法更简单，功能更强大；</p>
<h3 id="1、引入thymeleaf；"><a href="#1、引入thymeleaf；" class="headerlink" title="1、引入thymeleaf；"></a>1、引入thymeleaf；</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          	2.1.6</span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">切换thymeleaf版本</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- thymeleaf2   layout1--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="string">"text/html"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">  	<span class="comment">//</span></span><br></pre></td></tr></table></figure>

<p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p>
<p>使用：</p>
<p>1、导入thymeleaf的名称空间</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、使用thymeleaf语法；</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>这是显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p>
<pre><code>th：任意html属性；来替换原生属性的值</code></pre>{%asset_img 2018-02-04_123955.png hexo5%}



<p>2）、表达式？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">Simple expressions:（表达式语法）</span><br><span class="line">    Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；</span><br><span class="line">    		1）、获取对象的属性、调用方法</span><br><span class="line">    		2）、使用内置的基本对象：</span><br><span class="line">    			#ctx : the context object.</span><br><span class="line">    			#vars: the context variables.</span><br><span class="line">                #locale : the context locale.</span><br><span class="line">                #request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">                #response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">                #session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">                #servletContext : (only in Web Contexts) the ServletContext object.</span><br><span class="line">                </span><br><span class="line">                $&#123;session.foo&#125;</span><br><span class="line">            3）、内置的一些工具对象：</span><br><span class="line">#execInfo : information about the template being processed.</span><br><span class="line">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.</span><br><span class="line">#uris : methods for escaping parts of URLs/URIs</span><br><span class="line">#conversions : methods for executing the configured conversion service (if any).</span><br><span class="line">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br><span class="line">#calendars : analogous to #dates , but for java.util.Calendar objects.</span><br><span class="line">#numbers : methods for formatting numeric objects.</span><br><span class="line">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><br><span class="line">#objects : methods for objects in general.</span><br><span class="line">#bools : methods for boolean evaluation.</span><br><span class="line">#arrays : methods for arrays.</span><br><span class="line">#lists : methods for lists.</span><br><span class="line">#sets : methods for sets.</span><br><span class="line">#maps : methods for maps.</span><br><span class="line">#aggregates : methods for creating aggregates on arrays or collections.</span><br><span class="line">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span><br><span class="line"></span><br><span class="line">    Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span><br><span class="line">    	补充：配合 th:object=&quot;$&#123;session.user&#125;：</span><br><span class="line">   &lt;div th:object=&quot;$&#123;session.user&#125;&quot;&gt;</span><br><span class="line">    &lt;p&gt;Name: &lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Surname: &lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Nationality: &lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    Message Expressions: #&#123;...&#125;：获取国际化内容</span><br><span class="line">    Link URL Expressions: @&#123;...&#125;：定义URL；</span><br><span class="line">    		@&#123;/order/process(execId=$&#123;execId&#125;,execType=&apos;FAST&apos;)&#125;</span><br><span class="line">    Fragment Expressions: ~&#123;...&#125;：片段引用表达式</span><br><span class="line">    		&lt;div th:insert=&quot;~&#123;commons :: main&#125;&quot;&gt;...&lt;/div&gt;</span><br><span class="line">    		</span><br><span class="line">Literals（字面量）</span><br><span class="line">      Text literals: &apos;one text&apos; , &apos;Another one!&apos; ,…</span><br><span class="line">      Number literals: 0 , 34 , 3.0 , 12.3 ,…</span><br><span class="line">      Boolean literals: true , false</span><br><span class="line">      Null literal: null</span><br><span class="line">      Literal tokens: one , sometext , main ,…</span><br><span class="line">Text operations:（文本操作）</span><br><span class="line">    String concatenation: +</span><br><span class="line">    Literal substitutions: |The name is $&#123;name&#125;|</span><br><span class="line">Arithmetic operations:（数学运算）</span><br><span class="line">    Binary operators: + , - , * , / , %</span><br><span class="line">    Minus sign (unary operator): -</span><br><span class="line">Boolean operations:（布尔运算）</span><br><span class="line">    Binary operators: and , or</span><br><span class="line">    Boolean negation (unary operator): ! , not</span><br><span class="line">Comparisons and equality:（比较运算）</span><br><span class="line">    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">    Equality operators: == , != ( eq , ne )</span><br><span class="line">Conditional operators:条件运算（三元运算符）</span><br><span class="line">    If-then: (if) ? (then)</span><br><span class="line">    If-then-else: (if) ? (then) : (else)</span><br><span class="line">    Default: (value) ?: (defaultvalue)</span><br><span class="line">Special tokens:</span><br><span class="line">    No-Operation: _</span><br></pre></td></tr></table></figure>

<h2 id="4、SpringMVC自动配置"><a href="#4、SpringMVC自动配置" class="headerlink" title="4、SpringMVC自动配置"></a>4、SpringMVC自动配置</h2><p><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p>
<h3 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p>
<p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p>
<ul>
<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>
<ul>
<li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li>
<li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li>
<li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li>
</ul>
</li>
<li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p>
</li>
<li><p>Static <code>index.html</code> support. 静态首页访问</p>
</li>
<li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p>
</li>
</ul>
<ul>
<li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p>
<ul>
<li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li>
<li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"date-format"</span>)<span class="comment">//在文件中配置日期格式化的规则</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Formatter&lt;Date&gt; <span class="title">dateFormatter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> DateFormatter(<span class="keyword">this</span>.mvcProperties.getDateFormat());<span class="comment">//日期格式化组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>==自己添加的格式化器转换器，我们只需要放在容器中即可==</code></pre><ul>
<li><p>Support for <code>HttpMessageConverters</code> (see below).</p>
<ul>
<li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p>
</li>
<li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p>
<p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p>
</li>
<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p>
<p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始化WebDataBinder；</span><br><span class="line">请求数据=====JavaBean；</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p>
<p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p>
<h3 id="2、扩展SpringMVC"><a href="#2、扩展SpringMVC" class="headerlink" title="2、扩展SpringMVC"></a>2、扩展SpringMVC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==</strong>;</p>
<p>既保留了所有的自动配置，也能用我们扩展的配置；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">"/atguigu"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原理：</p>
<pre><code>1）、WebMvcAutoConfiguration是SpringMVC的自动配置类

2）、在做其他自动配置时会导入；@Import(**EnableWebMvcConfiguration**.class)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//从容器中获取所有的WebMvcConfigurer</span></span><br><span class="line">     <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">             <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">           	<span class="comment">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  </span></span><br><span class="line">           	<span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line">             <span class="comment">//    for (WebMvcConfigurer delegate : this.delegates) &#123;</span></span><br><span class="line">              <span class="comment">//       delegate.addViewControllers(registry);</span></span><br><span class="line">              <span class="comment">//   &#125;</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>3）、容器中所有的WebMvcConfigurer都会一起起作用；

4）、我们的配置类也会被调用；

效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</code></pre><h3 id="3、全面接管SpringMVC；"><a href="#3、全面接管SpringMVC；" class="headerlink" title="3、全面接管SpringMVC；"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p>
<p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">"/atguigu"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原理：</p>
<p>为什么@EnableWebMvc自动配置就失效了；</p>
<p>1）@EnableWebMvc的核心</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br></pre></td></tr></table></figure>

<p>2）、</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>3）、</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, DispatcherServlet.class,</span><br><span class="line">		WebMvcConfigurerAdapter.class &#125;)</span><br><span class="line"><span class="comment">//容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(WebMvcConfigurationSupport.class)</span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE + <span class="number">10</span>)</span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(&#123; DispatcherServletAutoConfiguration.class,</span><br><span class="line">		ValidationAutoConfiguration.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p>
<p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p>
<h2 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p>
<pre><code>1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；

2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置

3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</code></pre><h2 id="6、RestfulCRUD"><a href="#6、RestfulCRUD" class="headerlink" title="6、RestfulCRUD"></a>6、RestfulCRUD</h2><h3 id="1）、默认访问首页"><a href="#1）、默认访问首页" class="headerlink" title="1）、默认访问首页"></a>1）、默认访问首页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="comment">//@EnableWebMvc   不要接管SpringMVC</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">"/atguigu"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">                registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2）、国际化"><a href="#2）、国际化" class="headerlink" title="2）、国际化"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p>
<p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p>
<p>3）、在页面使用fmt:message取出国际化内容</p>
<p>步骤：</p>
<p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p>
<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180211130721.png" title="hexo5">



<p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.messages"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Comma-separated list of basenames (essentially a fully-qualified classpath</span></span><br><span class="line"><span class="comment">	 * location), each following the ResourceBundle convention with relaxed support for</span></span><br><span class="line"><span class="comment">	 * slash based locations. If it doesn't contain a package qualifier (such as</span></span><br><span class="line"><span class="comment">	 * "org.mypackage"), it will be resolved from the classpath root.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> String basename = <span class="string">"messages"</span>;  </span><br><span class="line">    <span class="comment">//我们的配置文件可以直接放在类路径下叫messages.properties；</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.basename)) &#123;</span><br><span class="line">            <span class="comment">//设置国际化资源文件的基础名（去掉语言国家代码的）</span></span><br><span class="line">			messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(</span><br><span class="line">					StringUtils.trimAllWhitespace(<span class="keyword">this</span>.basename)));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">			messageSource.setDefaultEncoding(<span class="keyword">this</span>.encoding.name());</span><br><span class="line">		&#125;</span><br><span class="line">		messageSource.setFallbackToSystemLocale(<span class="keyword">this</span>.fallbackToSystemLocale);</span><br><span class="line">		messageSource.setCacheSeconds(<span class="keyword">this</span>.cacheSeconds);</span><br><span class="line">		messageSource.setAlwaysUseMessageFormat(<span class="keyword">this</span>.alwaysUseMessageFormat);</span><br><span class="line">		<span class="keyword">return</span> messageSource;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>3）、去页面获取国际化的值；</p>
<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180211134506.png" title="hexo5">




<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/asserts/css/signin.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.username&#125;"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.password&#125;"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>/&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.btn&#125;"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：根据浏览器语言设置的信息切换了国际化；</p>
<p>原理：</p>
<pre><code>国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">		<span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"locale"</span>)</span><br><span class="line">		<span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties</span><br><span class="line">					.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">			&#125;</span><br><span class="line">			AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">			localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">			<span class="keyword">return</span> localeResolver;</span><br><span class="line">		&#125;</span><br><span class="line">默认的就是根据请求头带来的区域信息获取Locale进行国际化</span><br></pre></td></tr></table></figure>

<p>4）、点击链接切换国际化</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以在连接上携带区域信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String l = request.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] split = l.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3）、登陆"><a href="#3）、登陆" class="headerlink" title="3）、登陆"></a>3）、登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p>
<p>1）、禁用模板引擎的缓存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 禁用缓存</span><br><span class="line">spring.thymeleaf.cache=false</span><br></pre></td></tr></table></figure>

<p>2）、页面修改完成以后ctrl+f9：重新编译；</p>
<p>登陆错误消息的显示</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4）、拦截器进行登陆检查"><a href="#4）、拦截器进行登陆检查" class="headerlink" title="4）、拦截器进行登陆检查"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登陆检查，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//未登陆，返回登陆页面</span></span><br><span class="line">            request.setAttribute(<span class="string">"msg"</span>,<span class="string">"没有权限请先登陆"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/index.html"</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//已登陆，放行请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册拦截器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class="line">  <span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">      WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">              registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">              registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">              registry.addViewController(<span class="string">"/main.html"</span>).setViewName(<span class="string">"dashboard"</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//注册拦截器</span></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//super.addInterceptors(registry);</span></span><br><span class="line">              <span class="comment">//静态资源；  *.css , *.js</span></span><br><span class="line">              <span class="comment">//SpringBoot已经做好了静态资源映射</span></span><br><span class="line">              registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                      .excludePathPatterns(<span class="string">"/index.html"</span>,<span class="string">"/"</span>,<span class="string">"/user/login"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> adapter;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="5）、CRUD-员工列表"><a href="#5）、CRUD-员工列表" class="headerlink" title="5）、CRUD-员工列表"></a>5）、CRUD-员工列表</h3><p>实验要求：</p>
<p>1）、RestfulCRUD：CRUD满足Rest风格；</p>
<p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p>
<table>
<thead>
<tr>
<th></th>
<th>普通CRUD（uri来区分操作）</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody><tr>
<td>查询</td>
<td>getEmp</td>
<td>emp—GET</td>
</tr>
<tr>
<td>添加</td>
<td>addEmp?xxx</td>
<td>emp—POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx=xx</td>
<td>emp/{id}—PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteEmp?id=1</td>
<td>emp/{id}—DELETE</td>
</tr>
</tbody></table>
<p>2）、实验的请求架构;</p>
<table>
<thead>
<tr>
<th>实验功能</th>
<th>请求URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>查询所有员工</td>
<td>emps</td>
<td>GET</td>
</tr>
<tr>
<td>查询某个员工(来到修改页面)</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>来到添加页面</td>
<td>emp</td>
<td>GET</td>
</tr>
<tr>
<td>添加员工</td>
<td>emp</td>
<td>POST</td>
</tr>
<tr>
<td>来到修改页面（查出员工进行信息回显）</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>修改员工</td>
<td>emp</td>
<td>PUT</td>
</tr>
<tr>
<td>删除员工</td>
<td>emp/1</td>
<td>DELETE</td>
</tr>
</tbody></table>
<p>3）、员工列表：</p>
<h4 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、抽取公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2、引入公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">~&#123;templatename::selector&#125;：模板名::选择器</span><br><span class="line">~&#123;templatename::fragmentname&#125;:模板名::片段名</span><br><span class="line"></span><br><span class="line">3、默认效果：</span><br><span class="line">insert的公共片段在div标签中</span><br><span class="line">如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：</span><br><span class="line">行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；</span><br></pre></td></tr></table></figure>

<p>三种引入公共片段的th属性：</p>
<p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p>
<p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p>
<p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">引入方式</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">效果</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入片段的时候传入参数： </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-md-2 d-none d-md-block bg-light sidebar"</span> <span class="attr">id</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-sticky"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav flex-column"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link active"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">th:class</span>=<span class="string">"$&#123;activeUri=='main.html'?'nav-link active':'nav-link'&#125;"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/main.html&#125;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"24"</span> <span class="attr">height</span>=<span class="string">"24"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 24 24"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke</span>=<span class="string">"currentColor"</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">stroke-linecap</span>=<span class="string">"round"</span> <span class="attr">stroke-linejoin</span>=<span class="string">"round"</span> <span class="attr">class</span>=<span class="string">"feather feather-home"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"9 22 9 12 15 12 15 22"</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                    Dashboard <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入侧边栏;传入参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"commons/bar::#sidebar(activeUri='emps')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6）、CRUD-员工添加"><a href="#6）、CRUD-员工添加" class="headerlink" title="6）、CRUD-员工添加"></a>6）、CRUD-员工添加</h3><p>添加页面</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan@atguigu.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提交的数据格式不对：生日：日期；</p>
<p>2017-12-12；2017/12/12；2017.12.12；</p>
<p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p>
<p>2017-12-12—Date； 类型转换，格式化;</p>
<p>默认日期是按照/的方式；</p>
<h3 id="7）、CRUD-员工修改"><a href="#7）、CRUD-员工修改" class="headerlink" title="7）、CRUD-员工修改"></a>7）、CRUD-员工修改</h3><p>修改添加二合一表单</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--需要区分是员工修改还是添加；--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--发送put请求修改员工数据--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）</span></span><br><span class="line"><span class="comment">2、页面创建一个post表单</span></span><br><span class="line"><span class="comment">3、创建一个input项，name="_method";值就是我们指定的请求方式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;emp!=null&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;emp!=null&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp.id&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan@atguigu.com"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.email&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.gender==0&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--提交的是部门的id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"department.id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;dept.id&#125;"</span> <span class="attr">th:each</span>=<span class="string">"dept:$&#123;depts&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;dept.departmentName&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"birth"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp!=null&#125;?'修改':'添加'"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8）、CRUD-员工删除"><a href="#8）、CRUD-员工删除" class="headerlink" title="8）、CRUD-员工删除"></a>8）、CRUD-员工删除</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"emp:$&#123;emps&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.email&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.gender&#125;==0?'女':'男'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.department.departmentName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-primary"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:attr</span>=<span class="string">"del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-danger deleteBtn"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    $(".deleteBtn").click(function()&#123;</span><br><span class="line">        //删除当前员工的</span><br><span class="line">        $("#deleteEmpForm").attr("action",$(this).attr("del_uri")).submit();</span><br><span class="line">        return false;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7、错误处理机制"><a href="#7、错误处理机制" class="headerlink" title="7、错误处理机制"></a>7、错误处理机制</h2><h3 id="1）、SpringBoot默认的错误处理机制"><a href="#1）、SpringBoot默认的错误处理机制" class="headerlink" title="1）、SpringBoot默认的错误处理机制"></a>1）、SpringBoot默认的错误处理机制</h3><p>默认效果：</p>
<pre><code>1）、浏览器，返回一个默认的错误页面</code></pre><img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180226173408.png" title="hexo5">

<p>  浏览器发送请求的请求头：</p>
<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180226180347.png" title="hexo5">

<pre><code>2）、如果是其他客户端，默认响应一个json数据</code></pre>{%asset_img 搜狗截图20180226173527.png hexo5%}

{%asset_img 搜狗截图20180226180504.png hexo5%}

<p>原理：</p>
<pre><code>可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；

  给容器中添加了以下组件

1、DefaultErrorAttributes：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">帮我们在页面共享信息；</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class="line">		errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">		addStatus(errorAttributes, requestAttributes);</span><br><span class="line">		addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);</span><br><span class="line">		addPath(errorAttributes, requestAttributes);</span><br><span class="line">		<span class="keyword">return</span> errorAttributes;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<pre><code>2、BasicErrorController：处理默认/error请求</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(produces = <span class="string">"text/html"</span>)<span class="comment">//产生html类型的数据；浏览器发送的请求来到这个方法处理</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">			HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">		HttpStatus status = getStatus(request);</span><br><span class="line">		Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">				request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">		response.setStatus(status.value());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//去哪个页面作为错误页面；包含页面地址和页面内容</span></span><br><span class="line">		ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">		<span class="keyword">return</span> (modelAndView == <span class="keyword">null</span> ? <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model) : modelAndView);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span></span><br><span class="line">	<span class="meta">@ResponseBody</span>    <span class="comment">//产生json数据，其他客户端来到这个方法处理；</span></span><br><span class="line">	<span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">		Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class="line">				isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">		HttpStatus status = getStatus(request);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<pre><code>3、ErrorPageCustomizer：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">"/error"</span>;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</span><br></pre></td></tr></table></figure>

<pre><code>4、DefaultErrorViewResolver：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">			Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">		ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class="line">		<span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">			modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> modelAndView;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//默认SpringBoot可以去找到一个页面？  error/404</span></span><br><span class="line">		String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class="line">		TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders</span><br><span class="line">				.getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line">		<span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span></span><br><span class="line">		<span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<pre><code>步骤：

    一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被**BasicErrorController**处理；

    1）响应页面；去哪个页面是由**DefaultErrorViewResolver**解析得到的；</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//所有的ErrorViewResolver得到ModelAndView</span></span><br><span class="line">   <span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">      <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> modelAndView;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2）、如果定制错误响应："><a href="#2）、如果定制错误响应：" class="headerlink" title="2）、如果定制错误响应："></a>2）、如果定制错误响应：</h3><h4 id="1）、如何定制错误的页面；"><a href="#1）、如何定制错误的页面；" class="headerlink" title="1）、如何定制错误的页面；"></a><strong>1）、如何定制错误的页面；</strong></h4><pre><code>**1）、有模板引擎的情况下；error/状态码;** 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；

我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；        

页面能获取的信息；

    timestamp：时间戳

    status：状态码

    error：错误提示

    exception：异常对象

    message：异常消息

    errors：JSR303数据校验的错误都在这里

2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；

3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</code></pre><h4 id="2）、如何定制错误的json数据；"><a href="#2）、如何定制错误的json数据；" class="headerlink" title="2）、如何定制错误的json数据；"></a>2）、如何定制错误的json数据；</h4><pre><code>1）、自定义异常处理&amp;返回定制json数据；</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExistException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">handleException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>,<span class="string">"user.notexist"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有自适应效果...</span></span><br></pre></td></tr></table></figure>

<pre><code>2）、转发到/error进行自适应响应效果处理</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(UserNotExistException.class)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">handleException</span><span class="params">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">       Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       <span class="comment">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程</span></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Integer statusCode = (Integer) request</span></span><br><span class="line"><span class="comment">        .getAttribute("javax.servlet.error.status_code");</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>,<span class="number">500</span>);</span><br><span class="line">       map.put(<span class="string">"code"</span>,<span class="string">"user.notexist"</span>);</span><br><span class="line">       map.put(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">       <span class="comment">//转发到/error</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3）、将我们的定制数据携带出去；"><a href="#3）、将我们的定制数据携带出去；" class="headerlink" title="3）、将我们的定制数据携带出去；"></a>3）、将我们的定制数据携带出去；</h4><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p>
<pre><code>1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；

2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；

        容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</code></pre><p>自定义ErrorAttributes</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给容器中加入我们自己定义的ErrorAttributes</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class="line">        map.put(<span class="string">"company"</span>,<span class="string">"atguigu"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</p>
<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180228135513.png" title="hexo5">



<h2 id="8、配置嵌入式Servlet容器"><a href="#8、配置嵌入式Servlet容器" class="headerlink" title="8、配置嵌入式Servlet容器"></a>8、配置嵌入式Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p>
<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180301142915.png" title="hexo5">



<p>问题？</p>
<h3 id="1）、如何定制和修改Servlet容器的相关配置；"><a href="#1）、如何定制和修改Servlet容器的相关配置；" class="headerlink" title="1）、如何定制和修改Servlet容器的相关配置；"></a>1）、如何定制和修改Servlet容器的相关配置；</h3><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br><span class="line">server.context-path=/crud</span><br><span class="line"></span><br><span class="line">server.tomcat.uri-encoding=UTF-8</span><br><span class="line"></span><br><span class="line">//通用的Servlet容器设置</span><br><span class="line">server.xxx</span><br><span class="line">//Tomcat的设置</span><br><span class="line">server.tomcat.xxx</span><br></pre></td></tr></table></figure>

<p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  <span class="comment">//一定要将这个定制器加入到容器中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainerCustomizer <span class="title">embeddedServletContainerCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定制嵌入式的Servlet容器相关的规则</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">            container.setPort(<span class="number">8083</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2）、注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#2）、注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="2）、注册Servlet三大组件【Servlet、Filter、Listener】"></a>2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p>
<p>注册三大组件用以下方式</p>
<p>ServletRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册三大组件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> MyServlet(),<span class="string">"/myServlet"</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FilterRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    registrationBean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    registrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/hello"</span>,<span class="string">"/myServlet"</span>));</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ServletListenerRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyListener());</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p>
<p>DispatcherServletAutoConfiguration中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      DispatcherServlet dispatcherServlet)</span> </span>&#123;</span><br><span class="line">   ServletRegistrationBean registration = <span class="keyword">new</span> ServletRegistrationBean(</span><br><span class="line">         dispatcherServlet, <span class="keyword">this</span>.serverProperties.getServletMapping());</span><br><span class="line">    <span class="comment">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span></span><br><span class="line">    <span class="comment">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class="line">    </span><br><span class="line">   registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class="line">   registration.setLoadOnStartup(</span><br><span class="line">         <span class="keyword">this</span>.webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.multipartConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">      registration.setMultipartConfig(<span class="keyword">this</span>.multipartConfig);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）、SpringBoot能不能支持其他的Servlet容器；</p>
<h3 id="3）、替换为其他嵌入式Servlet容器"><a href="#3）、替换为其他嵌入式Servlet容器" class="headerlink" title="3）、替换为其他嵌入式Servlet容器"></a>3）、替换为其他嵌入式Servlet容器</h3><img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180302114401.png" title="hexo5">

<p>默认支持：</p>
<p>Tomcat（默认使用）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Jetty</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Undertow</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4）、嵌入式Servlet容器自动配置原理；"><a href="#4）、嵌入式Servlet容器自动配置原理；" class="headerlink" title="4）、嵌入式Servlet容器自动配置原理；"></a>4）、嵌入式Servlet容器自动配置原理；</h3><p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@Import</span>(BeanPostProcessorsRegistrar.class)</span><br><span class="line"><span class="comment">//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件</span></span><br><span class="line"><span class="comment">//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：</span></span><br><span class="line"><span class="comment">//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, Tomcat.class &#125;)<span class="comment">//判断当前是否引入了Tomcat依赖；</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)<span class="comment">//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="title">tomcatEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Nested configuration if Jetty is being used.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Configuration</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, Server.class, Loader.class,</span><br><span class="line">			WebAppContext.class &#125;)</span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedJetty</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> JettyEmbeddedServletContainerFactory <span class="title">jettyEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> JettyEmbeddedServletContainerFactory();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Nested configuration if Undertow is being used.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Configuration</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)</span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedUndertow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="title">undertowEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> UndertowEmbeddedServletContainerFactory();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取嵌入式的Servlet容器</span></span><br><span class="line">   <span class="function">EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">         ServletContextInitializer... initializers)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180302144835.png" title="hexo">

<p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p>
<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180302144910.png" title="hexo">



<p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个Tomcat</span></span><br><span class="line">   Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置Tomcat的基本环节</span></span><br><span class="line">   File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span> ? <span class="keyword">this</span>.baseDirectory</span><br><span class="line">         : createTempDir(<span class="string">"tomcat"</span>));</span><br><span class="line">   tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">   Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">   tomcat.getService().addConnector(connector);</span><br><span class="line">   customizeConnector(connector);</span><br><span class="line">   tomcat.setConnector(connector);</span><br><span class="line">   tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">   configureEngine(tomcat.getEngine());</span><br><span class="line">   <span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</span><br><span class="line">      tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">   &#125;</span><br><span class="line">   prepareContext(tomcat.getHost(), initializers);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span></span><br><span class="line">   <span class="keyword">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）、我们对嵌入式容器的配置修改是怎么生效？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerProperties、EmbeddedServletContainerCustomizer</span><br></pre></td></tr></table></figure>

<p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p>
<p>怎么修改的原理？</p>
<p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化之前</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件</span></span><br><span class="line">   <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postProcessBeforeInitialization</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；</span></span><br><span class="line">    <span class="keyword">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;</span><br><span class="line">        customizer.customize(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class="title">getCustomizers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.customizers == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Look up does not include the parent context</span></span><br><span class="line">        <span class="keyword">this</span>.customizers = <span class="keyword">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(</span><br><span class="line">            <span class="keyword">this</span>.beanFactory</span><br><span class="line">            <span class="comment">//从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer</span></span><br><span class="line">            <span class="comment">//定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span></span><br><span class="line">            .getBeansOfType(EmbeddedServletContainerCustomizer.class,</span><br><span class="line">                            <span class="keyword">false</span>, <span class="keyword">false</span>)</span><br><span class="line">            .values());</span><br><span class="line">        Collections.sort(<span class="keyword">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">        <span class="keyword">this</span>.customizers = Collections.unmodifiableList(<span class="keyword">this</span>.customizers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.customizers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ServerProperties也是定制器</span><br></pre></td></tr></table></figure>

<p>步骤：</p>
<p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p>
<p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p>
<p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p>
<p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p>
<p>###5）、嵌入式Servlet容器启动原理；</p>
<p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；</p>
<p>获取嵌入式的Servlet容器工厂：</p>
<p>1）、SpringBoot应用启动运行run方法</p>
<p>2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p>
<p>3）、refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">      <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">         initMessageSource();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">         onRefresh();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">         registerListeners();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                  <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">         destroyBeans();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">         <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">         resetCommonCaches();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）、  onRefresh(); web的ioc容器重写了onRefresh方法</p>
<p>5）、webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p>
<p><strong>6）、获取嵌入式的Servlet容器工厂：</strong></p>
<p>EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</p>
<pre><code>从ioc容器中获取EmbeddedServletContainerFactory 组件；**TomcatEmbeddedServletContainerFactory**创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</code></pre><p>7）、<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p>
<p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p>
<p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p>
<p><strong>==IOC容器启动创建嵌入式的Servlet容器==</strong></p>
<h2 id="9、使用外置的Servlet容器"><a href="#9、使用外置的Servlet容器" class="headerlink" title="9、使用外置的Servlet容器"></a>9、使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p>
<pre><code>优点：简单、便携；

缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</code></pre><p>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1）、必须创建一个war项目；（利用idea创建好目录结构）</p>
<p>2）、将嵌入式的Tomcat指定为provided；</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//传入SpringBoot应用的主程序</span></span><br><span class="line">      <span class="keyword">return</span> application.sources(SpringBoot04WebJspApplication.class);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）、启动服务器就可以使用；</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p>
<p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p>
<p>servlet3.0（Spring注解版）：</p>
<p>8.2.4 Shared libraries / runtimes pluggability：</p>
<p>规则：</p>
<pre><code>1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：

2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名

3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</code></pre><p>流程：</p>
<p>1）、启动Tomcat</p>
<p>2）、org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</p>
<p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p>
<p>3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p>
<p>4）、每一个WebApplicationInitializer都调用自己的onStartup；</p>
<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180302221835.png" title="hexo">

<p>5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p>
<p>6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、创建SpringApplicationBuilder</span></span><br><span class="line">   SpringApplicationBuilder builder = createSpringApplicationBuilder();</span><br><span class="line">   StandardServletEnvironment environment = <span class="keyword">new</span> StandardServletEnvironment();</span><br><span class="line">   environment.initPropertySources(servletContext, <span class="keyword">null</span>);</span><br><span class="line">   builder.environment(environment);</span><br><span class="line">   builder.main(getClass());</span><br><span class="line">   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);</span><br><span class="line">   <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.logger.info(<span class="string">"Root context already created (using as parent)."</span>);</span><br><span class="line">      servletContext.setAttribute(</span><br><span class="line">            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">null</span>);</span><br><span class="line">      builder.initializers(<span class="keyword">new</span> ParentContextApplicationContextInitializer(parent));</span><br><span class="line">   &#125;</span><br><span class="line">   builder.initializers(</span><br><span class="line">         <span class="keyword">new</span> ServletContextApplicationContextInitializer(servletContext));</span><br><span class="line">   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来</span></span><br><span class="line">   builder = configure(builder);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用builder创建一个Spring应用</span></span><br><span class="line">   SpringApplication application = builder.build();</span><br><span class="line">   <span class="keyword">if</span> (application.getSources().isEmpty() &amp;&amp; AnnotationUtils</span><br><span class="line">         .findAnnotation(getClass(), Configuration.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      application.getSources().add(getClass());</span><br><span class="line">   &#125;</span><br><span class="line">   Assert.state(!application.getSources().isEmpty(),</span><br><span class="line">         <span class="string">"No SpringApplication sources have been defined. Either override the "</span></span><br><span class="line">               + <span class="string">"configure method or add an @Configuration annotation"</span>);</span><br><span class="line">   <span class="comment">// Ensure error pages are registered</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.registerErrorPageFilter) &#123;</span><br><span class="line">      application.getSources().add(ErrorPageFilterConfiguration.class);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//启动Spring应用</span></span><br><span class="line">   <span class="keyword">return</span> run(application);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7）、Spring的应用就启动并且创建IOC容器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">   stopWatch.start();</span><br><span class="line">   ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">   FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">            args);</span><br><span class="line">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">            applicationArguments);</span><br><span class="line">      Banner printedBanner = printBanner(environment);</span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">      analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">            printedBanner);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//刷新IOC容器</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">      listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> context;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>==启动Servlet容器，再启动SpringBoot应用==</strong></p>
<h1 id="五、Docker"><a href="#五、Docker" class="headerlink" title="五、Docker"></a>五、Docker</h1><h2 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p>
<p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p>
<p>运行中的这个镜像称为容器，容器启动是非常快速的。</p>
<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180303145450.png" title="hexo">

<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180303145531.png" title="hexo">


<h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p>
<p>docker客户端(Client)：连接docker主机进行操作；</p>
<p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p>
<p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p>
<p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p>
<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180303165113.png" title="hexo">

<p>使用Docker的步骤：</p>
<p>1）、安装Docker</p>
<p>2）、去Docker仓库找到这个软件对应的镜像；</p>
<p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p>
<p>4）、对容器的启动停止就是对软件的启动停止；</p>
<h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><h4 id="1）、安装linux虚拟机"><a href="#1）、安装linux虚拟机" class="headerlink" title="1）、安装linux虚拟机"></a>1）、安装linux虚拟机</h4><pre><code>1）、VMWare、VirtualBox（安装）；

2）、导入虚拟机文件centos7-atguigu.ova；

3）、双击启动linux虚拟机;使用  root/ 123456登陆

4）、使用客户端连接linux服务器进行命令操作；

5）、设置虚拟机网络；

    桥接网络===选好网卡====接入网线；

6）、设置好网络以后使用命令重启虚拟机的网络</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<pre><code>7）、查看linux的ip地址</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<pre><code>8）、使用客户端连接linux；</code></pre><h4 id="2）、在linux虚拟机上安装docker"><a href="#2）、在linux虚拟机上安装docker" class="headerlink" title="2）、在linux虚拟机上安装docker"></a>2）、在linux虚拟机上安装docker</h4><p>步骤：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、检查内核版本，必须是3.10及以上</span><br><span class="line">uname -r</span><br><span class="line">2、安装docker</span><br><span class="line">yum install docker</span><br><span class="line">3、输入y确认安装</span><br><span class="line">4、启动docker</span><br><span class="line">[root@localhost ~]# systemctl start docker</span><br><span class="line">[root@localhost ~]# docker -v</span><br><span class="line">Docker version 1.12.6, build 3e8e77d/1.12.6</span><br><span class="line">5、开机启动docker</span><br><span class="line">[root@localhost ~]# systemctl enable docker</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">6、停止docker</span><br><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>

<h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>检索</td>
<td>docker  search 关键字  eg：docker  search redis</td>
<td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td>
</tr>
<tr>
<td>拉取</td>
<td>docker pull 镜像名:tag</td>
<td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td>
</tr>
<tr>
<td>列表</td>
<td>docker images</td>
<td>查看所有本地镜像</td>
</tr>
<tr>
<td>删除</td>
<td>docker rmi image-id</td>
<td>删除指定的本地镜像</td>
</tr>
</tbody></table>
<p><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p>
<h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p>
<p>步骤：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1、搜索镜像</span><br><span class="line">[root@localhost ~]# docker search tomcat</span><br><span class="line">2、拉取镜像</span><br><span class="line">[root@localhost ~]# docker pull tomcat</span><br><span class="line">3、根据镜像启动容器</span><br><span class="line">docker run --name mytomcat -d tomcat:latest</span><br><span class="line">4、docker ps  </span><br><span class="line">查看运行中的容器</span><br><span class="line">5、 停止运行中的容器</span><br><span class="line">docker stop  容器的id</span><br><span class="line">6、查看所有的容器</span><br><span class="line">docker ps -a</span><br><span class="line">7、启动容器</span><br><span class="line">docker start 容器id</span><br><span class="line">8、删除一个容器</span><br><span class="line"> docker rm 容器id</span><br><span class="line">9、启动一个做了端口映射的tomcat</span><br><span class="line">[root@localhost ~]# docker run -d -p 8888:8080 tomcat</span><br><span class="line">-d：后台运行</span><br><span class="line">-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</span><br><span class="line"></span><br><span class="line">10、为了演示简单关闭了linux的防火墙</span><br><span class="line">service firewalld status ；查看防火墙状态</span><br><span class="line">service firewalld stop：关闭防火墙</span><br><span class="line">11、查看容器的日志</span><br><span class="line">docker logs container-name/container-id</span><br><span class="line"></span><br><span class="line">更多命令参看</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/docker/</span><br><span class="line">可以参考每一个镜像的文档</span><br></pre></td></tr></table></figure>

<h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure>

<p>错误的启动</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -d mysql</span><br><span class="line">42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846</span><br><span class="line"></span><br><span class="line">mysql退出了</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES</span><br><span class="line">42f09819908b        mysql               "docker-entrypoint.sh"   34 seconds ago      Exited (1) 33 seconds ago                            mysql01</span><br><span class="line">538bde63e500        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       compassionate_</span><br><span class="line">goldstine</span><br><span class="line">c4f1ac60b3fc        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       lonely_fermi</span><br><span class="line">81ec743a5271        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//错误日志</span><br><span class="line">[root@localhost ~]# docker logs 42f09819908b</span><br><span class="line">error: database is uninitialized and password option is not specified </span><br><span class="line">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span><br></pre></td></tr></table></figure>

<p>正确的启动</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">b874c56bec49        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</span><br></pre></td></tr></table></figure>

<p>做了端口映射</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">ad10e4bc5c6a        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</span><br></pre></td></tr></table></figure>

<p>几个其他的高级操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class="line">把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面</span><br><span class="line">改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）</span><br><span class="line"></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line">指定mysql的一些配置参数</span><br></pre></td></tr></table></figure>

<h1 id="六、SpringBoot与数据访问"><a href="#六、SpringBoot与数据访问" class="headerlink" title="六、SpringBoot与数据访问"></a>六、SpringBoot与数据访问</h1><h2 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://192.168.15.22:3306/jdbc</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<pre><code>默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；

数据源的相关配置都在DataSourceProperties里面；</code></pre><p>自动配置原理：</p>
<p>org.springframework.boot.autoconfigure.jdbc：</p>
<p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p>
<p>2、SpringBoot默认可以支持；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、</span><br></pre></td></tr></table></figure>

<p>3、自定义数据源类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generic DataSource configuration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(DataSource.class)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(name = <span class="string">"spring.datasource.type"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性</span></span><br><span class="line">      <span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p>
<pre><code>作用：

    1）、runSchemaScripts();运行建表语句；

    2）、runDataScripts();运行插入数据的sql语句；</code></pre><p>默认只需要将文件命名为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">schema-*.sql、data-*.sql</span><br><span class="line">默认规则：schema.sql，schema-all.sql；</span><br><span class="line">可以使用   </span><br><span class="line">	schema:</span><br><span class="line">      - classpath:department.sql</span><br><span class="line">      指定位置</span><br></pre></td></tr></table></figure>

<p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p>
<h2 id="2、整合Druid数据源"><a href="#2、整合Druid数据源" class="headerlink" title="2、整合Druid数据源"></a>2、整合Druid数据源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">导入druid数据源</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Druid的监控</span></span><br><span class="line">    <span class="comment">//1、配置一个管理后台的Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        initParams.put(<span class="string">"allow"</span>,<span class="string">""</span>);<span class="comment">//默认就是允许所有访问</span></span><br><span class="line">        initParams.put(<span class="string">"deny"</span>,<span class="string">"192.168.15.21"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、配置一个web监控的filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、整合MyBatis"><a href="#3、整合MyBatis" class="headerlink" title="3、整合MyBatis"></a>3、整合MyBatis</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180305194443.png" title="hexo">

<p>步骤：</p>
<pre><code>1）、配置数据源相关属性（见上一节Druid）

2）、给数据库建表

3）、创建JavaBean</code></pre><h3 id="4）、注解版"><a href="#4）、注解版" class="headerlink" title="4）、注解版"></a>4）、注解版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>,keyProperty = <span class="string">"id"</span>)</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into department(departmentName) values(#&#123;departmentName&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：</p>
<p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用MapperScan批量扫描所有的Mapper接口；</span><br><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.atguigu.springboot.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot06DataMybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(SpringBoot06DataMybatisApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5）、配置文件版"><a href="#5）、配置文件版" class="headerlink" title="5）、配置文件版"></a>5）、配置文件版</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  config-location:</span> <span class="attr">classpath:mybatis/mybatis-config.xml</span> <span class="string">指定全局配置文件的位置</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mybatis/mapper/*.xml</span>  <span class="string">指定sql映射文件的位置</span></span><br></pre></td></tr></table></figure>

<p>更多使用参照</p>
<p><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p>
<h2 id="4、整合SpringData-JPA"><a href="#4、整合SpringData-JPA" class="headerlink" title="4、整合SpringData JPA"></a>4、整合SpringData JPA</h2><h3 id="1）、SpringData简介"><a href="#1）、SpringData简介" class="headerlink" title="1）、SpringData简介"></a>1）、SpringData简介</h3><img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180306105412.png" title="hexo">

<h3 id="2）、整合SpringData-JPA"><a href="#2）、整合SpringData-JPA" class="headerlink" title="2）、整合SpringData JPA"></a>2）、整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p>
<p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tbl_user"</span>) <span class="comment">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//这是一个主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class="comment">//自增主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>,length = <span class="number">50</span>) <span class="comment">//这是和数据表对应的一个列</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@Column</span> <span class="comment">//省略默认列名就是属性名</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure>

<p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository来完成对数据库的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3）、基本的配置JpaProperties</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line"><span class="attr"> jpa:</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="comment">#     更新或者创建数据表结构</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="comment">#    控制台显示SQL</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="七、启动配置原理"><a href="#七、启动配置原理" class="headerlink" title="七、启动配置原理"></a>七、启动配置原理</h1><p>几个重要的事件回调机制</p>
<p>配置在META-INF/spring.factories</p>
<p><strong>ApplicationContextInitializer</strong></p>
<p><strong>SpringApplicationRunListener</strong></p>
<p>只需要放在ioc容器中</p>
<p><strong>ApplicationRunner</strong></p>
<p><strong>CommandLineRunner</strong></p>
<p>启动流程：</p>
<h2 id="1、创建SpringApplication对象"><a href="#1、创建SpringApplication对象" class="headerlink" title="1、创建SpringApplication对象"></a><strong>1、创建SpringApplication对象</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">initialize(sources);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保存主配置类</span></span><br><span class="line">    <span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断当前是否一个web应用</span></span><br><span class="line">    <span class="keyword">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class="line">    <span class="comment">//从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer；然后保存起来</span></span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">        ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">//从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener</span></span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="comment">//从多个配置类中找到有main方法的主配置类</span></span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180306145727.png" title="hexo">
<img src="/2020/03/04/尚硅谷-SpringBoot学习笔记/搜狗截图20180306145855.png" title="hexo">

<h2 id="2、运行run方法"><a href="#2、运行run方法" class="headerlink" title="2、运行run方法"></a>2、运行run方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">   stopWatch.start();</span><br><span class="line">   ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">   FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories</span></span><br><span class="line">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    <span class="comment">//回调所有的获取SpringApplicationRunListener.starting()方法</span></span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//封装命令行参数</span></span><br><span class="line">      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">            args);</span><br><span class="line">      <span class="comment">//准备环境</span></span><br><span class="line">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">            applicationArguments);</span><br><span class="line">       		<span class="comment">//创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成</span></span><br><span class="line">       </span><br><span class="line">      Banner printedBanner = printBanner(environment);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//创建ApplicationContext；决定创建web的ioc还是普通的ioc</span></span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">       </span><br><span class="line">      analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">       <span class="comment">//准备上下文环境;将environment保存到ioc中；而且applyInitializers()；</span></span><br><span class="line">       <span class="comment">//applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法</span></span><br><span class="line">       <span class="comment">//回调所有的SpringApplicationRunListener的contextPrepared()；</span></span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">            printedBanner);</span><br><span class="line">       <span class="comment">//prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded（）；</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版</span></span><br><span class="line">       <span class="comment">//扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">       <span class="comment">//从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调</span></span><br><span class="line">       <span class="comment">//ApplicationRunner先回调，CommandLineRunner再回调</span></span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">       <span class="comment">//所有的SpringApplicationRunListener回调finished方法</span></span><br><span class="line">      listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//整个SpringBoot应用启动完成以后返回启动的ioc容器；</span></span><br><span class="line">      <span class="keyword">return</span> context;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、事件监听机制"><a href="#3、事件监听机制" class="headerlink" title="3、事件监听机制"></a>3、事件监听机制</h2><p>配置在META-INF/spring.factories</p>
<p><strong>ApplicationContextInitializer</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span>&lt;<span class="title">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ApplicationContextInitializer...initialize..."</span>+applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SpringApplicationRunListener</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须有的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloSpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...starting..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        Object o = environment.getSystemProperties().get(<span class="string">"os.name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...environmentPrepared.."</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...contextPrepared..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...contextLoaded..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finished</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...finished..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置（META-INF/spring.factories）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">com.atguigu.springboot.listener.HelloApplicationContextInitializer</span><br><span class="line"></span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">com.atguigu.springboot.listener.HelloSpringApplicationRunListener</span><br></pre></td></tr></table></figure>

<p>只需要放在ioc容器中</p>
<p><strong>ApplicationRunner</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ApplicationRunner...run...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CommandLineRunner</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CommandLineRunner...run..."</span>+ Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八、自定义starter"><a href="#八、自定义starter" class="headerlink" title="八、自定义starter"></a>八、自定义starter</h1><p>starter：</p>
<pre><code>1、这个场景需要使用到的依赖是什么？

2、如何编写自动配置</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//指定这个类是一个配置类</span></span><br><span class="line"><span class="meta">@ConditionalOnXXX</span>  <span class="comment">//在指定条件成立的情况下自动配置类生效</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>  <span class="comment">//指定自动配置类的顺序</span></span><br><span class="line"><span class="meta">@Bean</span>  <span class="comment">//给容器中添加组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationPropertie</span>结合相关xxxProperties类来绑定相关的配置</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span> <span class="comment">//让xxxProperties生效加入到容器中</span></span><br><span class="line"></span><br><span class="line">自动配置类要能加载</span><br><span class="line">将需要启动就加载的自动配置类，配置在META-INF/spring.factories</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br></pre></td></tr></table></figure>

<pre><code>3、模式：</code></pre><p>启动器只用来做依赖导入；</p>
<p>专门来写一个自动配置模块；</p>
<p>启动器依赖自动配置；别人只需要引入启动器（starter）</p>
<p>mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter</p>
<p>步骤：</p>
<p>1）、启动器模块</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入自动配置模块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）、自动配置模块</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--引入spring-boot-starter；所有starter的基本配置--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"atguigu.hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHellAtguigu</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix()+<span class="string">"-"</span> +name + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用才生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HelloProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HelloService service = <span class="keyword">new</span> HelloService();</span><br><span class="line">        service.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="更多SpringBoot整合示例"><a href="#更多SpringBoot整合示例" class="headerlink" title="更多SpringBoot整合示例"></a>更多SpringBoot整合示例</h1><p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples</a></p>
]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python+OpenCV+dlib实现视频中的人脸检测]]></title>
      <url>/2020/02/29/Python-OpenCV-dlib%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E4%B8%AD%E7%9A%84%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B/</url>
      <content type="html"><![CDATA[<h1 id="一、实验简介"><a href="#一、实验简介" class="headerlink" title="一、实验简介"></a>一、实验简介</h1><hr>
<h2 id="1-1、功能简介"><a href="#1-1、功能简介" class="headerlink" title="1.1、功能简介"></a>1.1、功能简介</h2><p>本实验使用python语言，结合opencv工具，dlib模型实现视频中的人脸检测，并分析截取的人脸的清晰度、以及相似度，最终挑选出视频中出现的每个人的最清晰的一张图片保存到本地文件夹中。</p>
<a id="more"></a>
<h2 id="1-2、设计思路"><a href="#1-2、设计思路" class="headerlink" title="1.2、设计思路"></a>1.2、设计思路</h2><p>本程序使用python+opencv+dlib进行开发，使用opencv加载已保存的视频，再使用dlib中的predictor和model获取人脸及其特征， 再用np.linalg.norm(descriptor1 - descriptor2)计算出该截图和已保存的截图的相似度，若相似则利用cv2.Laplacian（img1，img2）.var()获取较清晰的一张进行保存，如果不相似则直接保存，最后将识别的结果保存至本地。</p>
<h1 id="二、环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a>二、环境配置</h1><hr>
<h2 id="2-1开发环境准备"><a href="#2-1开发环境准备" class="headerlink" title="2.1开发环境准备"></a>2.1开发环境准备</h2><p>Windows 10（专业版）的PC一台、python 3.7、opencv4.1.2.30、PyCharm 2018.3.5、visualstudio2017、cmake3.16.3、dlib19.19.0、shape_predictor_68_face_landmarks.dat、dlib_face_recognition_resnet_model_v1.dat</p>
<h2 id="2-2-实验环境的配置流程"><a href="#2-2-实验环境的配置流程" class="headerlink" title="2.2 实验环境的配置流程"></a>2.2 实验环境的配置流程</h2><p>1、安装python3.7、pycharm2018.3.5。<br>2、在cmd中使用pip install opencv-python安装opencv4.1.2.30<br>3、安装vs2017：勾选C++桌面开发环境、python开发环境。<br>4、安装好vs2017后，添加cl路径到环境变量。<br>5、安装cmake：使用pip install cmake  安装 cmake 插件。在cmd中输入cmake，若出现以下，说明安装成功。</p>
<img src="/2020/02/29/Python-OpenCV-dlib实现视频中的人脸检测/1.png" title="git">
<p>6、安装dlib：下载dlibdlib-19.19.0压缩包，将其解压至F:/dlib19.19.0下用cd 进入到dlib文件夹的路径，然后输入python setup.py install进行安装，等待几分钟，提示dlib安装成功。<br>7、配置pycharm：打开pycharm，新建项目facedetect。在配置中将已经添加dlib的python解释器放置到该项目中。项目中解释器内含库如下：</p>
<img src="/2020/02/29/Python-OpenCV-dlib实现视频中的人脸检测/2.png" title="git">
<p>8、下载shape_predictor_68_face_landmarks.dat、dlib_face_recognition_resnet_model_v1.dat模型到项目文件夹data中去，用于人脸关键点检测以及特征检测。</p>
<h1 id="三、程序设计"><a href="#三、程序设计" class="headerlink" title="三、程序设计"></a>三、程序设计</h1><hr>
<h2 id="3-1-文件结构"><a href="#3-1-文件结构" class="headerlink" title="3.1 文件结构"></a>3.1 文件结构</h2><p>项目名称：facedetect；实验使用模型以及原始视频保存至data文件夹中；实验结果存储于result文件夹中；程序代码写在facedetect.py中。</p>
<img src="/2020/02/29/Python-OpenCV-dlib实现视频中的人脸检测/3.png" title="git">
<img src="/2020/02/29/Python-OpenCV-dlib实现视频中的人脸检测/4.png" title="git">
<h2 id="3-2-代码设计"><a href="#3-2-代码设计" class="headerlink" title="3.2 代码设计"></a>3.2 代码设计</h2><pre><code>import cv2,os,dlib
import numpy as np
#识别视频中出现的人物，每个人物截取最清晰的一张，保存到figures数组
def CatchPICFromVideo(window_name, video_path, predictor_path, face_rec_model_path):
    detector = dlib.get_frontal_face_detector() # 创建人脸检测器
    sp = dlib.shape_predictor(predictor_path) # 创建关键点预测器
    facerec = dlib.face_recognition_model_v1(face_rec_model_path) #创建人脸特征识别器
    video = cv2.VideoCapture(video_path) # 加载视频
    cv2.namedWindow(window_name, cv2.WINDOW_KEEPRATIO) # 创建窗口
    figures = []  # 用于存储识别的人物
    descriptors = [] # 用于存储人物特征
    ret,frame = video.read() # 按帧处理视频
    count = 0 # 记录当前帧序号
    while ret:
        if(count % 3 == 0): # 每三帧截取一帧
            dets = FaceDetect(frame,detector) #检测人脸，返回坐标
            for k, d in enumerate(dets):  # k为下标，d为人脸坐标，检测当前帧中所有的人脸
                v = DrawFace(frame,d,sp,facerec) #绘制人脸矩形框,返回人脸特征
                if len(descriptors) == 0: # 用以存放第一张人脸
                    descriptors.append(v)
                    figures.append(frame)
                else:
                    lenth = len(descriptors)
                    newface = True # 用以标记是否是新的人脸
                    for i in range(lenth): #将当前截图与前面已经保存的作比较
                        if(SimCompare(descriptors[i], v)):
                            figures[i] = ClearCompare(frame, figures[i])
                            newface = False
                            break
                    if newface: #若是新的人脸则保存
                        descriptors.append(v)
                        figures.append(frame)
            cv2.imshow(window_name, frame)  # 在窗口中显示
            index = cv2.waitKey(1)
            if index == 27:
                video.release()
                cv2.destroyWindow(window_name)
                break
        ret,frame = video.read() #读取下一帧
        count += 1
    print(len(descriptors))  # 输出不同的人脸数
    return figures
def FaceDetect(frame,detector): #检测人脸，返回坐标
    gray_pic = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # 转化成为灰度图像
    dets = detector(gray_pic, 1)  # 检测图像中的人脸，返回四点坐标
    return dets
def DrawFace(frame,d,sp,facerec):  #绘制矩形框,返回人脸特征
    gray_pic = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    shape = sp(gray_pic, d)  # 返回68个关键点的位置
    cv2.rectangle(frame, (d.left(), d.top()), (d.right(), d.bottom()), (0, 255，0), 1)  # 对人脸画框
    face_descriptor = facerec.compute_face_descriptor(frame, shape)  # 提取人脸特征
    v = np.array(face_descriptor)
    return v
def SimCompare(descriptor1,descriptor2): #两张人脸特征相似度对比，距离小于0.6则认为是同一个人
    distance = np.linalg.norm(descriptor1 - descriptor2)
    if distance &lt; 0.6:
        return True
    else:
        return False
def ClearCompare(pic1, pic2): #两张图片的清晰度比较
    gray_pic1 = cv2.cvtColor(pic1, cv2.COLOR_BGR2GRAY)
    gray_pic2 = cv2.cvtColor(pic2, cv2.COLOR_BGR2GRAY)
    if cv2.Laplacian(gray_pic1, cv2.CV_64F).var() &gt; cv2.Laplacian(gray_pic2, cv2.CV_64F).var():
        return pic1
    else:
        return pic2
def OutputToLocal(figures, output_path): # 将不同的比较清晰的人脸照片输出到本地,命名为1,2,3，...
    num = 1
    for figure in figures:
        cv2.imwrite(output_path + str(num) + &quot;.jpg&quot;, figure)
        num += 1
if __name__ == &apos;__main__&apos;:
    video_path = os.getcwd() + &quot;\\data\\haha.mp4&quot;  # 待识别视频路径
    output_path = os.getcwd() + &quot;\\result\\&quot;  # 结果保存文件夹
    predictor_path = os.getcwd() + &quot;\\data\\shape_predictor_68_face_landmarks.dat&quot;  # 用于检测人脸的关键点，比如眼睛，鼻子
    face_rec_model_path = os.getcwd() + &quot;\\data\\dlib_face_recognition_resnet_model_v1.dat&quot;  # 用于在检测关键点的基础上，生成人脸的特征值
    figures = CatchPICFromVideo(&quot;GetFaceFromVideo&quot;, video_path, predictor_path, face_rec_model_path)
    OutputToLocal(figures, output_path)</code></pre><h2 id="3-3-执行结果"><a href="#3-3-执行结果" class="headerlink" title="3.3 执行结果"></a>3.3 执行结果</h2><p>运行中：</p>
<img src="/2020/02/29/Python-OpenCV-dlib实现视频中的人脸检测/5.png" title="git">
<p>运行结果：</p>
<img src="/2020/02/29/Python-OpenCV-dlib实现视频中的人脸检测/6.png" title="git">
<h1 id="四、实验总结"><a href="#四、实验总结" class="headerlink" title="四、实验总结"></a>四、实验总结</h1><hr>
<p>1、本实验是本人第一次接触 机器学习/计算机视觉 相关方面的程序设计，代码设计稍显稚嫩，整体架构稍显不足，但途中查阅了不少相关文档，提高了本人的程序设计能力，以及对计算机视觉方面的了解。</p>
<p>2、本实验通过不断的整改，能较好完成人脸的识别、获取较为清晰的人脸截图。但仍存在诸多不足之处：首先，由于计算量庞大，使得程序运行速度稍慢，影响用户体验；其次，人脸相似度对比方面识别度一般，比如同一个人在不同表情或光线下会被认为是两个人。本人试过调整人脸距离阈值，但效果依然不理想。</p>
<p>3、希望在以后的学习工作生涯中能不断丰富专业知识，不断完善整改此项目，尤其在人脸对比的算法，以及程序性能方面能做的更好。</p>
<h1 id="五、源代码"><a href="#五、源代码" class="headerlink" title="五、源代码"></a>五、源代码</h1><hr>
<p>链接：<a href="https://pan.baidu.com/s/1CAFBduNjfKZmC_uRDccCkw" target="_blank" rel="noopener">https://pan.baidu.com/s/1CAFBduNjfKZmC_uRDccCkw</a><br>提取码：s31w</p>
]]></content>
      
        
        <tags>
            
            <tag> 实践经验 </tag>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下MPI并行编程环境搭建与程序测试]]></title>
      <url>/2019/12/30/Linux%E4%B8%8BMPI%E5%B9%B6%E8%A1%8C%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%A8%8B%E5%BA%8F%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h2 id="一、MPI简介"><a href="#一、MPI简介" class="headerlink" title="一、MPI简介"></a>一、MPI简介</h2><p>MPI是一个跨语言的通讯协议，用于编写并行计算机。支持点对点和广播。MPI是一个信息传递应用程序接口，包括协议和和语义说明，他们指明其如何在各种实现中发挥其特性。MPI的目标是高性能，大规模性，和可移植性。MPI在今天仍为高性能计算的主要模型。<br>MPI涉及以下四种基本函数：</p>
<a id="more"></a>
<p>（1）MPI_Init：用来初始化MPI执行环境，建立多个MPI进程之间的联系，为后续通信做准备。<br>（2）MPI_Finalize：结束MPI执行环境。<br>（3）MPI_Comm_rank：就是来标识各个MPI进程的，告诉调用该函数的进程“我是谁”，返回整型的错误值，需要提供两个函数参数：MPI_Comm类型的通信域，标识参与计算的MPI进程组。<br>（4）MPI_Comm_size：本函数则用来标识相应进程组中有多少个进程</p>
<h2 id="二、环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a>二、环境配置</h2><h1 id="2-1系统环境准备"><a href="#2-1系统环境准备" class="headerlink" title="2.1系统环境准备"></a>2.1系统环境准备</h1><p>Windows10 + Vmware + CentOS7<br>（1）使用Vmware虚拟出一台CentOS7操作系统的Linux虚拟机。<br>（2）配置ip地址：进入网络配置文件/etc/sysconfig/network-scripts/ifcfg-ens33设置虚拟机的ip地址为192.168.3.11，如下图所示：</p>
<img src="/2019/12/30/Linux下MPI并行编程环境搭建与程序测试/1.png" title="IP">
<img src="/2019/12/30/Linux下MPI并行编程环境搭建与程序测试/2.png" title="IP2">
<h1 id="2-2-实验环境安装"><a href="#2-2-实验环境安装" class="headerlink" title="2.2 实验环境安装"></a>2.2 实验环境安装</h1><p>（1）官网下载源代码MPI文件mpich-3.3.2.tar.gz。<br>（2）MP文件I(mpich-3.3.2.tar.gz)的导入：<br>新建并打开文件夹/home/mpi/mpich2，将压缩文件导入其中（本人使用Xftp工具）<br>（3）解压MPI源码：<br>i.使用命令cd /home/mpi/mpich2/进入文件目录。<br>ii.使用命令tar xzvf mpich-3.3.2.tar.gz解压缩包。解压后目录如下：</p>
<img src="/2019/12/30/Linux下MPI并行编程环境搭建与程序测试/3.png" title="MPI">
<p>（4）使用如下指令配置编译环境：<br>./configure –prefix=/home/mpi/mpich3（期间系统提示未安装编译器，使用yum install gcc命令安装C编译器；提示未安装f77，可在命令末尾加上–disable-fortran）<br>（5）编译以及安装，输入命令：<br>make &amp;&amp; make install（也可分开输入）<br>完成mpi编译以及安装。</p>
<h1 id="2-3-环境变量的配置"><a href="#2-3-环境变量的配置" class="headerlink" title="2.3 环境变量的配置"></a>2.3 环境变量的配置</h1><p>（1）键入cd进入根目录，输入vi .bashrc进入环境变量配置，添加环境变量：<br>export PATH=/home/mpi/mpich2/bin:$PATH<br>再键入source .bashrc使得配置生效。<br>（2）键入echo $PATH查看当前环境变量，显示如下图：</p>
<img src="/2019/12/30/Linux下MPI并行编程环境搭建与程序测试/4.png" title="ECHO">
<p>（3）查看命令是否是我们安装目录下的命令，如下图所示，则配置成功。</p>
<img src="/2019/12/30/Linux下MPI并行编程环境搭建与程序测试/5.png" title="CHECK">

<h2 id="三、实验过程"><a href="#三、实验过程" class="headerlink" title="三、实验过程"></a>三、实验过程</h2><h1 id="3-1-编写并运行HelloWord并行程序"><a href="#3-1-编写并运行HelloWord并行程序" class="headerlink" title="3.1 编写并运行HelloWord并行程序"></a>3.1 编写并运行HelloWord并行程序</h1><p>（1）创建hello.c文件，放入home文件夹中，文件内容如下：</p>
<pre><code>/*hello.c*/
#include &lt;stdio.h&gt;
#include &quot;mpi.h&quot;

int main( int argc, char *argv[] )
{
    int rank;
    int size;
    MPI_Init( 0, 0 );
    MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);
    MPI_Comm_size(MPI_COMM_WORLD, &amp;size);
    printf( &quot;Hello world from process %d of %d\n&quot;, rank, size );
    MPI_Finalize();
    return 0;
}
（2）编译MPI程序：
mpicc -o hello hello.c
（3）执行MPI程序：
mpiexec  -np  4  ./hello  //此处表示开启4个进程
（4）执行结果：</code></pre><img src="/2019/12/30/Linux下MPI并行编程环境搭建与程序测试/6.png" title="HELLO">


<h1 id="3-2-编写mpi并行程序计算π的值"><a href="#3-2-编写mpi并行程序计算π的值" class="headerlink" title="3.2 编写mpi并行程序计算π的值"></a>3.2 编写mpi并行程序计算π的值</h1><p>（1）创建pi.cpp文件，放入home文件夹中，文件内容如下：</p>
<pre><code>#include &quot;mpi.h&quot;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
double f(double);
double f(double a)
{
    return (4.0/(1.0 + a*a));
} 
int main(int argc, char *argv[])
{
    int done = 0, n, myid, numprocs, i;
    double PI25DT = 3.141592653589793238462643;
    double mypi, pi, h, sum, x;
    double startwtime = 0.0, endwtime;
    int namelen;
    char processor_name[MPI_MAX_PROCESSOR_NAME];
    MPI_Init(&amp;argc, &amp;argv);  //mpi的初始化
    MPI_Comm_size(MPI_COMM_WORLD, &amp;numprocs);  //获取线程数
    MPI_Comm_rank(MPI_COMM_WORLD, &amp;myid);  //获取线程id值
    MPI_Get_processor_name(processor_name, &amp;namelen);  //获取处理器名称
    fprintf(stderr, &quot;Process %d on %s\n&quot;, myid, processor_name);
    n = 0;
    while(!done)
    {
        if(myid == 0)
        {
            if(n == 0)
                n = 100;
            else
                n = 0;
            startwtime = MPI_Wtime();
        }
        MPI_Bcast(&amp;n, 1, MPI_INT, 0, MPI_COMM_WORLD);  //进行广播传送消息
        if(n == 0)
            done = 1;
        else
        {
            h = 1.0/(double)n;
            sum = 0.0;
            for(i=myid+1; i&lt;=n; i+=numprocs)  //各线程计算自己的面积
            {
                x = h * ((double)i - 0.5);
                sum += f(x);
            }
            mypi = h * sum;
            MPI_Reduce(&amp;mypi, &amp;pi, 1, MPI_DOUBLE, MPI_SUM, 0,                                 MPI_COMM_WORLD);   //归约，mypi为发送方，pi为接收方
            if(myid == 0)
            {
                printf(&quot;pi is approximately %.16f,Error is %.16f\n&quot;,pi, fabs(pi-PI25DT));
                endwtime = MPI_Wtime();
                printf(&quot;wall clock time = %f\n&quot;, endwtime-startwtime);
            }
        }
    }
    MPI_Finalize();   //mpi结束
    return 0;
}</code></pre><p>（2）编译MPI程序：</p>
<pre><code>mpicc -o pi  pi.cpp</code></pre><p>（3）执行MPI程序：</p>
<pre><code>mpiexec  -np  4  ./pi  //此处表示开启4个进程</code></pre><p>（4）执行结果：</p>
<img src="/2019/12/30/Linux下MPI并行编程环境搭建与程序测试/7.png" title="PAI">



<h1 id="3-3-编写mpi程序模拟进程间数据接力传送的过程"><a href="#3-3-编写mpi程序模拟进程间数据接力传送的过程" class="headerlink" title="3.3 编写mpi程序模拟进程间数据接力传送的过程"></a>3.3 编写mpi程序模拟进程间数据接力传送的过程</h1><p>（1）创建pass.c文件，放入home文件夹中，文件内容如下：</p>
<pre><code>#include &lt;stdio.h&gt;
#include &quot;mpi.h&quot;

 int main(int argc, char *argv[])
  {
      int rank, value, size;
      MPI_Status status;
      MPI_Init(&amp;argc, &amp;argv);
      MPI_Comm_rank(MPI_COMM_WORLD,&amp;rank);               MPI_Comm_size(MPI_COMM_WORLD, &amp;size);      
do {
         if (rank==0) {
//输入传递的数值
             fprintf(stderr, &quot;\nPlease give new value=&quot;);
             scanf(&quot;%d&quot;,&amp;value);
             fprintf(stderr, &quot;%d read &lt;-&lt;- (%d)\n&quot;,rank,value);
             /*必须至少有两个进程的时候 才能进行数据传递*/
             if (size&gt;1) {
                 MPI_Send(&amp;value, 1, MPI_INT, rank+1, 0, MPI_COMM_WORLD);
                 fprintf(stderr, &quot;%d send (%d)-&gt;-&gt; %d\n&quot;, rank,value,rank+1);
             }
         }
         else {
             MPI_Recv(&amp;value, 1, MPI_INT, rank-1, 0, MPI_COMM_WORLD, &amp;status);
             fprintf(stderr, &quot;%d receive(%d)&lt;-&lt;- %d\n&quot;,rank, value, rank-1);
             if (rank&lt;size-1) {
                 MPI_Send(&amp;value, 1, MPI_INT, rank+1, 0, MPI_COMM_WORLD);
                 fprintf(stderr, &quot;%d send (%d)-&gt;-&gt; %d\n&quot;, rank, value, rank+1);
             }
         }
         MPI_Barrier(MPI_COMM_WORLD);
     }while(value&gt;=0);
     MPI_Finalize();
 }</code></pre><p>（2）编译MPI程序：</p>
<pre><code>mpicc -o pass  pass.cpp</code></pre><p>（3）执行MPI程序：</p>
<pre><code>mpiexec  -np  4  ./pass  //此处表示开启4个进程</code></pre><p>（4）执行结果：<br>    从执行结果可知数字的传播途径，进程0——&gt;1——&gt;2——&gt;3</p>
<img src="/2019/12/30/Linux下MPI并行编程环境搭建与程序测试/8.png" title="PASS">]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MPI </tag>
            
            <tag> 并行编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android开发，使用okhttp实现图片上传到服务器的功能，及故障排除]]></title>
      <url>/2019/10/30/Android%E5%BC%80%E5%8F%91%EF%BC%8C%E4%BD%BF%E7%94%A8okhttp%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%8A%9F%E8%83%BD%EF%BC%8C%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<h1 id="一、源代码"><a href="#一、源代码" class="headerlink" title="一、源代码"></a>一、源代码</h1><h2 id="1、MainActivity"><a href="#1、MainActivity" class="headerlink" title="1、MainActivity"></a>1、MainActivity</h2><a id="more"></a>
<pre><code>package com.example.image_test;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class MainActivity extends AppCompatActivity {
    private ImageView photo;
    private String uploadFileName;
    private byte[] fileBuf;
    private String uploadUrl = &quot;http://192.168.3.2:8000/upload&quot;;
    private Button button1;
    private Button button2;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        photo = findViewById(R.id.photo);
        button1 = findViewById(R.id.button1);
        button2 = findViewById(R.id.button2);
        button1.setOnClickListener(new View.OnClickListener() {
               @Override
            public void onClick(View v) {
                select(v);
            }
        });
        button2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try{
                    upload(v);}
                catch(Exception e){
                    e.printStackTrace();}
            }
        });
    }

    //按钮点击事件
    public void select(View view) {
        String[] permissions = new String[]{
            Manifest.permission.WRITE_EXTERNAL_STORAGE
        };
           //进行sdcard的读写请求
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, permissions, 1);
        } else {
            openGallery(); //打开相册，进行选择
        }
    }


    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case 1:
                if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    openGallery();
                } else {
                    Toast.makeText(this, &quot;读相册的操作被拒绝&quot;, Toast.LENGTH_LONG).show();
                }
        }
    }

    //打开相册,进行照片的选择
    private void openGallery() {
        Intent intent = new Intent(&quot;android.intent.action.GET_CONTENT&quot;);
        intent.setType(&quot;image/*&quot;);
        startActivityForResult(intent, 1);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case 1:
                handleSelect(data);
        }
    }

    //选择后照片的读取工作
    private void handleSelect(Intent intent) {
        Cursor cursor = null;
        Uri uri = intent.getData();
        cursor = getContentResolver().query(uri, null, null, null, null);
        if (cursor.moveToFirst()) {
            int columnIndex = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DISPLAY_NAME);
            uploadFileName = cursor.getString(columnIndex);
        }
        try {
            InputStream inputStream = getContentResolver().openInputStream(uri);
            fileBuf=convertToBytes(inputStream);
            Log.i(&quot;aaaaa&quot;,fileBuf.toString());
            Bitmap bitmap = BitmapFactory.decodeByteArray(fileBuf, 0, fileBuf.length);
            photo.setImageBitmap(bitmap);
        } catch (Exception e) {
            e.printStackTrace();
        }
        cursor.close();
    }

    //文件上传的处理
    public void upload(View view) {
        new Thread() {
            @Override
            public void run() {
                OkHttpClient client = new OkHttpClient();
                //上传文件域的请求体部分
                RequestBody formBody = RequestBody
                        .create(fileBuf, MediaType.parse(&quot;image/jpg&quot;));
                //整个上传的请求体部分（普通表单+文件上传域）
                RequestBody requestBody = new MultipartBody.Builder()
                        .setType(MultipartBody.FORM)
                        .addFormDataPart(&quot;title&quot;, &quot;Square Logo&quot;)
                        //filename:avatar,originname:abc.jpg
                        .addFormDataPart(&quot;avatar&quot;, uploadFileName, formBody)
                        .build();
                Request request = new Request.Builder()
                        .url(uploadUrl)
                        .post(requestBody)
                        .build();
                try {
                    Response response = client.newCall(request).execute();
                    Log.i(&quot;数据&quot;, response.body().string() + &quot;....&quot;);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }.start();
    }


    private byte[] convertToBytes(InputStream inputStream) throws Exception{
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buf = new byte[1024];
        int len = 0;
        while ((len = inputStream.read(buf)) &gt; 0) {
            out.write(buf, 0, len);
        }
        out.close();
        inputStream.close();
        return  out.toByteArray();
        }
    }</code></pre><h2 id="2、AndroidManifest"><a href="#2、AndroidManifest" class="headerlink" title="2、AndroidManifest"></a>2、AndroidManifest</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    package=&quot;com.example.image_test&quot;&gt;
    &lt;application
        android:allowBackup=&quot;true&quot;
        android:icon=&quot;@mipmap/ic_launcher&quot;
        android:label=&quot;@string/app_name&quot;
        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;
        android:supportsRtl=&quot;true&quot;
        android:theme=&quot;@style/AppTheme&quot;&gt;
        &lt;activity android:name=&quot;.MainActivity&quot;&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;
                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;
    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;
    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;
&lt;/manifest&gt;</code></pre><h2 id="3、layout-activity-main"><a href="#3、layout-activity-main" class="headerlink" title="3、layout: activity_main"></a>3、layout: activity_main</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    android:padding=&quot;10dp&quot;
    android:orientation=&quot;vertical&quot;&gt;
    &lt;ImageView
        android:id=&quot;@+id/photo&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;0dp&quot;
        android:layout_weight=&quot;5&quot;/&gt;
    &lt;ImageView
        android:id=&quot;@+id/photo2&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;0dp&quot;
        android:layout_weight=&quot;5&quot;/&gt;
    &lt;Button
        android:id=&quot;@+id/button1&quot;
        android:text=&quot;选择图片&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;wrap_content&quot;/&gt;
    &lt;Button
        android:id=&quot;@+id/button2&quot;
        android:text=&quot;上传图片&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;wrap_content&quot;/&gt;
&lt;/LinearLayout&gt;</code></pre><h2 id="4、biuld-gradle：-dependencies"><a href="#4、biuld-gradle：-dependencies" class="headerlink" title="4、biuld.gradle： dependencies"></a>4、biuld.gradle： dependencies</h2><pre><code>dependencies {
    implementation fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])
    implementation &apos;androidx.appcompat:appcompat:1.0.2&apos;
    implementation &apos;androidx.constraintlayout:constraintlayout:1.1.3&apos;
    testImplementation &apos;junit:junit:4.12&apos;
    androidTestImplementation &apos;androidx.test.ext:junit:1.1.0&apos;
    androidTestImplementation &apos;androidx.test.espresso:espresso-core:3.1.1&apos;
    implementation &apos;com.squareup.okhttp3:okhttp:4.2.1&apos;
    testImplementation(&quot;com.squareup.okhttp3:mockwebserver:4.2.1&quot;)
}</code></pre><h1 id="二、本地服务端口搭建"><a href="#二、本地服务端口搭建" class="headerlink" title="二、本地服务端口搭建"></a>二、本地服务端口搭建</h1><h2 id="1、文件结构："><a href="#1、文件结构：" class="headerlink" title="1、文件结构："></a>1、文件结构：</h2><pre><code>/
  app.js
  -public/
       index.html
      +images/ 
  +uploads/
  +node_modules/
  package.json</code></pre><h2 id="2、package-json的依赖部分"><a href="#2、package-json的依赖部分" class="headerlink" title="2、package.json的依赖部分"></a>2、package.json的依赖部分</h2><pre><code>&quot;dependencies&quot;: {
   &quot;express&quot;: &quot;^4.17.1&quot;,
   &quot;multer&quot;: &quot;^1.4.2&quot;
 }</code></pre><h2 id="3、app-js的内容"><a href="#3、app-js的内容" class="headerlink" title="3、app.js的内容"></a>3、app.js的内容</h2><pre><code>//app.js
const fs=require(&apos;fs&apos;)
const express=require(&apos;express&apos;)
const http=require(&apos;http&apos;)
//文件上传中间件(指定上传的临时文件夹是/uploads)
const multer=require(&apos;multer&apos;)
let upload = multer({ dest: &apos;uploads/&apos; })
let app=express();
const FILE_PATH=&quot;public/images/&quot;
//HttpServer服务的中间件(public目录下的index.html为首页)
app.use(express.static(&apos;public&apos;))
//文件上传的处理（avatar是上传时的filedName）
app.post(&apos;/upload&apos;, upload.single(&apos;avatar&apos;), function (req, res, next) {
    //req.body是普通表单域
    //req.file是文件域
    let msg={
        body:req.body,
        file:req.file
    }
    //将临时文件上传到/public/images中
    let output=fs.createWriteStream(FILE_PATH+req.file.originalname)
    let input=fs.createReadStream(req.file.path)
    input.pipe(output)
    res.json(msg)
})
//接收前端的请求，返回上传图片的列表
app.get(&quot;/files&quot;,function (req,res) {
    fs.readdir(&apos;public/images&apos;,function (err,dir) {
        res.json(dir)
    })
})
//启动Express服务器
let server=http.createServer(app);
server.listen(8000,function () {
    console.log(&quot;start server at port 8000&quot;)
})</code></pre><h2 id="4、-public-index-html的内容："><a href="#4、-public-index-html的内容：" class="headerlink" title="4、/public/index.html的内容："></a>4、/public/index.html的内容：</h2><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
    &lt;script src=&quot;https://cdn.bootcss.com/vue/2.6.10/vue.min.js&quot;&gt;&lt;/script&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        li{
            list-style: none;
            display: inline-block;
        }
        li img{
            margin: 10px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;您上传的照片墙&lt;/h1&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;ul&gt;
            &lt;li v-for=&quot;img of images&quot;&gt;
                &lt;img :src=&quot;&apos;images/&apos;+img&quot; alt=&quot;&quot; width=&quot;300px&quot;&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
    &lt;script&gt;
        new Vue({
            el:&apos;#app&apos;,
            data:{
                images:[]
            },
            created(){
                fetch(&quot;/files&quot;,{method:&apos;GET&apos;})
                    .then(res=&gt;res.json())
                    .then(files=&gt;{
                        this.images.push(...files)
                    })
            }
        })
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h1 id="三、排除故障"><a href="#三、排除故障" class="headerlink" title="三、排除故障"></a>三、排除故障</h1><ul>
<li><p>上述代码都是已经调好的准确无误的，下面写下一些debug过程之中容易遇到的一些故障及解决方式：</p>
</li>
<li><p>1、java.net.SocketException: Permission denied:</p>
</li>
</ul>
<p>Solution：获取mac地址需要网络权限。在AndroidManifest.xml中，进行如下配置： </p>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></pre><ul>
<li>2、java.net.ConnectException: Failed to connect to localhost/127.0.0.1:8000：</li>
</ul>
<p>Solution：将本机网络地址去替代localhost就可以解决此问题。如将<a href="http://localhost:8000/upload" target="_blank" rel="noopener">http://localhost:8000/upload</a> 改成 <a href="http://192.168.3.2:8000/upload" target="_blank" rel="noopener">http://192.168.3.2:8000/upload</a><br>Ps：本机网络地址查询方式：命令行输入ipconfig，查询即可。</p>
<ul>
<li><p>3、出现如下错误：说明已经成功连接到本地但是，图片无法上传。</p>
<pre><code>数据: &lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Error&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;pre&gt;Cannot POST /&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
....</code></pre></li>
</ul>
<p>Solution：将<a href="http://192.168.3.2:8000/" target="_blank" rel="noopener">http://192.168.3.2:8000/</a> 改成 <a href="http://192.168.3.2:8000/upload" target="_blank" rel="noopener">http://192.168.3.2:8000/upload</a></p>
]]></content>
      
        
        <tags>
            
            <tag> debug </tag>
            
            <tag> Android </tag>
            
            <tag> OkHttp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Note-of-JavaSE_3_继承]]></title>
      <url>/2019/10/15/Node-of-JavaSE%EF%BC%883%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Day07-继承"><a href="#Day07-继承" class="headerlink" title="Day07__继承"></a>Day07__继承</h1><p>【1】继承的好处：<br>（1）提高了代码的复用性。<br>（2）让类与类产生关系，有了这个关系，才有了多态的特性。举例：人、学生、工人。</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"good study"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"good work"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【2】注意：千万不要为了获取其他类的功能，简化代码而继承。必须是类与类之间有所属关系才可以继承。<br>【3】Java语言中：java只支持单继承，不支持多继承。因为多继承容易带来安全隐患：当多个父类中定义了相同的功能。当功能内容不同时，子类对象不确定要运行哪一个。但是java保留了这种机制。<br>【4】java支持多层继承，也就是一个继承体系。想要使用体系，先查阅体系父类的描述，因为父类中定义的是该体系中的共性功能。通过了解共性功能，就可以知道该体系的基本功能。那么这个体系几经可以基本使用了。那么在具体调用时，要创建最子类的对象。为什么呢？（1）有可能父类不能创建对象。（2）创建子类可以使用更多的功能，包括基本的和特有的。简单一句话：查阅父类功能，创建子类对象使用功能。<br>【5】聚集：has a； 聚合：球队中有球员；组合：事物联系更紧密，如人体各器官。<br>【6】super表示父类对象的引用；this表示子类对象的引用；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="keyword">super</span>.num);<span class="comment">//打印结果为4</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">		z.show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【7】当子类出现和父类一模一样的函数时，当子类对象调用该函数，会运行子类函数的内容。<br>如同父类的函数被覆盖一样。<br>这种情况是函数的另一个特性：重写（覆盖）<br>【8】当子类继承父类时，沿袭了父类的功能，到子类中，但是子类具备该功能，但是功能的内容却和父类不一致。这时，没必要定义新的功能，而是使用覆盖，保留父类的功能定义，并重写功能内容。如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(“vb”);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(“java”);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【9】注意事项：（1）必须保证子类权限大于等于父类权限，才可以覆盖，否则编译失败。<br>（2）静态只能覆盖静态。<br>【10】重载：只看同名函数的参数列表。重写（覆盖）：子父类方法要一模一样。<br>【11】在对子类对象进行初始化时，父类的构造函数也会运行，那是因为子类的构造函数默认第一行有一条隐式的语句：super ();</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	Fu()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">"fu run"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	Zi()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//supper();</span></span><br><span class="line">		System.out.println(<span class="string">"zi run"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	Zi(<span class="keyword">int</span> num)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//super();</span></span><br><span class="line">		System.out.println(<span class="string">"zi...."</span> + num);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo4</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Zi z = <span class="keyword">new</span> Zi ();</span><br><span class="line">		Zi zi = <span class="keyword">new</span> Zi (<span class="number">6</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行该代码，将会显示:</p>
<p>【12】当父类中没有构造函数Fu()，只有带参数的如Fu(int num)，则子类必须显式引用，添加语句如：super(6); 且super语句必须放在子类的构造函数第一行。<br>【13】为什么子类一定要访问父类中的构造函数？因为父类中的数据子类可以直接获取，所以子类对象在建立时，需要看父类对象是如何对这些数据进行初始化的。<br>【14】final: 最终，作为一个修饰符，<br>（1）可以修饰类，函数，变量。<br>（2）被final修饰的类不可以被继承。为了避免被继承，被子类复写功能。<br>（3）被final修饰的方法不能被复写（重写、覆盖）。<br>（4）被final修饰的变量是一个常量只能赋值一次，既可以修饰成员变量，又可以修饰局部变量。（用于固定的数值赋值，如Π；常量的书写规范，所有字母大写如：PI）<br>（5）内部类定义在类中的局部位置上时，只能访问该局部被final修饰的局部变量。<br>【15】当多个类出现相同功能，但是功能主题不同，这时可以进行向上抽取。这时，只抽取功能定义，而不抽取功能主题。<br>【16】抽象：看不懂。抽象类的特点：<br>（1）抽象方法一定在抽象类中。<br>（2）抽象方法和抽象类都必须被abstract关键字修饰。<br>（3）抽象类不可以用new创建对象，因为调用抽象方法没意义。<br>（4）抽象类中的方法要被使用必须由子类复写起所有的抽象方法后，建立子类对象调用。如果子类只覆盖了部分抽象方法，那么该子类还是一个抽象类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseStudent</span> <span class="keyword">extends</span> <span class="title">Students</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"base study"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdvStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"adv study"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特殊：抽象类中可以不定义抽象方法，这样做仅仅时不让该类建立对象。<br>【17】案例分析：加入我们在开发一个系统时要对员工进行建模，员工包含三个属性：姓名，工号，工资。经理也是员工，除了含有员工的属性外，另外还有奖金属性。使用继承的方法设计出员工类和经理类。提供必要的方法进行属性访问。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String id;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> pay;</span><br><span class="line">	Employee(String name, String id, <span class="keyword">double</span> pay)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.pay = pay;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> bonus;</span><br><span class="line">	Manager(String name, String id, <span class="keyword">double</span> pay, <span class="keyword">int</span> bonus)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">super</span>(name,id,pay);</span><br><span class="line">		<span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"manager work"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pro</span> <span class="keyword">extends</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	Pro(String name, String id, <span class="keyword">double</span> pay, <span class="keyword">int</span> bonus)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">super</span>(name,id,pay);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Pro work"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【18】模板方法设计模式：<br>需求：获取一段程序运行时间。<br>原理：获取程序开始和结束的时间相减即可。<br>获取时间：System.currentTimeMillis();<br>当代码完成优化后，就可以解决这类问题。<br>这种方法叫做模板方法设计模式。<br>什么是模板方法：定义功能时，功能的一部分时确定的，但是有一部分是不确定的，而确定的部分在使用不确定的部分，那么这时就将不确定的部分暴露出去，由该类的子类来完成。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GetTime</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">getTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">		runcode();</span><br><span class="line">		<span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">		System.out.println(<span class="string">"毫秒："</span>+(end-start));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">runcode</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubTime</span> <span class="keyword">extends</span> <span class="title">GetTime</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runcode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">4000</span>; x++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TempLateDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//GetTime gt = new GetTime();</span></span><br><span class="line">		SubTime gt = <span class="keyword">new</span> SubTime();</span><br><span class="line">		gt.getTime();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【19】接口：可以认为是一个特殊的抽象类，当抽象类中的方法都是抽象的，那么该类可以通过接口的形式来表示，关键字：interface<br>接口定义时，格式特点：<br>1、接口中常见定义：常量、抽象方法。<br>2、接口中的成员都有固定修饰符。<br>常量：public static final int NUM =3;<br>方法：public abstract<br>记住：接口中的成员都是public的。<br>接口是不可以创建对象的，因为由抽象方法。<br>需要被子类实现，子类对接口中的抽象方法全部覆盖后，子类才可以实例化。<br>否则子类是一个抽象类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM = <span class="number">3</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Inter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfaceTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Test t = <span class="keyword">new</span> Test();</span><br><span class="line">		Systen.out.println(t.NUM);</span><br><span class="line">		System.out.println(Test.NUM);</span><br><span class="line">		System.out.println(INTER.NUM);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【20】接口可以被类多实现，也是对多继承不支持的转换形式。java支持多实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM = <span class="number">3</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Inter</span>, <span class="title">InterA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【21】接口也可以继承接口：(JAVA只有在接口与接口之间存在多继承，类与类之间只支持单继承)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span>,<span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">methodC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodC</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【22】接口的特点：</p>
<p>基本功能定义在类中，扩展功能定义在接口中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"sleep"</span>)；</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Smoking</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">smoke</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhangSan</span> <span class="keyword">extends</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Smoking</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	<span class="function">punlic <span class="keyword">void</span> <span class="title">smoke</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【23】多态：事物存在的多种表现形态。如：人：男人、女人。动物：猫、狗。猫 x = new();<br>动物 x = new();</p>
<p>Day8</p>
<p>【1】多态：可以理解为事物存在的多种体现形态。<br>多态的体现：<br>父类的引用指向了自己子类的对象。<br>父类的引用也可以接收自己的子类对象。<br>多态的前提：<br>必须是类与类之间有联系，要么继承，要么实现。<br>通常还有一个前提：存在覆盖。<br>多态的好处：<br>多态的出现大大提高了程序的扩展性。<br>多态的弊端：<br>提高了扩展性，但是只能使用父类的引用访问父类中的成员<br>多态的应用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"吃鱼"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"吃骨头"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuoTaiDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		function(<span class="keyword">new</span> Cat());</span><br><span class="line">		function(<span class="keyword">new</span> Dog());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">(Animal a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		a.eat();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【2】类型提升（向上转型）,如：Animal a = new Cat();<br>当想要调用猫的特有方法时，向下转型：强制将父类的引用转成子类类型：<br>Cat c = (Cat) a;  c.catchMouse();<br>可以将猫转化为动物，但是不可以将动物转化成猫。即不可以将父类转化成子类类型。<br>多态自始至终都是子类在变化。<br>【3】instanceof关键字的用法，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">(Animal a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a.eat();</span><br><span class="line">	<span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">"抓老鼠"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">"看家"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL性能分析——EXPLAIN使用指南]]></title>
      <url>/2019/10/07/MySQL%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E2%80%94%E2%80%94EXPLAIN%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<h1 id="一、EXPLIAN——简介"><a href="#一、EXPLIAN——简介" class="headerlink" title="一、EXPLIAN——简介"></a>一、EXPLIAN——简介</h1><hr>
<p>使用EXPLAIN关键字可以来获取关于查询执行计划的信息。可以模拟优化器执行SQL查询语句，从而知道<strong>MySQL是如何处理SQL语句</strong>的。</p>
<ul>
<li>用法：<strong>EXPLAIN + SQL语句；</strong>，或者去掉分号加上\G表示竖版显示。</li>
<li>返回：查询执行计划所包含的信息（如：<strong>id</strong>、<strong>select_type</strong>、<strong>table</strong>、<strong>type</strong>、<strong>possible_keys</strong>、<strong>key</strong>、<strong>key_len</strong>、<strong>ref</strong>、<strong>rows</strong>、<strong>Extra</strong>）<a id="more"></a></li>
<li>其中，<strong>id</strong>、 <strong>type</strong>、 <strong>key</strong>、 <strong>rows</strong>、 <strong>Extra</strong>是最重要的字段属性。</li>
<li>EXPLIAN能做的事:<br>（1）获取表的读取顺序（id）。<br>（2）获取数据读取操作的操作类型（select_type）。<br>（3）表明哪些索引可以使用（possible_keys）。<br>（4）表明哪些索引被实际使用（key）。<br>（5）表之间的引用（ref）。<br>（6）每张表有多少行被优化器查询（rows）。 </li>
</ul>
<h1 id="二、id——介绍"><a href="#二、id——介绍" class="headerlink" title="二、id——介绍"></a>二、id——介绍</h1><hr>
<ul>
<li>EXPLIAN查询执行计划中的第一个参数id（查询标识符）主要反映的是表的加载顺序，其具体加载顺序的确定，分成以下三种情况：</li>
</ul>
<p>（1）id相同：执行顺序从上到下。</p>
<pre><code>EXPLAIN SELECT employees.emp_no, first_name, last_name, from_date, to_date
FROM departments, dept_emp, employees
WHERE dept_name=&apos;Development&apos; AND departments.dept_no=dept_emp.dept_no AND dept_emp.emp_no=employees.emp_no;</code></pre><img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/1.png" title="explain1">
<p>（如从上述执行计划中，可知三张表的读取从上到下顺序执行）</p>
<p>（2）id不同：id越大优先级越高，越先被执行。<br>（3）id有相同有不同的：先执行数字大的，其中数字大小相同的则顺序执行。</p>
<pre><code>EXPLAIN SELECT *
FROM
(SELECT employees.emp_no, first_name, last_name, from_date, to_date, salary
FROM employees, salaries
WHERE employees.emp_no=salaries.emp_no
ORDER BY emp_no, salary DESC) as A
GROUP BY A.emp_no;</code></pre><img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/2.png" title="explain2">
<p>（如上述执行计划中，可知先读取id为2的表，并按顺序执行；再读取id为1的&lt;derived2&gt;，即id为2的表的衍生表）</p>
<h1 id="三、select-type与table——介绍"><a href="#三、select-type与table——介绍" class="headerlink" title="三、select_type与table——介绍"></a>三、select_type与table——介绍</h1><hr>
<ul>
<li><p>select_type: 查询的类型，主要是用于区别是普通查询、联合查询、子查询等复杂的查询。</p>
</li>
<li><p>所有类型：<br>（1）SIMPLE: 简单的select查询，查询中不包括子查询或者UNION。<br>（2）PRIMARY: 查询中包含任何复杂的子部分，最外层查询则被标记为PRIMARY。<br>（3）SUBQUERY: 在SELECT或WHERE列表中包含了子查询（即子查询，括号中的）。<br>（4）DERIVED: 在FROM列表中包含的子查询被标记为DERIVED（衍生）,MySQL会递归执行这些子查询，把结果放在临时表里（临时表可能加重系统负担）。<br>（5）UNOIN: 若第二个SELECT出现在UNION之后，则被标记为UNION;若UNION包含在FROM子句的子查询中，外层SELECT将被标记为：DERIVED。<br>（6）UNION RESULT: 从UNOIN表获取结果的SELECT（两个表合并的结果）。</p>
</li>
<li><p>table: 即所读取的表。</p>
</li>
</ul>
<h1 id="四、type——介绍"><a href="#四、type——介绍" class="headerlink" title="四、type——介绍"></a>四、type——介绍</h1><hr>
<ul>
<li>type：显示的是访问类型，是一个较为重要的指标，结果值从好到坏依次是：</li>
</ul>
<p><strong>system</strong> &gt; <strong>const</strong> &gt; <strong>eq_ref</strong> &gt; <strong>ref</strong> &gt; <strong>fulltext</strong> &gt; <strong>ref_or_null</strong> &gt; <strong>index_merge</strong> &gt; <strong>unique_subquery</strong> &gt; <strong>index_subquery</strong> &gt; <strong>range</strong> &gt; <strong>index</strong> &gt; <strong>ALL</strong></p>
<ul>
<li>在实际工作中，经常碰到的是如下几种常见的访问类型：</li>
</ul>
<p><strong>system</strong> &gt; <strong>const</strong> &gt; <strong>eq_ref</strong> &gt; <strong>ref</strong> &gt; <strong>range</strong> &gt; <strong>index</strong> &gt; <strong>ALL</strong></p>
<ul>
<li>一般来说，需要保证查询至少达到<strong>range</strong>级别，最好能到达<strong>ref</strong>。</li>
<li>常用类型详解：<br>（1）<strong>system</strong>: 表只有一行记录（等于系统表），这是const类型的特例，平时不会出现，可以忽略不计。<br>（2）<strong>const</strong>: 表示通过索引一次就找到了，const用于比较primary key或者unique索引。因为匹配一行数据，如将主键至于where列表中，MySQL就能将该查询转换成一个常量（如查询学号为10020的学生信息，该查询条件具有唯一性）。<br>（3）<strong>eq_ref</strong>: 唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或者唯一索引扫描。（比如SELECT * FROM ceo, employees WHERE ceo.id=employees.id;由于总裁办只有一名员工,即CEO,因此表ceo中只有一条记录与employees匹配)<br>（4）<strong>ref</strong>: 非唯一性索引扫描，返回某个单独值得所有行，本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而它可能会找到多个符合条件的行，所以它应该属于查找和扫描的混合体。（上一条是查CEO，这一条改为查询开发部的程序员，因为开发部的程序员有多个）<br>（5）<strong>range</strong>: 只检索指定范围的行，使用一个索引来选择行。key列显示使用了哪个索引。<strong>一般就是在你的where语句中出现了between、 &lt;、 &gt;、 in等的查询</strong>。这种范围扫描索引扫描比全表扫描好，因为只需开始于索引的某一点，而结束于另一点，不用扫描全部索引。<br>（6）<strong>index</strong>: Full Index Scan，index与ALL区别为index只遍历索引树，这通常比ALL快，因为索引文件通常比数据文件小。也就是说虽然all和index都是读全表，但是index是从索引中读取的，而all是从硬盘中读取的。（举例：select id from employees；查询所有的员工号(id)，但是id又刚好在索引上）<br>（7）<strong>ALL</strong>: Full Table Scan，将遍历全表以找到匹配的行。（如SELECT * FROM employees;一般来说，没建立索引就是全表扫描)</li>
</ul>
<h1 id="五、possible-keys与key——介绍"><a href="#五、possible-keys与key——介绍" class="headerlink" title="五、possible_keys与key——介绍"></a>五、possible_keys与key——介绍</h1><hr>
<ul>
<li><strong>possible_keys</strong>: 显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，<strong>但不一定被查询实际使用</strong>。（如上课，理论应到多少人[possible_keys]，实际到多少人[key]）</li>
<li><strong>key</strong>: 实际使用的索引。如果为NULL，则没有使用索引；<strong>查询中若使用了覆盖索引，则该索引仅出现在key列表中</strong>。<strong>（覆盖索引：即要查询的字段和所建立的索引刚好吻合。简单地说，即select后面查询的字段和建复合索引的个数和顺序一一一致。比如说，你建了三个字段的一个索引，刚好查的也是三个，两者的个数和顺序刚好匹配）</strong></li>
</ul>
<h1 id="六、key-len——介绍"><a href="#六、key-len——介绍" class="headerlink" title="六、key_len——介绍"></a>六、key_len——介绍</h1><hr>
<ul>
<li><p><strong>key_len</strong>: 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精度的情况下，长度越短越好；key_len显示的值是索引字段的最大可能长度，<strong>并非实际使用长度</strong>，即key_len是根据表定义计算而得，不是通过表内检索出的。</p>
</li>
<li><p>查询的精度越高，key_len越大的值。</p>
</li>
</ul>
<h1 id="七、ref——介绍"><a href="#七、ref——介绍" class="headerlink" title="七、ref——介绍"></a>七、ref——介绍</h1><hr>
<ul>
<li><strong>ref</strong>: 显示索引的哪一列被使用了，如果可能的话，是一个常数。即哪些列或常量被用于查找索引列上的值。</li>
<li>举例：<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/3.png" title="explain3">
由key_len可知t1表的idx_col1_col2被充分使用，col1匹配t2表的col1，col2匹配了一个常量，即’ac’</li>
</ul>
<h1 id="七、rows——介绍"><a href="#七、rows——介绍" class="headerlink" title="七、rows——介绍"></a>七、rows——介绍</h1><hr>
<ul>
<li><strong>rows</strong>: 根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数.</li>
<li>举例：<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/4.png" title="explain4">
可见，创建复合索引idx_col1_col2后，理论上读取的行数从640行变为142行。</li>
</ul>
<h1 id="八、Extra——介绍"><a href="#八、Extra——介绍" class="headerlink" title="八、Extra——介绍"></a>八、Extra——介绍</h1><hr>
<ul>
<li><strong>Extra</strong>: 包含不在其他列中显示，但是又十分重要的信息。</li>
<li>Extra中包含的信息有以下几种：<br>（1）<strong>Using filesort</strong>: 【这表示性能差的，待优化的】文件内排序，说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。也就是说，MySQL中无法利用索引完成的排序操作称作“文件内排序”。</li>
</ul>
<p><strong>优化示例</strong>：</p>
<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/5.png" title="explain5">
<p>–优化前，由key可知用到的索引是idx_col_col2_col3，但是实际上并没有用到col2，而是直接从col1跳到col3，此时需要文件自己建立索引进行查询，没有完全按照表内的顺序进行读取。<br>–优化后，即补上col2，完全按照表内的索引顺序进行读取（完全按照主人修的路走）。<br>–优化前由于在文件内部多折腾了一次（建立索引），因此性能没有优化后的好。</p>
<p>（2）<strong>Using temporary</strong>: 【这表示性能差的，待优化的】新建了一个临时表，使用了临时表保存了中间结果，MySQL在对查询结果排序时使用临时表。常见于排序order by和分组查询group by。<br><strong>优化示例</strong>：</p>
<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/6.png" title="explain6">
<p>–可见，group by后面列出所建的全部索引，可以避免出现临时表。</p>
<p>（3）<strong>Using index</strong>: 【这是好的】表示相应的select操作中使用了覆盖索引（Covering Index），避免访问了表的数据行，效率不错！</p>
<ul>
<li>如果同时出现using where，表明索引被用来执行索引键值的查找。<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/7.png" title="explain7"></li>
<li>如果没有出现using where，表明索引用来读取数据而非执行查找动作。<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/8.png" title="explain8"></li>
</ul>
<p><strong>PS</strong>： 如果要使用覆盖索引，一定要注意select列表中只取出需要的列，不可以select *，因为如果将所有字段一起做索引会导致索引文件过大，查询效率下降。</p>
<p>（4）Using where: 表明使用了where过滤。<br>（5）using join buffer: 使用了连接缓存。<br>（6）impossible where: where子句的值总是false，不能用来获取任何元组（如一个人的名字既叫张三又叫李四）。<br>（7）select tables optimized away: 此词条较少见。表示在没有GROUP BY的情况下，基于索引优化MIN/MAX操作或者对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化。<br>（8）distinct: 此词条较少见。优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作。</p>
<h1 id="九、优化案例"><a href="#九、优化案例" class="headerlink" title="九、优化案例"></a>九、优化案例</h1><hr>
<h2 id="1、索引单表优化案例"><a href="#1、索引单表优化案例" class="headerlink" title="1、索引单表优化案例"></a>1、索引单表优化案例</h2><p>Question: 查询category_id为1且comments大于1的情况下，views最多的article_id。</p>
<pre><code>EXPLAIN SELECT id,author_id FROM article 
WHERE category_id=1 AND comments&gt;1 
ORDER BY views DESC limit 1; </code></pre><img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/9.png" title="explain9">
<ul>
<li>结论：很显然，type是ALL，即是最坏的情况。Extra里面还出现了Using filesort，也是最坏的情况，优化是必须的。</li>
<li>开始优化：</li>
</ul>
<p>（1）建立索引。</p>
<pre><code>creat index idx_article_ccv on article(category_id,comments,views);

show index from article;</code></pre><img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/10.png" title="explain10">
<p>（2）再次执行explain。</p>
<pre><code>EXPLAIN SELECT id,author_id FROM article 
WHERE category_id=1 AND comments&gt;1 
ORDER BY views DESC LIMIT 1;</code></pre><img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/11.png" title="explain11">

<ul>
<li><strong>小结</strong>：type变成了range，这是可以忍受的。但是extra里使用Using filesort仍然无法接受。但是我们已经建立了索引，为什么没用呢？这是因为根据BTree索引的工作原理，先排序category_id，如果遇到相同的category_id，则再排序comments，如果遇到相同的comments，则再排序views，当comments字段再联合索引里处于中间位置时，因为comments&gt;1条件是一个<strong>范围值（所谓range）</strong>，<strong>MySQL无法利用索引再对后面的views部分进行检索</strong>，即range类型查询字段后面的索引无效！</li>
</ul>
<p>（3）删除第一次建立的索引。</p>
<pre><code>DROP INDEX idx_article_ccv ON article;</code></pre><p>（4）第二次新建索引。</p>
<pre><code>creat index idx_article_cv on article(category_id,views);</code></pre><p>（5）第三次执行explain。</p>
<pre><code>EXPLAIN SELECT id,author_id FROM article 
WHERE category_id=1 AND comments&gt;1 
ORDER BY views DESC LIMIT 1;</code></pre><img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/12.png" title="explain12">
<ul>
<li>总结：可以看到，既实现了type：ref，又消除了Using filesort，同时又得到ref：const，满足性能需求。</li>
</ul>
<h2 id="2、索引两表优化案例"><a href="#2、索引两表优化案例" class="headerlink" title="2、索引两表优化案例"></a>2、索引两表优化案例</h2><p>Question: 分析并优化如下语句：</p>
<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/15.png" title="explain15">
<pre><code>EXPLAIN SELECT * FROM class LEFT JOIN book ON class.card=book.card;</code></pre><ul>
<li><p>结论：type有ALL。</p>
</li>
<li><p>优化过程：<br>（1）添加索引优化。</p>
<p>  ALTER TABLE ‘book’ ADD INDEX Y(‘card’);<br>（2）第二次explain分析。</p>
<p>  EXPLAIN SELECT * FROM class LEFT JOIN book ON class.card=book.card;</p>
{%asset_img 13.png explain13%}</li>
<li><p>小结：可以看到，第二行的type变为了ref，rows也变成了1优化比较明显。这是由于左连接的特性决定的。LEFT JOIN条件用于确定如何从右边表搜索行，左边一定都有。因此，右边是我们的关键点，一定要建立索引。</p>
</li>
<li><p>PS：如果不对右表建立索引，而是对左表建立索引【ALTER TABLE ‘book’ ADD INDEX Y(‘card’);】，就会出现不一样的情况：</p>
{%asset_img 14.png explain14%}</li>
<li><p>总结：<strong>左连接，建立右表索引；右连接，建立左表索引。</strong></p>
</li>
</ul>
<h2 id="3、索引三表优化案例"><a href="#3、索引三表优化案例" class="headerlink" title="3、索引三表优化案例"></a>3、索引三表优化案例</h2><p>Question: 将以下查询语句进行优化：</p>
<pre><code>EXPLAIN SELECT * 
FROM class LEFT JOIN book ON class.card=book.card 
LEFT JOIN phone ON book.card=phone.card;</code></pre><img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/17.png" title="explain17">

<ul>
<li>优化过程：</li>
</ul>
<p>（1）建立索引：</p>
<pre><code>ALTER TABLE &apos;phone&apos; ADD INDEX Z(&apos;card&apos;);
ALTER TABLE &apos;book&apos; ADD INDEX Y(&apos;card&apos;);</code></pre><p>（2）第二次运行EXPLAIN：</p>
<pre><code>EXPLAIN SELECT * 
FROM class LEFT JOIN book ON class.card=book.card 
LEFT JOIN phone ON book.card=phone.card;</code></pre><img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/18.png" title="explain18">
<ul>
<li>小结：后两行的type都是ref且总rows优化很好，效果不错。因此索引最好设置在经常查询的字段中。</li>
<li>结论：<br>（1）join语句的优化：尽可能减少Join语句中的NestedLooop的循环总次数:”永远用小结果集驱动大结果集”。<br>（2）优先优化NestedLoop的内层循环。<br>（3）保证Join语句中被驱动表上Join条件字段已经被索引。<br>（4）当无法保证被驱动表的Join条件字段被索引且内存资源充足的情况下，不要太吝啬JoinBuffer的设置。</li>
</ul>
<h2 id="4、避免索引失效，心法口诀"><a href="#4、避免索引失效，心法口诀" class="headerlink" title="4、避免索引失效，心法口诀"></a>4、避免索引失效，心法口诀</h2><p><strong>（1）全值匹配我最爱。</strong></p>
<ul>
<li>就是建了几个字段的索引，就全部用上，不要有空缺。比如建立索引name_age_position，where条件中写上：name=’Peter’,age=18, position=’engineer’。</li>
</ul>
<p><strong>（2）最佳左前缀法则，并且不能跳过索引中间的列。</strong></p>
<ul>
<li>如：建立索引name_age_position，查询条件没有用到name，则type类型变成ALL，且没有用到索引。若查询条件只有name，position，跳过中间的age，则导致索引没有完全被使用，key_len中只显示索引中第一个关键字的长度。</li>
</ul>
<p><strong>（3）不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），否则会导致索引失效而转向全表扫描。</strong></p>
<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/19.png" title="explain19">
<p><strong>（4）存储引擎不能使用索引中范围条件的右边的列，即范围后面全失效。</strong></p>
<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/20.png" title="explain20">
<p><strong>（5）尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致）），减少select*。</strong></p>
<ul>
<li>代替使用select*,而使用select name，age，position会出现using index，查询效果更好。<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/21.png" title="explain21"></li>
</ul>
<p><strong>（6）mysql在使用不等于（！=或者&lt;&gt;）的时候无法使用索引会导致全表扫描。</strong></p>
<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/22.png" title="explain22">
<p><strong>（7）is null, is not null也无法使用索引。</strong></p>
<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/23.png" title="explain23">
<p><strong>（8）like以通配符开头（’%abc…’）mysql索引失效会变成全表扫描的操作。即百分like加右边。</strong></p>
<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/24.png" title="explain24">
<ul>
<li>如何解决百分号必须加在左边的情况：使用覆盖索引。select的对象和建立的索引个数顺序上最好完全一致。<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/25.png" title="explain25"></li>
<li>如上表explain语句中，只有最后两条是全表扫描（即select*，select email是全表扫描，因为建立的索引是id_name_age，不包括email）。</li>
</ul>
<p><strong>（9）字符串不加单引号索引失效。</strong></p>
<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/26.png" title="explain26">
<p><strong>（10）少用or，用它来连接时会索引失效。</strong></p>
<ul>
<li><p>小练习：判断下列索引是否失效。</p>
<img src="/2019/10/07/MySQL性能分析——EXPLAIN使用指南/27.png" title="explain27">
</li>
<li><p><strong>心法口诀：</strong></p>
<blockquote>
<p><strong>全值匹配我最爱，最左前缀要遵守；</strong><br><strong>带头大哥不能死，中间兄弟不能断；</strong><br><strong>索引列上少计算，范围之后全失效；</strong><br><strong>LIKE百分写最后， 索引覆盖不写星；</strong><br><strong>不等空值还有or，索引失效要少用。</strong></p>
</blockquote>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> SQL </tag>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL中表的横向合并(join)以及去重复字段]]></title>
      <url>/2019/10/06/MySQL%E4%B8%AD%E8%A1%A8%E7%9A%84%E6%A8%AA%E5%90%91%E5%90%88%E5%B9%B6-join-%E4%BB%A5%E5%8F%8A%E5%8E%BB%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AE%B5/</url>
      <content type="html"><![CDATA[<h1 id="一、例题分析"><a href="#一、例题分析" class="headerlink" title="一、例题分析"></a>一、例题分析</h1><hr>
<p><strong>Question</strong>: 查询每个部门(departments)的编号(dept_no),名称(dept_name),在该部门工作过的雇员(employees)人数,最低工资(salary),平均工资,最高工资及工资总额；</p>
<p>(这道题所使用的数据库的来源是MYSQL官网上的的一个样例库，库名是<strong>employees_db-full-1.0.6.tar.bz2(md5)</strong>，由于<strong>dept_emp</strong>、<strong>salaries</strong>表格过长，因此只显示部分，其库的部分结构如下)</p>
<p><em>表格一：departments</em></p>
<a id="more"></a>
<img src="/2019/10/06/MySQL中表的横向合并-join-以及去重复字段/1.jpg" title="departments">
<p><em>表格二：dept_emp</em></p>
<img src="/2019/10/06/MySQL中表的横向合并-join-以及去重复字段/2.jpg" title="dept_emp">
<p><em>表格三：salaries</em></p>
<img src="/2019/10/06/MySQL中表的横向合并-join-以及去重复字段/3.jpg" title="salaries">

<p><strong>典型错误</strong>：若是按照一般的思路，会直接进行如下操作：</p>
<pre><code>SELECT departments.dept_no, dept_name, count(*), MIN(salary), AVG(salary), MAX(salary), SUM(salary)
FROM departments, dept_emp, salaries
WHERE departments.dept_no=dept_emp.dept_no AND dept_emp.emp_no=salaries.emp_no
GROUP BY dept_no;</code></pre><p>打印结果如下：</p>
<img src="/2019/10/06/MySQL中表的横向合并-join-以及去重复字段/4.jpg" title="error">
<p><strong>错误理由</strong>：从代码的的语义上理解，是将三张表格做了等值连接，这时候再计算雇员人数（count(*))就出大错了，因为由于同一名员工拥有不同时间段的工资记录，因此会将同一个部门工作过的同一名员工反复累计多次，导致雇员人数（count(*))的值偏大。另外，从结果上来看，也不合理，因为我曾经用“select count(*) from dept_emp;”查询过雇员总数，大约33w+，而表中数据远超这一指标，因此错误！</p>
<h1 id="二、解决思路"><a href="#二、解决思路" class="headerlink" title="二、解决思路"></a>二、解决思路</h1><hr>
<p><strong>Solution</strong>：可以看到，造成上述揭发错误的根本原因是，在同一张大表，由于统计的方式不同，造成统计结果的错误。由此考虑将一个表分解成为两张小表，再用join进行拼接，最后从拼接的新表中选择需要的字段，代码如下：</p>
<pre><code>SELECT *
FROM
(/*下表筛选出部门名称、部门雇员人数*/
SELECT departments.dept_no, dept_name, count(*)
FROM departments, dept_emp
WHERE departments.dept_no=dept_emp.dept_no
GROUP BY dept_no) as A
/*将两个表格进行内连接*/
INNER JOIN
(/*下表筛选出部门最低、最高、平均、总工资*/
SELECT dept_no, MIN(salary), AVG(salary), MAX(salary), SUM(salary)
FROM dept_emp, salaries
WHERE dept_emp.emp_no=salaries.emp_no
GROUP BY dept_no) as B
ON A.dept_no=B.dept_no;</code></pre><p>显示结果如下：</p>
<img src="/2019/10/06/MySQL中表的横向合并-join-以及去重复字段/5.jpg" title="corect1">
<p>但是我们发现一个问题，即dept_no出现了两次。因此要去掉重复的列，只能将所需要的列都筛选出来。但是直接筛选count（*)等带关键字的列名会冲突而报错，因此只能用双反引号（`）来将列名包起来。最终代码和结果如下：</p>
<pre><code>SELECT A.dept_no, dept_name, `count(*)`,`MIN(salary)`, `AVG(salary)`, `MAX(salary)`, `SUM(salary)`
FROM
(SELECT departments.dept_no, dept_name, count(*)
FROM departments, dept_emp
WHERE departments.dept_no=dept_emp.dept_no
GROUP BY dept_no) as A
INNER JOIN
(SELECT dept_no, MIN(salary), AVG(salary), MAX(salary), SUM(salary)
FROM dept_emp, salaries
WHERE dept_emp.emp_no=salaries.emp_no
GROUP BY dept_no) as B
ON A.dept_no=B.dept_no;</code></pre><img src="/2019/10/06/MySQL中表的横向合并-join-以及去重复字段/6.jpg" title="corect2">

<h1 id="三、要点总结"><a href="#三、要点总结" class="headerlink" title="三、要点总结"></a>三、要点总结</h1><hr>
<p>（1）当要将两张表进行横向拼接时，可以使用join关键字进行拼接。使用格式：</p>
<pre><code>SELECT column——name
FROM tabel_A
JOIN tabel_B
ON tabel_A.key=tabel_B.key;</code></pre><p>而本题中使用的表格是由select临时创建的表，此时进行join连接可以使用如下格式：</p>
<pre><code>SELECT column——name
FROM (SELECT ...) as A
JOIN (SELECT ...) as B
ON A.key=B.key;</code></pre><p>（2）当横向合并后发现重复字段，只能一个一个将需要的字段筛选出来，不能用*代替。若字段上含关键字，则用反引号``将字段囊括其中即可。</p>
<p>（3）PS：对几种常见的join，如：INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL OUTER JOIN 等做简单介绍，也可通过图片进行记忆。</p>
<img src="/2019/10/06/MySQL中表的横向合并-join-以及去重复字段/7.jpg" title="join">

<blockquote>
<p>INNER JOIN：与JOIN相同，且INNER关键字可以省略。INNER JOIN将只会返回相匹配的元素项，即不会返回结果为NULL的数据项。<br>FULL OUTER JOIN：取得所有的元素项，则可以使用FULL OUTER JOIN。<br>LEFT JOIN：左连接会输出左边的表中的所有结果，如果右边的表中有相应项，则会输出，否则为NULL。<br>RIGHT JOIN：使用右连接，结果将会输出tabel_B中所有的数据项和tabel_A中相应的匹配项。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 实践经验 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL使用经验]]></title>
      <url>/2019/09/30/MySQL%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h1 id="1、连接本机上的MySQL"><a href="#1、连接本机上的MySQL" class="headerlink" title="1、连接本机上的MySQL"></a>1、连接本机上的MySQL</h1><hr>
<p>方式一：打开MySQL Command Line Client,输入密码<br>方式二：打开DOS窗口，然后进入目录mysql\bin。输入命令：mysql -u root -p密码</p>
<a id="more"></a>
<h1 id="2、修改密码"><a href="#2、修改密码" class="headerlink" title="2、修改密码"></a>2、修改密码</h1><hr>
<p> 创建密码abcd：mysqladmin -u root -password abcd<br> 修改密码defg：mysqladmin -u root -p abcd password defg</p>
<h1 id="3、创建数据库"><a href="#3、创建数据库" class="headerlink" title="3、创建数据库"></a>3、创建数据库</h1><hr>
<p>creat database&lt;数据库名&gt;;</p>
<h1 id="4、显示数据库"><a href="#4、显示数据库" class="headerlink" title="4、显示数据库"></a>4、显示数据库</h1><hr>
<p>show databases;(注意：不要忘记写‘;’不然再输一遍加分号的也会报错，要一次写对)</p>
<h1 id="5、连接数据库"><a href="#5、连接数据库" class="headerlink" title="5、连接数据库"></a>5、连接数据库</h1><hr>
<p>use &lt;数据库名&gt;;</p>
<h1 id="6、推出数据库服务器"><a href="#6、推出数据库服务器" class="headerlink" title="6、推出数据库服务器"></a>6、推出数据库服务器</h1><hr>
<p>exit;</p>
<h1 id="7、创建数据表"><a href="#7、创建数据表" class="headerlink" title="7、创建数据表"></a>7、创建数据表</h1><hr>
<p>CREATE TABLE pet(<br>    name VARCHAR(20),<br>    owner VARCHAR(20),<br>    birth DATE);</p>
<h1 id="8、查看创建好的数据表的结构"><a href="#8、查看创建好的数据表的结构" class="headerlink" title="8、查看创建好的数据表的结构"></a>8、查看创建好的数据表的结构</h1><hr>
<p>describe &lt;数据表名称&gt;;（describe可以简写为desc）</p>
]]></content>
      
        
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Note-of-JavaSE_2_面向对象、static、帮助文档]]></title>
      <url>/2019/09/10/Node-of-JavaSE%EF%BC%882%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Day05-面向对象"><a href="#Day05-面向对象" class="headerlink" title="Day05__面向对象"></a>Day05__面向对象</h1><hr>
<p>【1】面向对象：封装、继承、多态<br>【2】属性：类中的变量，行为：类中的的函数（方法）<br>【3】内存存放原理：</p>
<a id="more"></a>
<img src="/2019/09/10/Node-of-JavaSE（2）/1.png" title="neicunyuanli1">
<p>多个引用指向同一个对象：</p>
<img src="/2019/09/10/Node-of-JavaSE（2）/2.png" title="neicunyuanli2">
<p>【4】成员变量和局部变量：<br>（1）作用范围：成员变量作用于整个类中，局部变量作用于函数中、或语句中。<br>（2）内存中的位置：成员变量：堆内存；局部变量：栈内存。<br>【5】匿名对象：调用方法有意义，调用属性没意义，原理：</p>
<img src="/2019/09/10/Node-of-JavaSE（2）/3.png" title="neicunyuanli3">
<p>（每次new都创建一个新对象）<br>【6】匿名对象应用1：当对对象的方法进行一次调用时，可用匿名对象来完成，这样比较简单。当对对各成员调用时，必须给这个对象起一个名字。<br>应用2：可以将匿名对象作为实际参数进行传递（原理如下图）</p>
<img src="/2019/09/10/Node-of-JavaSE（2）/4.png" title="neicunyuanli4">
<p>这时候new Car()这个匿名对象就传给了形参c。不过当show完了以后，内存就释放了。<br>【7】若真想让对象变成垃圾的话，就用c = null;<br>【8】封装：隐藏对象的属性和实现细节，对外提供公共访问方式<br>好处：将变化隔离、便于使用、提高重用性、提高安全性<br>【9】private:私有，权限修饰符，用于修饰类中的成员，（成员变量、成员函数）<br>私有只在本类中有效。<br>【10】封装不是私有，私有只是封装的一种表现形式。<br>【11】构造函数：</p>
<img src="/2019/09/10/Node-of-JavaSE（2）/5.png" title="constructedfun">
<p>【12】对象一建立就会调用与之对应的构造函数<br>【13】当对象中没有定义构造函数时，系统会自动添加一个空的构造函数如：Person（）{}<br>【14】Person类中可以添加构造函数：Person(){……},当类名相同时,以重载的方式呈现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    Person()</span><br><span class="line">    &#123;</span><br><span class="line">	    System.out.println(<span class="string">"A:name= "</span>+name+<span class="string">" age= "</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">    Person(String n)</span><br><span class="line">    &#123;</span><br><span class="line">	    name = n;</span><br><span class="line">	    System.out.println(<span class="string">"B:name= "</span>+name+<span class="string">" age= "</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">    Person(String n, <span class="keyword">int</span> a)</span><br><span class="line">    &#123;</span><br><span class="line">	    age = a;</span><br><span class="line">	    name = n;</span><br><span class="line">	    System.out.println(<span class="string">"C:name= "</span>+name+<span class="string">" age= "</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【15】构造代码块：对象一建立就运行，优先于构造函数。并且是给所有的对象统一初始化。是不同对象共性的内容！<br>【16】this关键字：当局部变量的名称和成员变量的名称相同时使用；否则如name=name；两个name都是局部变量。可使用this.name=name;<br>【17】构造函数间调用只能用this语句：(且this语句只能放在构造函数的第一行)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person(String name)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Person(String name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">  This(name); <span class="comment">//调用上面的Person函数</span></span><br><span class="line">  This.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Day06-static、帮助文档、单例设计模式"><a href="#Day06-static、帮助文档、单例设计模式" class="headerlink" title="Day06__static、帮助文档、单例设计模式"></a>Day06__static、帮助文档、单例设计模式</h1><hr>
<p>【1】static是一个修饰符，用于修饰成员（成员变量、成员函数）<br>静态修饰内容被对象共享。<br>【2】static特点：<br>（1）随着类的加载而加载，也就是说随着类的消失而消失，说明它的生命周期最长。<br>（2）优先于对象存在。静态先存在，对象后存在。<br>（3）被所有对象共享。<br>（4）可以直接被类名所调用。<br>String name : 成员变量，实例变量。<br>static String country : 静态的成员变量，类变量。<br>【3】静态方法只能访问静态成员；非静态方法既能访问静态成员，又能访问非静态成员。<br>【4】静态方法中不可以定义this、supper关键字。因为静态优先于对象存在，所以静态方法中不可以出现this。因此，Person类中出现如下字段时错误！！！！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    System.out.println(“:::”+<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【5】静态有利有弊：有利：对对象的共享数据进行单独空间的存储，节省空间。可以直接被类名调用。弊端：生命周期太长。访问出现局限性，静态只能访问静态。<br>【6】主函数的定义：<br>Public:表示函数的访问权限时最大的。<br>Static:代表主函数随着类的加载几经存在了。<br>Void:主函数没有具体的返回值。<br>Main:不是关键字，但是一个特殊的函数，可以被jvm识别<br>（String[] argS):函数的参数，参数类型是一个数组，该数组中的元素是字符串，字符串类型的数组。主函数是固定格式的：jvm识别。<br>【7】主函数唯一可以改的地方：变量名args。<br>【8】虚拟机在调用主函数时，传入的参数是new String[0].<br>【9】可以向主函数中传递参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">	    System.out.println(args[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/09/10/Node-of-JavaSE（2）/6.png" title="MainDemo">
<p>【10】什么时候用静态:(1)当存在共享数据时.(2)当功能内部没有访问到非静态数据（对象的特有数据），那么该功能可以定义成静态的。如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    System.out.println(“haha”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以定义为静态的。<br>【11】静态调度应用——工具类<br>每个应用程序中有共性的功能，可以将这些功能进行抽取，以便复用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">	    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)</span><br><span class="line">	    &#123;</span><br><span class="line">		    <span class="keyword">if</span>(arr[max]&lt;arr[i])</span><br><span class="line">			    max = i;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">return</span> arr[max];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[min]&gt;arr[i])</span><br><span class="line">				min = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> arr[min];</span><br><span class="line">	&#125;</span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.length-i-<span class="number">1</span>; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">					swap(arr,j,j+<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;arr.length; j++)</span><br><span class="line">				<span class="keyword">if</span>(arr[i]&gt;arr[j])</span><br><span class="line">					swap(arr,i,j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> temp = arr[a];</span><br><span class="line">		arr[a] = arr[b];</span><br><span class="line">		arr[b] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(arr[i]+<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当调用时，因为是static修饰，随着类的加载而加载，可以在主函数使用代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tool.bubbleSort(arr);</span><br><span class="line">Tool.printArray(arr);</span><br><span class="line">Tool.selectSort(arr);</span><br><span class="line">Tool.printArray(arr);</span><br></pre></td></tr></table></figure>

<p>等进行调用。<br>PS:可以把工具类放入一个单独的.java文件中，cmd中可以使用javac  xxx（主函数所在类名即可），不用再javac Tool.java, 因为文件中出现没见过的类时候会在当前目录下找，自动生成Tool.class</p>
<p>【12】上面的类还是可以被建立对象的，为了不让建立对象，可以在Tool类中将构造函数私有化，即是可以在Tool类中添加语句：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Tool</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>【13】制作程序说明书（帮助文档、API文档）：java说明书经常通过注释来完成，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这是一个可以对数组进行操作的工具类，该类中提供了，获取最值，排序等功能，</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> 张三</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> V1.1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tool</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	空参数构造函数</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Tool</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	获取一个整形数组中的最大值。</span></span><br><span class="line"><span class="comment">	<span class="doctag">@param</span> arr 接收一个int类型的数组。</span></span><br><span class="line"><span class="comment">	<span class="doctag">@return</span> 会返回一个该数组中的最大值。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[max]&lt;arr[i])</span><br><span class="line">				max = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> arr[max];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	获取一个整形数组中的最小值。</span></span><br><span class="line"><span class="comment">	<span class="doctag">@param</span> arr 接收一个int类型的数组。</span></span><br><span class="line"><span class="comment">	<span class="doctag">@return</span> 会返回一个该数组中的最小值。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[min]&gt;arr[i])</span><br><span class="line">				min = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> arr[min];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	给int数组进行冒泡排序。</span></span><br><span class="line"><span class="comment">	<span class="doctag">@param</span> arr 接受一个int类型的数组。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.length-i-<span class="number">1</span>; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">					swap(arr,j,j+<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	给int数组进行选择排序。</span></span><br><span class="line"><span class="comment">	<span class="doctag">@param</span> arr 接受一个int类型的数组。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;arr.length; j++)</span><br><span class="line">				<span class="keyword">if</span>(arr[i]&gt;arr[j])</span><br><span class="line">					swap(arr,i,j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	给数组中的元素进行位置的置换。</span></span><br><span class="line"><span class="comment">	<span class="doctag">@param</span> arr 接受一个int类型的数组。</span></span><br><span class="line"><span class="comment">	<span class="doctag">@param</span> a 要置换的位置</span></span><br><span class="line"><span class="comment">	<span class="doctag">@param</span> b 要制换的位置</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> temp = arr[a];</span><br><span class="line">		arr[a] = arr[b];</span><br><span class="line">		arr[b] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	用于打印数组中的元素，打印形式是：[element1, element2,...]</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Sdystem.out.print(<span class="string">"["</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(x!=arr.length-<span class="number">1</span>)</span><br><span class="line">				System.out.print(arr[x]+<span class="string">", "</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">		   	 	System.out.println(arr[i]+<span class="string">"]"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建好后在命令行中输入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Javadoc -d myhelp -author -version Tool.java</span><br></pre></td></tr></table></figure>

<p>[1] 其中-d表示当前目录，要是不想存放在当前目录可以写如-dc:表示存放到c盘<br>[2] myhelp是文件名，如果没有此文件名系统会帮忙建立一个<br>[3] -author -version表示提取作者和版本，若没有可以不提取<br>[4] Tool.java是工具类存放的文件，帮助文档就是根据这个生成的<br>PS: class一定要用public修饰，不然无法生成帮助文档<br>生成后，在myhelp/index.html中查看</p>
<p>【14】如果类被public修饰，那么默认的构造函数也被public修饰；如果类没有public修饰，默认的构造函数也没有被public修饰。<br>【15】静态代码块：static{  }<br>随着类的加载而加载，只执行一次，用于给类进行初始化的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticCode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">static</span></span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">"a"</span>);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"show run"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticCodeDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">static</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//System.out.print</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//new StaticCode();</span></span><br><span class="line">		<span class="comment">//new StaticCode();</span></span><br><span class="line">		<span class="comment">//System.out.println("over");</span></span><br><span class="line">		<span class="comment">//StaticCode.show();</span></span><br><span class="line">		StaticCode s = <span class="keyword">null</span>; <span class="comment">//此时没加载，也就没用到静态代码块只有当用到StaticCode中的方法时才加载</span></span><br><span class="line">		s = <span class="keyword">new</span> StaticCode();<span class="comment">//加载了，因为使用其中的构造函数了</span></span><br><span class="line">		StaticCode.show();<span class="comment">//加载了，因为用到类中方法了了</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【16】静态代码块：给类初始化<br>构造代码块：给对象初始化<br>构造函数：给对应对象初始化的<br>【17】Person p = new Person(“ZhangSan”,20);<br>该句话都干了什么事？<br>[1]因为new用到了Person.class，所以会先找到Person.class文件并加载到内存中。<br>[2]执行该类中的static代码块，如果有的话，给Person.class类进行初始化。<br>[3]在堆内存中开辟空间，分配内存地址。<br>[4]在堆内存中建立对象的特有属性，并进行默认初始化。（如name为null，年龄是0）<br>[5]对属性进行显示初始化。<br>[6]对对象进行构造代码块初始化。<br>[7]对对象进行对应的构造函数初始化。<br>[8]将内存地址赋给栈内存中的p变量。</p>
<img src="/2019/09/10/Node-of-JavaSE（2）/7.png" title="neicunyuanli7">
<img src="/2019/09/10/Node-of-JavaSE（2）/8.png" title="neicunyuanli8">
<p>【18】单例设计模式：解决一个类在内存中只存在一个对象。</p>
<p>想要保证对象唯一。<br>1.为了避免其他程序过多建立该类对象，先禁止其他程序建立该对象。<br>2.为了让其他程序能够访问该类对象，只好在本类中自定义一个对象。<br>3.为了方便其他程序对自定义的对象的访问，可以对外提供一些访问方式。</p>
<p>体现：<br>1.将构造函数私有化<br>2.类中创建一个本类对象<br>3.提供一个方法可以获取到对象<br>下面的是饿汉式：</p>
<img src="/2019/09/10/Node-of-JavaSE（2）/9.png" title="neicunyuanli9">
<p>【19】单例设计模式的第二种写法：<br>这是懒汉式，（对象被调用时，才被加载出来）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">null</span>;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(s==<span class="keyword">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(Single.class)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(s==<span class="keyword">null</span>)</span><br><span class="line">				s = <span class="keyword">new</span> Single();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		returns;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(其中，synchronized表示锁，用于同步，A程序进去，B程序就进不来了）<br>（定义单例时，建议使用饿汉式）</p>
]]></content>
      
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown语言使用方法总结]]></title>
      <url>/2019/09/07/Markdown%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h2 id="一、标题的设置"><a href="#一、标题的设置" class="headerlink" title="一、标题的设置"></a>一、标题的设置</h2><p>标题使用若干个#来表示，有多少#就表示几级标题，#越多级别越小，字体越小，如：</p>
<pre><code># title1
## title2
### title3
#### title4
##### title5
###### title6</code></pre><a id="more"></a>

<h2 id="二、分隔符"><a href="#二、分隔符" class="headerlink" title="二、分隔符"></a>二、分隔符</h2><p>可以使用---或***或___进行分割</p>
<h2 id="三、代码块的插入"><a href="#三、代码块的插入" class="headerlink" title="三、代码块的插入"></a>三、代码块的插入</h2><p>方式一：<br>1、代码语句要与上方已写内容之间隔一行。<br>2、每行代码要与开头间隔4个空格及以上，效果如下：</p>
<pre><code>public static void main(String[] args) {}</code></pre><p>方式二：<br>使用反引号将代码块进行包裹,反引号就在Esc键的下方。效果如下：<br><code>public static void main(String[] args) {}</code></p>
<p>方法三（极力推荐）：<br>使用：<br>    <strong>```关键字<br>        代码块<br>    ```</strong><br>的格式进行插入代码，如插入java代码，关键字就是java。</p>
<h2 id="四、文本的设置"><a href="#四、文本的设置" class="headerlink" title="四、文本的设置"></a>四、文本的设置</h2><p>1、加粗：两边使用双星号包裹待加粗字体，如：**我是加粗字体**，效果如下：<br>&emsp; <strong>我是加粗字体</strong><br>2、斜体：两边使用单星号，如：*我是斜体*, 效果如下：<br>&emsp; <em>我是斜体</em><br>3、删除文本：两边用双波浪线，如：~~我是删除文本~~<br>&emsp; <del>我是删除文本</del><br>4、引用：使用&gt;并空格来写入被引用的部分，可以每行都写一个或者只在开头写一个, 如：&gt; 我是引用部分 ，效果如下：</p>
<blockquote>
<p>我是引用部分</p>
</blockquote>
<h2 id="五、字体的设置"><a href="#五、字体的设置" class="headerlink" title="五、字体的设置"></a>五、字体的设置</h2><p>Markdown语言本身不具备设置字体的功能，但是可以使用内嵌的HTML的方法实现！</p>
<blockquote>
<p>&lt;font face=”楷体”&gt;我是楷体字&lt;/font&gt;<br>&lt;font face=”微软雅黑”&gt;我是微软雅黑&lt;/font&gt;<br>&lt;font face=”STCAIYUN”&gt;我是华文彩云&lt;/font&gt;<br>&lt;font color=#0099ff size=7 face=”宋体”&gt;color=#0099ff size=54 face=”宋体”&lt;/font&gt;<br>&lt;font color=#00ffff size=54&gt;color=#00ffff&lt;/font&gt;<br>&lt;font color=red size=54&gt;color=red&lt;/font&gt;</p>
</blockquote>
<p><font face="楷体">我是楷体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#0099ff" size="7" face="宋体">color=#0099ff size=54 face=”宋体”</font><br><font color="#00ffff" size="54">color=#00ffff&lt;/font&gt;<br><font color="red" size="54">color=red</font></font></p>
<h2 id="六、打印空格符"><a href="#六、打印空格符" class="headerlink" title="六、打印空格符"></a>六、打印空格符</h2><p>1、 单空格：&amp;ensp;或&amp;#8194;<br>2、 双空格：&amp;emsp;或&amp;#8195;<br>3、 不断行的空格：&amp;nbsp;或&amp;#160;（注意要加上分号）</p>
<h2 id="七、表格的创建"><a href="#七、表格的创建" class="headerlink" title="七、表格的创建"></a>七、表格的创建</h2><p>在Markdown中，可以使用以下格式创建表格：</p>
<pre><code>姓名     | 学号     | 班级     | 成绩
---------|----------|---------|------    
张三     | 9527     |  三      |  96
李四     | 9528     |  三      |  92
王五     | 9529     |  四      |  87</code></pre><table>
<thead>
<tr>
<th>姓名</th>
<th>学号</th>
<th>班级</th>
<th>成绩</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>9527</td>
<td>三</td>
<td>96</td>
</tr>
<tr>
<td>李四</td>
<td>9528</td>
<td>三</td>
<td>92</td>
</tr>
<tr>
<td>王五</td>
<td>9529</td>
<td>四</td>
<td>87</td>
</tr>
</tbody></table>
<h2 id="八、自定义列表"><a href="#八、自定义列表" class="headerlink" title="八、自定义列表"></a>八、自定义列表</h2><p>（1） 无序列表: 可以使用星号(*)、加号(+)或减号(-)作为列表标记，如:+ 列表标记，效果如下：</p>
<ul>
<li>列表标记</li>
</ul>
<p>（2） 有序列表: 可以使用 数字.(空格) 的方式表示，如：</p>
<ol>
<li>Markdown</li>
<li>JavaScript</li>
<li>HTML</li>
</ol>
<p>（3） 列表的嵌套使用：（举例以及效果图）</p>
<pre><code>1. Markdown：
    - Markdown 简介
    - Markdown 语法
2. HTML：
    - HTML 基础</code></pre><ol>
<li>Markdown：<ul>
<li>Markdown 简介  </li>
<li>Markdown 语法</li>
</ul>
</li>
<li>HTML：<ul>
<li>HTML 基础</li>
</ul>
</li>
</ol>
<p>（效果图中HTML的编号居然是4，应该是把前两行也算进去了，这个bug还有待解决！）</p>
<hr>
]]></content>
      
        
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Note-of-JavaSE_1_简介、进制、数据结构]]></title>
      <url>/2019/09/07/Node-of-JavaSE%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Day01-简介与配置"><a href="#Day01-简介与配置" class="headerlink" title="Day01__简介与配置"></a>Day01__简介与配置</h1><hr>
<p>【1】java语言：面向internet、web应用首选开发语言、安全可靠、与平台无关<br>【2】J2EE企业级(servlet、jsp、web应用程序开发，就业就用这)  J2SE标准版  J2ME小型版5.0后javaee, javase, javame<br>【3】跨平台性原理：在操作系统上安装一个jvm(java虚拟机)即可，有jvm负责java在程序中的应用（在电脑上玩红白机游戏，需要装一个模拟红白机的机器）<br>【4】Hello World：[1]创建文本文档 [2]写好后保存名为xxx.java<br>               [3]运行java：cmd下打开xxx.java存放的目录，运行：javac xxx.java [4]自动生成class文件，即是运行文件（有虚拟机就能运行）<br>若在123.java中加入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">	  	System.out.println(<span class="string">"Hello java"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<p>可运行命令行java Demo</p>
<img src="/2019/09/07/Node-of-JavaSE（1）/1.png" title="demo">
<p>【5】在任意路径下执行Demo程序方法：<br>[1] 暂时性配置classpath：输入代码set classpath=你的day01路径<br>（对环境变量清空：set classpath=  后面不写）<br>（set classpath=c:;表示找完c盘找不到就找当前目录）<br>（set classpath=c:\不加分号表示的是找完c盘找不着就不找就报错，一般情况不加）<br>（set classpath=c:;d:\表示的是找完C盘找D盘）<br>[2] 永久性配置classpath：环境变量配置<br>【6】Hello Java的组成部分：类名中首字母大写，多个单词的话多个单词都要大些如XxxYyy。若一个文件中有两个类，只有含main的是可执行类。</p>
<h1 id="Day02-进制、基础规则"><a href="#Day02-进制、基础规则" class="headerlink" title="Day02__进制、基础规则"></a>Day02__进制、基础规则</h1><hr>
<p>【1】命名规则：包名：多单词时每个单词小写wwwyyyzzz<br>类名接口名：多单词组成时，所有单词的首字母大写XxxYyyZzz<br>变量名函数名：多单词组成时，第一个小写其他大写xxxYyyZzz<br>常量名：所有字母都大写，多单词时下划线连接XXX_YYY_ZZZ<br>【2】三种表现形式：十进制：0-9，满10进一<br>八进制：0-7，满8进一，用0开头<br>十六进制：0-9 A-F,满16进一，用0x开头<br>【3】不同进制之间的转换：</p>
<img src="/2019/09/07/Node-of-JavaSE（1）/2.png" title="jinzhi">
<p>【4】负数二进制：正数二进制取反+1<br>【5】买硬盘看缓存，缓存越大则运算数据越大<br>【6】常量与变量：</p>
<img src="/2019/09/07/Node-of-JavaSE（1）/3.png" title="chuangliangyubianlaing">
<p>【7】程序：byte b = 3; b=b+2 会报错，因为b是8位，2是32位，b+2后为32位，32位的不能赋值给8位的<br>【8】转义字符：\n: 换行 \b:退格（相当于backspace） \r: 按下回车键（win下与\n一样）\t: 制表符<br>【9】short s= 4; s = s+5;失败，short s=4;s+=5;编译成功；<br>因为前者是提升为int类型，运算的结果还是int类型，无法赋值给short类型。<br>S+=2,编译通过是因为+=运算符在赋值给s数据时，自动完成了强转操作。<br>【10】左移：3&lt;&lt;2=12; 6&gt;&gt;2=1<br>&lt;&lt;：其实就是乘以2的移动的位数次幂。<br>&gt;&gt;:就是除以2的移动的位数次幂。最高位补什么由原有的数据的最高位置而定。<br>   如果最高位为0，右移后，用0补空位。<br>   如果最高位是1，右移后，用1补空位。<br>&gt;&gt;&gt;：无论最高位是什么，都用0补空位。<br>一个数字抑或同一个数两次，结果还是那个数。（解密用的）<br>【11】最有效的方式算出2*8等于几？ （2&lt;&lt;3)<br>【12】数值互换（不用三方的变量）：<br>[1] n=n+m; m=n-m; n=n-m;(容易损失精度)<br>[2] 技巧性：<strong>n= n^m;</strong> <strong>m=n^m;</strong> //(n^m)^m; <strong>n=n^m;</strong>//n^(n^m);<br>[3] 一般的三方变量法：一般就用这</p>
<h1 id="Day03-循环、数组、堆和栈"><a href="#Day03-循环、数组、堆和栈" class="headerlink" title="Day03__循环、数组、堆和栈"></a>Day03__循环、数组、堆和栈</h1><hr>
<p>【1】以下代码编译失败，System.out.println(“b”)无法判断真假！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(System.out.println(“a”);System.out.println(“b”);System.out.println(“c”))</span><br><span class="line">&#123;</span><br><span class="line">     System.out.println(“d”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【2】for中表达式多的话，就用逗号分开；<br>【3】嵌套语句打印九九乘法表：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;<span class="number">10</span>; x++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">1</span>; y&lt;=x; y++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(y+<span class="string">"*"</span>+x+<span class="string">"="</span>+x*y+<span class="string">"\t"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>【4】使用break/continue跳出循环技巧：（写上标志）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">w:<span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">3</span>; x++)</span><br><span class="line">	&#123;</span><br><span class="line">		q:<span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;<span class="number">4</span>; y++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="string">"x="</span>+x);</span><br><span class="line">			<span class="keyword">break</span> w;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>【5】函数之中不能调用函数;<br>【6】函数的重载：</p>
<img src="/2019/09/07/Node-of-JavaSE（1）/4.png" title="overloaded">

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">	    <span class="keyword">int</span> x = add(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">	    <span class="keyword">int</span> y = add(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">	    System.out.println(x);</span><br><span class="line">	    System.out.println(y); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">	    <span class="keyword">return</span> x+y+z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">	    <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（注意：返回类型不同不算重载！！！）<br>【7】系统内存中的堆和栈：</p>
<img src="/2019/09/07/Node-of-JavaSE（1）/5.png" title="duihezhan">
<p>New出来的都存放在堆里面：</p>
<img src="/2019/09/07/Node-of-JavaSE（1）/6.png" title="duihezhan2">

<h1 id="Day04-排序和查找"><a href="#Day04-排序和查找" class="headerlink" title="Day04__排序和查找"></a>Day04__排序和查找</h1><hr>
<p>【1】数组长度：arr.length<br>【2】冒泡排序：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length-i-<span class="number">1</span>; x++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[x] &gt; arr[x+<span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				temp = arr[x];</span><br><span class="line">				arr[x] = arr[x+<span class="number">1</span>];</span><br><span class="line">				arr[x+<span class="number">1</span>] = temp;					</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【3】选择排序：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;arr.length; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[j]&lt;arr[i])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[i];</span><br><span class="line">				arr[i] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【4】java中特有的排序功能：(实际开发中就用这个)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line">Arrays.sort(arr);</span><br></pre></td></tr></table></figure>

<p>【5】折半查找（两种）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">halfSearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> max = arr.length-<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> mid = (max+min)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">while</span>(arr[mid]!=key)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[mid]&gt;key)</span><br><span class="line">			max = mid - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid]&lt;key)</span><br><span class="line">			min = mid + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(max&lt;min)</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		mid = (max+min)/<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">halfSearch_2</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> min=<span class="number">0</span>, max=arr.length-<span class="number">1</span>, mid;</span><br><span class="line">	<span class="keyword">while</span>(max&gt;=min)</span><br><span class="line">	&#123;</span><br><span class="line">		mid = (min+max) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(arr[mid]&gt;key)</span><br><span class="line">			max = mid - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid]&lt;key)</span><br><span class="line">			min = mid + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【6】十进制—&gt;二进制（使用StringBuffer容器，只能算正数）:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toBin</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">	<span class="keyword">while</span>(num&gt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		sb.append(num%<span class="number">2</span>);</span><br><span class="line">		num = num / <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	System.out.println(sb.reverse());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【7】十进制—&gt;十六进制：<br>原理分析：</p>
<img src="/2019/09/07/Node-of-JavaSE（1）/7.png" title="jinzhi2">

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toHex</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> temp = num &amp; <span class="number">15</span>;</span><br><span class="line">		<span class="keyword">if</span>(temp&gt;<span class="number">9</span>)</span><br><span class="line">			sb.append((<span class="keyword">char</span>)(temp-<span class="number">10</span>+<span class="string">'A'</span>));</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			sb.append(temp);</span><br><span class="line">		num = num &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	System.out.println(sb.reverse());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：（数组法）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toHex_2</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span>[] chs = &#123;<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,</span><br><span class="line">					<span class="string">'9'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>&#125;;</span><br><span class="line">	<span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">8</span>];</span><br><span class="line">	<span class="keyword">int</span> pos = arr.length;</span><br><span class="line">	<span class="keyword">while</span>(num!=<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> temp = num &amp; <span class="number">15</span>;</span><br><span class="line">		arr[--pos] = chs[temp];</span><br><span class="line">		num = num &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)</span><br><span class="line">		System.out.print(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【8】十进制转所有：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toBin</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	trans(num,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toBa</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	trans(num,<span class="number">8</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toHex</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	trans(num,<span class="number">16</span>,<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">trans</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> base, <span class="keyword">int</span> offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span>[] chs = &#123;<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,</span><br><span class="line">					<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>&#125;;</span><br><span class="line">	<span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">32</span>];</span><br><span class="line">	<span class="keyword">int</span> pos = arr.length;</span><br><span class="line">	<span class="keyword">while</span>(num!=<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> temp = num % base;</span><br><span class="line">		arr[--pos] = chs[temp];</span><br><span class="line">		num = num &gt;&gt;&gt; offset;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.print(arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【9】二维数组的内存分布机理：（New的数组初始化的值为0）</p>
<img src="/2019/09/07/Node-of-JavaSE（1）/8.png" title="shuzuduizhan">

<p>【10】</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] x,y[]；  <span class="comment">//x是一维数组，y是二维数组</span></span><br></pre></td></tr></table></figure>

]]></content>
      
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为hexo博客设置yilia主题(教程)]]></title>
      <url>/2019/09/03/%E4%B8%BAhexo%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AEyilia%E4%B8%BB%E9%A2%98(%E6%95%99%E7%A8%8B)/</url>
      <content type="html"><![CDATA[<p>  如今随着hexo博客的兴起，越来越多的主题随之诞生，我们可以到<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a> 上选择自己感兴趣的主题，比较经典的比如next、yilia、melody、mellow等，但是有些主题配置非常繁琐或者简单但界面一般。笔者建议选用yilia，界面、兼容性均较好。当然也可选用其他自己喜欢的主题，安装过程大同小异。</p>
<a id="more"></a>
<hr>
<h2 id="1-从github上拷贝yilia主题配置文件到本地"><a href="#1-从github上拷贝yilia主题配置文件到本地" class="headerlink" title="[1] 从github上拷贝yilia主题配置文件到本地"></a>[1] 从github上拷贝yilia主题配置文件到本地</h2><p>  在cmd窗口进入myblog文件夹下面，使用命令：</p>
<pre><code>$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></pre><hr>
<h2 id="2-配置myblog下的-config-yml文件"><a href="#2-配置myblog下的-config-yml文件" class="headerlink" title="[2] 配置myblog下的_config.yml文件"></a>[2] 配置myblog下的_config.yml文件</h2><p>  下拉到theme:行，后边填写 yilia（注意空格）<br>  为确保所有组件正常运行，在_config.yml文件的最后添加如下字段：</p>
<blockquote>
<p>jsonContent:<br>meta: false<br>pages: false<br>posts:<br>title: true<br>date: true<br>path: true<br>text: false<br>raw: false<br>content: false<br>slug: false<br>updated: false<br>comments: false<br>link: false<br>permalink: false<br>excerpt: false<br>categories: false<br>tags: true<br>然后就可以运行了~~</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> yilia </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows下搭建hexo+Github个人博客（教程）]]></title>
      <url>/2019/08/27/Windows%E4%B8%8B%E6%90%AD%E5%BB%BAhexo-Github%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%95%99%E7%A8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="第一章：准备阶段"><a href="#第一章：准备阶段" class="headerlink" title="第一章：准备阶段"></a>第一章：准备阶段</h1><hr>
<h2 id="1-注册Github账号-已有账号则忽略这一步"><a href="#1-注册Github账号-已有账号则忽略这一步" class="headerlink" title="[1] 注册Github账号(已有账号则忽略这一步)"></a>[1] 注册Github账号(已有账号则忽略这一步)</h2><p>网址：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a><br>（注册好后记住自己的账号和邮箱）</p>
<hr>
<h2 id="2-下载Git工具"><a href="#2-下载Git工具" class="headerlink" title="[2] 下载Git工具"></a>[2] 下载Git工具</h2><p> Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目，它可以将服务器端的数据库克隆到单机上<br>   网址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a><br>   进入后点击红框位置即可下载<br>（注：直接下载可能速度较慢，通过右键红框位置复制地址到迅雷下载可高速完成下载）</p>
<a id="more"></a>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/1.png" title="git">

<p>   安装过程较简单，一路点击next即可，安装路径随意<br>   安装好后，若可以通过git version指令来查看版本信息，说明已经成功安装</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/2.png" title="git2">
<p>   接着配置SSH公钥：打开git-bash，输入：</p>
<blockquote>
<p>$ git config –global user.name “your_name”<br>$ git config –global user.email “<a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a>“</p>
</blockquote>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/2_1.png" title="git3">
<hr>
<h2 id="3-下载node-js运行环境"><a href="#3-下载node-js运行环境" class="headerlink" title="[3] 下载node.js运行环境"></a>[3] 下载node.js运行环境</h2><p>   node.js是一款基于Chrome V8引擎的JavaScript运行环境，使得JavaScript也能在web服务器端运行<br>   下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/3.png" title="node">
<p>   点击红框位置进行下载，也是一路点击next即可，路径自选<br>   下载好后，进入cmd，键入node -v以及npm -v,查看node和npm的版本信息，版本信息正常显示，则表明安装成功</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/4.png" title="node2">
<p>   其中npm是node.js提供的JavaScript的包管理工具，类似于python里面的pip，用它可以安装各种包，如jquery、bootstrap、underscore等，但是npm是从国外的服务器上下载各种包的，因此速度较慢，于是我国的淘宝团队研发了cnmp，是一个完整的npmjs.org镜像，与npm基本保持同步，拥有除public以外的各种命令，重点是下载速度提升显著<br>   安装方法：输入指令npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> 如下图所示</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/5.png" title="node3">
<p>   cmd中输入cnpm -v查看本本信息</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/6.png" title="node4">
<hr>
<h2 id="4-下载Subline编辑器"><a href="#4-下载Subline编辑器" class="headerlink" title="[4] 下载Subline编辑器"></a>[4] 下载Subline编辑器</h2><p>   若使用常规的记事本等编辑器写博客，容易遇到中文无法显示，乱码等问题，原因是没有使用utf-8编码。推荐使用Subline进行文本编辑（也可使用VScode，atom等），该编辑器支持utf-8编码<br>   Subline下载地址：<a href="http://www.sublimetext.com/3" target="_blank" rel="noopener">http://www.sublimetext.com/3</a></p>
<hr>
<h1 id="第二章：搭建本地hexo个人博客"><a href="#第二章：搭建本地hexo个人博客" class="headerlink" title="第二章：搭建本地hexo个人博客"></a>第二章：搭建本地hexo个人博客</h1><hr>
<h2 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="[1] 安装hexo"></a>[1] 安装hexo</h2><p>   输入命令：cnpm install -g hexo-cli</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/7.png" title="hexo">
<p>   同理，安装好后键入hexo -v检验版本信息以确保安装至PC</p>
<hr>
<h2 id="2-创建博客目录"><a href="#2-创建博客目录" class="headerlink" title="[2] 创建博客目录"></a>[2] 创建博客目录</h2><p>   在命令行中切换到某一路径下创建博客存放目录，输入指令：mkdir myblog (文件夹名可自取)<br>   接着cd myblog进入到文件夹中</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/8.png" title="hexo2">
<hr>
<h2 id="3-初始化hexo"><a href="#3-初始化hexo" class="headerlink" title="[3] 初始化hexo"></a>[3] 初始化hexo</h2><p>   输入命令：hexo init，若底端显示start blogging with hexo！字样则初始化成功</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/9.png" title="hexo3">
<hr>
<h2 id="4-查看搭建效果"><a href="#4-查看搭建效果" class="headerlink" title="[4] 查看搭建效果"></a>[4] 查看搭建效果</h2><p>   我们打开myblog文件夹，就可以看到hexo搭建的初始目录</p>
<blockquote>
<p><em>node_modules: 依赖包<br>   public：存放生成的页面<br>   scaffolds：生成文章的一些模板<br>   source：用来存放你的文章<br>   themes：主题<br>   _config.yml: 博客的配置文件</em></p>
</blockquote>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/10.png" title="hexo3">
<p>   cmd上输入hexo s，之后在浏览器中输入网址：localhost:4000则可看见初始化的界面</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/11.png" title="hexo4">
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/12.png" title="hexo5">

<hr>
<h1 id="第三章：将本地hexo博客布署到github上"><a href="#第三章：将本地hexo博客布署到github上" class="headerlink" title="第三章：将本地hexo博客布署到github上"></a>第三章：将本地hexo博客布署到github上</h1><hr>
<h2 id="完成了上一步后我们只能在本地查看个人博客，一旦换一台电脑则无法看见，并且每次都要通过键入hexo-s来启动稍显麻烦，因此我们需要将其布署到远端公开"><a href="#完成了上一步后我们只能在本地查看个人博客，一旦换一台电脑则无法看见，并且每次都要通过键入hexo-s来启动稍显麻烦，因此我们需要将其布署到远端公开" class="headerlink" title="   完成了上一步后我们只能在本地查看个人博客，一旦换一台电脑则无法看见，并且每次都要通过键入hexo s来启动稍显麻烦，因此我们需要将其布署到远端公开"></a>   完成了上一步后我们只能在本地查看个人博客，一旦换一台电脑则无法看见，并且每次都要通过键入hexo s来启动稍显麻烦，因此我们需要将其布署到远端公开</h2><h2 id="1-在Github上创建一个仓库"><a href="#1-在Github上创建一个仓库" class="headerlink" title="[1] 在Github上创建一个仓库"></a>[1] 在Github上创建一个仓库</h2><p>   进入Github官网：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a> 登录后在左侧的Respositories处点击new新建仓库，仓库名一定是：账户名.github.io,否则无效！然后点击创建按钮即可</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/13.png" title="github">

<hr>
<h2 id="2-安装deployer插件"><a href="#2-安装deployer插件" class="headerlink" title="[2] 安装deployer插件"></a>[2] 安装deployer插件</h2><p>   输入命令：cnpm install –save hexo-deployer-git,若出现如下结果则表示安装成功</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/14.png" title="github2">

<hr>
<h2 id="3-配置-config-yml文件"><a href="#3-配置-config-yml文件" class="headerlink" title="[3] 配置_config.yml文件"></a>[3] 配置_config.yml文件</h2><p>   右键_config.yml文件，使用Subline打开进行编写，在文件的最底部做如下修改：<br>   <em>deploy:<br>   type: git<br>   repo: <a href="https://github.com/luliang99/luliang99.github.io.git" target="_blank" rel="noopener">https://github.com/luliang99/luliang99.github.io.git</a><br>   branch: master</em><br>   其中，repo后面填写的即是我们的仓库地址，可进入github中名为[用户名.github.io]仓库中找到<br>   修改好后，ctrl+s保存</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/15.png" title="config">

<hr>
<h2 id="4-布署到远端"><a href="#4-布署到远端" class="headerlink" title="[4] 布署到远端"></a>[4] 布署到远端</h2><p>   前面都做好后，这一步就比较简单，在命令行处输入hexo d，可将本地博客推至远端，若出现Deployer Done字样，表示部署完成</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/16.png" title="github3">

<hr>
<h2 id="5-检验部署效果"><a href="#5-检验部署效果" class="headerlink" title="[5] 检验部署效果"></a>[5] 检验部署效果</h2><p>   输入域名地址：用户名.github.io，即可进入个人博客：当显示与localhost:4000上的页面一致时，表明部署成功！</p>
<img src="/2019/08/27/Windows下搭建hexo-Github个人博客（教程）/17.png" title="github4">










]]></content>
      
        
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
